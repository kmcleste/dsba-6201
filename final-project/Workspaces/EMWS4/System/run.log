NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
17150      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17151      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17152      put '<Node Id="Ids" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Update" Pid="" Gridid=""/>';
17153      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17154      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids : Beginning update before running 
* datetime : 05MAY2022:11:01:59 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Ids\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17156      %let _HPDMGRIDHOST=;
17157      %let _HPDMGRIDINSTALLLOC=;
17158      %let _HPDMGRIDDATASERVER=;
17159      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids : End update 
* datetime : 05MAY2022:11:01:59 
* 
*------------------------------------------------------------* 
17160      %let _emdsep = \;
17161      %em_getactionstatus(emlib =EMWS4, nodeid=Ids);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17162      proc compare base=EMWS4.Ids_emtrainvariable compare=EMWS4.Ids_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS4.Ids_emtrainvariable compare=EMWS4.Ids_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
17163      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 98 observations read from the data set EMWS4.IDS_EMTRAINVARIABLE.
NOTE: There were 98 observations read from the data set EMWS4.IDS_VARIABLESET.
NOTE: The data set WORK.DIFFDS has 0 observations and 8 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17164      %let diffVar = N;
17165      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17166      set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
17167      if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
17168      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 0 observations read from the data set WORK.DIFFDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17169      %let em_Train = N;
17170      %let em_Score = N;
17171      %let em_Report = N;
17172      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):    
MPRINT(EM_DIAGRAM):  ;

17173      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17174      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17175      put '<Node Id="Ids" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Complete" Pid="" Gridid=""/>';
17176      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17177      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17178      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Ids" is up to date and doesn't need to run. 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
17179      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17180      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17181      put '<Node Id="Part" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Update" Pid="" Gridid=""/>';
17182      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

17183      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Part : Beginning update before running 
* datetime : 05MAY2022:11:01:59 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Part_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "DOCUMENT" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Part\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17202      %let _HPDMGRIDHOST=;
17203      %let _HPDMGRIDINSTALLLOC=;
17204      %let _HPDMGRIDDATASERVER=;
17205      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Part : End update 
* datetime : 05MAY2022:11:01:59 
* 
*------------------------------------------------------------* 
17206      %let _emdsep = \;
17207      %em_getactionstatus(emlib =EMWS4, nodeid=Part);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17208      %let em_Train = N;
17209      %let em_Score = N;
17210      %let em_Report = N;
17211      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17212      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17213      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17214      put '<Node Id="Part" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Complete" Pid="" Gridid=""/>';
17215      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17216      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17217      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Part" is up to date and doesn't need to run. 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
17218      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17219      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17220      put '<Node Id="VarClus" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus" Event="Update" Pid="" Gridid=""/>';
17221      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

17222      %let emloopmode =;
*------------------------------------------------------------* 
* 
* VarClus : Beginning update before running 
* datetime : 05MAY2022:11:02:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.VarClus_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
17481      %let emexceptionString =;
17482      %let EMEXCEPTIONSTRING=;
17483      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17484      * UPDATE: VarClus;
MPRINT(EM_DIAGRAM):   * UPDATE: VarClus;
17485      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17486      %let EM_ACTION = UPDATE;
17487      %let syscc = 0;
17488      
17489      %macro main;
17490      
17491         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17492         %include temp;
17493         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17494         %include temp;
17495         filename temp;
17496      
17497        %SetProperties;
17498      
17499         %if %upcase(&EM_ACTION) = CREATE %then %do;
17500             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17501             %include temp;
17502             filename temp;
17503             %create;
17504         %end;
17505         %else
17506         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17507              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17508                 %include temp;
17509                 filename temp;
17510                 %train;
17511         %end;
17512         %else
17513         %if %upcase(&EM_ACTION) = SCORE %then %do;
17514                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17515                 %include temp;
17516                 filename temp;
17517                 %score;
17518         %end;
17519         %else
17520         %if %upcase(&EM_ACTION) = REPORT %then %do;
17521                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17522                 %include temp;
17523                 filename temp;
17524                 %report;
17525         %end;
17526         /*
17527         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17528             %put 'OPENING TABLE';
17529         %end;
17530         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17531             %put 'CLOSE TABLE';
17532         %end;
17533         */
17534      %mend main;
17535      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17536     +
17537     +/* Initialize property macro variables */
17538     +%macro SetProperties;
17539     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17540     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17541     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17542     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17543     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17544     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17545     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17546     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17547     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17548     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17549     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17550     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17551     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17552     +
17553     +%mend SetProperties;
17554     +
17555     +%Macro MakeDummyVariables(indata=,
17556     +                          outvar=,
17557     +                          outdata=,
17558     +                          fileref=,
17559     +                          recreatecmeta=N, /* optional */
17560     +                          incmeta=,     /* optional */
17561     +                          outcmeta=,    /* optional */
17562     +                          ndummyvars=_ndummyvars
17563     +                          );
17564     +    %global &ndummyvars;
17565     +
17566     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17567     +       class
17568     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17569     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17570     +    ;
17571     +    run;
17572     +    %let &ndummyvars = 0;
17573     +    data _null_;
17574     +    %let dsid = %sysfunc(open(work._classout));
17575     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17576     +    %let dsid = %sysfunc(close(&dsid));
17577     +    run;
17578     +
17579     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17580     +       input
17581     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17582     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17583     +        / level=nominal stdize=no;
17584     +       make outvar = &outvar;
17585     +       score data = &indata out =&outdata;
17586     +       code  file=  "&fileref";
17587     +    run;
17588     +    %if &recreatecmeta eq Y %then %do;
17589     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17590     +    data _tmpds;
17591     +        set _tmpds;
17592     +           ROLE = 'INPUT';
17593     +           LEVEL = 'INTERVAL';
17594     +           CREATOR='DMZIP';
17595     +           if NAME = '_TYPE_' then delete;
17596     +    run;
17597     +    data &outcmeta;
17598     +         set &incmeta _tmpds;
17599     +    run;
17600     +    %end;
17601     +    proc datasets lib=work nolist;
17602     +      delete  _dmdbdat _dmdbcat _classout
17603     +    %if &recreatecmeta eq Y %then %do;
17604     +    _tmpds
17605     +    %end;
17606     +    ;
17607     +    quit;
17608     +%Mend MakeDummyVariables;
17609     +
17610     +/*--- Determine Optimal Number of Cluster ----
17611     +%macro FindClusNum(statds=, groupds=, minvariation=);
17612     +   %global optnclus;
17613     +   data varclus_tmp(drop=_NAME_);
17614     +      set &statDs;
17615     +      where _type_ ='PROPOR';
17616     +   run;
17617     +   proc sort data=varclus_tmp;
17618     +      by _NCL_;
17619     +   run;
17620     +   proc transpose data=varclus_tmp out=varclus_tmp;
17621     +      by _NCL_;
17622     +      var %EM_INTERVAL_INPUT
17623     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17624     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17625     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17626     +          %do i = 2 %to &nvar;
17627     +          %let varname = %sysfunc(varname(&dsid, &i));
17628     +          &varname
17629     +          %end;
17630     +      %end;
17631     +   ;
17632     +   run;
17633     +
17634     +   %if &minVariation eq %then %do;
17635     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17636     +   %end;
17637     +   %if ^(0<&minVariation<100) %then %do;
17638     +       %let minVariation = 90;
17639     +   %end;
17640     +
17641     +   data _null_;
17642     +      set varclus_tmp end=eof;
17643     +      by _NCL_;
17644     +      retain flag 0;
17645     +      if first._ncl_ then flag=0;
17646     +      if .<col1 < &minVariation then flag=1;
17647     +      if last._ncl_ and ^flag then do;
17648     +         call symput('OPTNCL', _ncl_);
17649     +         stop;
17650     +      end;
17651     +     if eof then call symput('OPTNCL', _ncl_);
17652     +   run;
17653     +
17654     +   %let optnclus = &OPTNCL;
17655     +
17656     +   data varclus_tmp(drop=_NCL_ _NAME_);
17657     +      set &statDs;
17658     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17659     +   run;
17660     +   proc sort data=varclus_tmp;
17661     +      by _TYPE_;
17662     +   run;
17663     +   proc transpose data=varclus_tmp out=varclus_tmp;
17664     +      by _TYPE_;
17665     +   run;
17666     +   proc sort data=varclus_tmp;
17667     +      by _name_ _type_;
17668     +   run;
17669     +
17670     +  proc transpose data=varclus_tmp out=&groupds;
17671     +      by _NAME_;
17672     +   run;
17673     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17674     +      by Cluster descending Rsquare;
17675     +      where Cluster ne 0;
17676     +   run;
17677     +   proc datasets lib=work nolist mt=(DATA VIEW);
17678     +      delete varclus_tmp;
17679     +   run;
17680     +   quit;
17681     +%mend findClusNum;
17682     +*/
17683     +
17684     +%macro getNclusfromTrain(inoutstat=, nc=);
17685     +%global &nc;
17686     +data _null_;
17687     +    set &inoutstat end=eof;
17688     +    if eof then do;
17689     +    call symput("&nc", _ncl_);
17690     +    end;
17691     +run;
17692     +%mend  getNclusfromTrain;
17693     +
17694     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
17695     +
17696     +     *--- Build Code to Modify Metadata ---*;
17697     +     filename X "&deltacodefile";
17698     +     data _null_;
17699     +        FILE X;
17700     +        set &groupds end=eof;
17701     +        /*by Cluster;*/
17702     +         if _N_=1 then do;
17703     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17704     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17705     +           %end;
17706     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17707     +           put "if upcase(strip(NAME)) in (";
17708     +        end;
17709     +        if Strip(upcase(Selected)) eq 'YES' then do;
17710     +           string = '"'!!trim(left(VARIABLE))!!'"';
17711     +           put string;
17712     +        end;
17713     +        if eof then do;
17714     +           put ') then ROLE="INPUT";';
17715     +           put 'else ROLE="REJECTED";';
17716     +           put 'end;';
17717     +
17718     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17719     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17720     +           %end;
17721     +        end;
17722     +     run;
17723     +     quit;
17724     +
17725     +     filename X;
17726     +
17727     +     quit;
17728     +%mend MakeDeltaCode;
17729     +
17730     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
17731     +    %if ^%sysfunc(exist(&statds)) %then %do;
17732     +         %goto doendc;
17733     +    %end;
17734     +
17735     +    data &corrds(drop=_TYPE_ _NCL_) ;
17736     +       set &statds;
17737     +       where _type_ eq 'CORR' ;
17738     +    run ;
17739     +    proc sort data=&corrds;
17740     +       by _NAME_ ;
17741     +    run ;
17742     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
17743     +      BY _NAME_ ;
17744     +    run ;
17745     +    data &corrplotds;
17746     +       length _Y_ $100;
17747     +       set &corrplotDs;
17748     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
17749     +    run ;
17750     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
17751     +       set &corrplotds;
17752     +       where _LABEL_ ne '' ;
17753     +       keep _TMP_ _LABEL_ ;
17754     +    run ;
17755     +    data _null_;
17756     +       nobs=0;
17757     +       dsid = open('varclus_match');
17758     +       if dsid then do;
17759     +          nobs = attrn(dsid, 'NOBS');
17760     +          dsid = close(dsid);
17761     +       end;
17762     +       call symput ('CORR_NOBS', nobs);
17763     +    run;
17764     +    %if &corr_nobs %then %do;
17765     +        proc sort data=varclus_match;
17766     +           by _name_;
17767     +        run ;
17768     +        proc sort data=&corrplotds;
17769     +           by _name_;
17770     +        run ;
17771     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
17772     +           merge varclus_match &corrplotds;
17773     +           by _NAME_ ;
17774     +           if _X_ eq '' then _X_=_NAME_ ;
17775     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
17776     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
17777     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
17778     +
17779     +       run ;
17780     +    %end;
17781     +    %else %do;
17782     +        proc sort data=&corrplotds;
17783     +           by _name_;
17784     +        run ;
17785     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
17786     +           set &corrplotds;
17787     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17788     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17789     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
17790     +
17791     +        run ;
17792     +    %end;
17793     +    proc sort data=&corrplotds;
17794     +       by _X_ _Y_;
17795     +    run ;
17796     +    proc datasets lib=work nolist mt=(DATA VIEW);
17797     +       delete varclus_match;
17798     +    run;
17799     +    quit;
17800     +
17801     +%doendc:
17802     +
17803     +%mend MakeVarClusCorrData;
17804     +
17805     +%macro MakeStatPlotData(statds= , outstatplotds=);
17806     +   %if %sysfunc(exist(&statds)) %then %do;
17807     +
17808     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
17809     +          set &statDs;
17810     +          where _type_ in('MEAN', 'STD', 'N');
17811     +       run ;
17812     +       proc transpose data=varclus_tmp out=&outstatplotds;
17813     +          id _TYPE_ ;
17814     +       run ;
17815     +       data &outstatplotds;
17816     +          set &outstatplotds(obs=1000);
17817     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
17818     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17819     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
17820     +          else SCALEDSTD= STD ;
17821     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
17822     +       run ;
17823     +       proc sort data=&outstatplotds;
17824     +          by descending SCALEDSTD ;
17825     +       run ;
17826     +       proc datasets lib=work nolist mt=(DATA VIEW);
17827     +          delete varclus_tmp;
17828     +       run;
17829     +       quit;
17830     +    %end;
17831     +
17832     +%mend MakeStatPlotData;
17833     +
17834     +
17835     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
17836     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
17837     +    data &EM_USER_OUTSTATSCORE;
17838     +          set &indata;
17839     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
17840     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17841     +          if _TYPE_ = 'STD' then _NAME_='STD';
17842     +          DROP _TYPE_ _NCL_;
17843     +     run;
17844     +
17845     +     filename _file_  "&fileRef";
17846     +
17847     +     data _null_;
17848     +        FILE _file_ MOD;
17849     +        put ' ';
17850     +        put '/*-------------------------------------------------*/';
17851     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
17852     +        put '/*-------------------------------------------------*/';
17853     +        put ' ';
17854     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
17855     +
17856     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17857     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17858     +
17859     +        %let k = 1;
17860     +        %do %while(^%sysfunc(fetch(&dsid)));
17861     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17862     +                %if &k > 2 %then %do;
17863     +                 %let cn = %eval(&k-2);
17864     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
17865     +                %end;
17866     +                %let k = %eval(&k+1);
17867     +        %end;
17868     +
17869     +        %let rc = %sysfunc(rewind(&dsid));
17870     +
17871     +        %do i= 2 %to &nvar;
17872     +            %let _varname =  %sysfunc(varname(&dsid, &i));
17873     +            %do %while(^%sysfunc(fetch(&dsid)));
17874     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17875     +                %if &_name = MEAN %then
17876     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
17877     +                %else %if &_name = STD %then
17878     +                %let _std = %sysfunc(getvarn(&dsid, &i));
17879     +                %else %do;
17880     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
17881     +                      %let abscoeff = %sysfunc(abs(&coeff));
17882     +                          %if &abscoeff >  0 %then %do;
17883     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17884     +                           %end;
17885     +                 %end;
17886     +             %end;
17887     +             %let rc = %sysfunc(rewind(&dsid));
17888     +         %end;
17889     +
17890     +        %let dsid= %sysfunc(close(&dsid));
17891     +       run;
17892     +%mend CreateScoreCode;
17893     +
17894     +
17895     +
17896     +/*----------------------------------------------------------
17897     +    Instead of using %MakeRSquareData,
17898     +    %MakeVarClusResultTable at macro2.source is used
17899     + +----------------------------------------------------------*/
17900     +
17901     +
17902     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
17903     +
17904     +/* modifying  from ods rsquare = data */
17905     +
17906     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
17907     +    Length Cluster $16;
17908     +    length Variable $32;
17909     +    Length VariableLabel $64;
17910     +    set &indata; retain CurrentCluster;
17911     +    if NumberOfClusters ^= &ncluster then delete;
17912     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
17913     +    CurrentCluster = Cluster;
17914     +   run;
17915     +proc sort data =&outdata ;
17916     +     by Cluster RsquareRatio;
17917     +run;
17918     +data _tmprsq(drop=index);
17919     +     set &outdata; by Cluster;
17920     +     if first.Cluster then do;
17921     +     index = strip(scan(Cluster,2 ));
17922     +     Variable = "Clus"||index;
17923     +     VariableLabel = "Cluster Component "||index;
17924     +     OwnCluster = 1;
17925     +     NextClosest = .;
17926     +     RsquareRatio = 0;
17927     +     output;
17928     +     end;
17929     +run;
17930     +
17931     +proc sort data = _tmprsq ;
17932     +     by Cluster RsquareRatio;
17933     +run;
17934     +data &outdata;
17935     +     set &outdata _tmprsq;
17936     +by Cluster;
17937     +run;
17938     +
17939     +
17940     +/* Just create the Selected variable with all YES */
17941     +
17942     +data &outdata;
17943     +    set &outdata; by cluster;
17944     +    length Selected $8;
17945     +    Selected = 'YES';
17946     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
17947     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
17948     +    rename OwnCluster = RSqWithClusterComp;
17949     +    rename NextClosest = RSqWithNextClusComp;
17950     +run;
17951     +
17952     +
17953     +/* Selected = Y/N will be done %score section -----
17954     +
17955     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
17956     +data &outdata;
17957     +    set &outdata; by cluster;
17958     +    length Selected $8;
17959     +    if first.Cluster then Selected = 'YES';
17960     +    else Selected = 'NO';
17961     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
17962     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
17963     +    rename OwnCluster = RSqWithClusterComp;
17964     +    rename NextClosest = RSqWithNextClusComp;
17965     +run;
17966     +%end;
17967     +%else %do;
17968     +data &outdata;
17969     +    set &outdata; by cluster;
17970     +    if last.Cluster then Selected = 'YES';
17971     +    else Selected = 'NO';
17972     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
17973     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
17974     +    rename OwnCluster = RSqWithClusterComp;
17975     +    rename NextClosest = RSqWithNextClusComp;
17976     +run;
17977     +%end;
17978     +---------------------------------------------------------------*/
17979     +
17980     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
17981     +/* to calculate NextClosestClusRsq */
17982     +proc transpose data = &inClusRSquare  out=_clusRsq;
17983     +      by cluster;
17984     +      run;
17985     +data _clusRsq;
17986     +     set _clusRsq;
17987     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
17988     +run;
17989     +
17990     +proc sort data=_clusRsq;
17991     +    by cluster col1;
17992     +    run;
17993     +data _clusRsq(drop=_NAME_ _LABEL_);
17994     +     set _clusRsq; by cluster;
17995     +     if last.Cluster then output;
17996     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
17997     +     rename COL1 = RSqWithNextClusComp;
17998     +     rename Cluster = Variable;
17999     +     label  Cluster = "Variable";
18000     +run;
18001     +
18002     +proc sort data =&outdata;
18003     +     by Variable;
18004     +run;
18005     +data &outdata;
18006     +    merge &outdata _clusRsq;
18007     +    by Variable;
18008     +run;
18009     +proc sort data =&outdata;
18010     +by Cluster  RsquareRatio;
18011     +run;
18012     +quit;
18013     +%end;
18014     +
18015     +proc datasets lib = work nolist;
18016     +     delete _tmprsq _clusRsq;
18017     +     run;
18018     +quit;
18019     +
18020     +%mend MakeRSquareData;
18021     +
18022     +
18023     +/*-------------------------------------------------------------------------*/
18024     +
18025     +
18026     +
18027     +%macro ModifyCorr(indata=,
18028     +                  outdata=,
18029     +                  rsquare = Y
18030     +                  );
18031     +    data corr_tmp;
18032     +        set &indata;
18033     +    run;
18034     +     proc sql;
18035     +           update &indata
18036     +           set
18037     +     %let dsid = %sysfunc(open(work.corr_tmp));
18038     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18039     +          %do i = 4 %to &nvar;
18040     +          %let _name = %sysfunc(varname(&dsid, &i));
18041     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18042     +            %else  %let _name_md = &_name;
18043     +            %if &i < &nvar %then %do;
18044     +               &_name = 1- &_name_md ,
18045     +            %end;
18046     +            %else %do;
18047     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18048     +            %end;
18049     +          %end;
18050     +      %let dsid= %sysfunc(close(&dsid));
18051     +
18052     +      select * from &indata;
18053     +      run;
18054     +      proc datasets lib = work nolist;
18055     +           delete corr_tmp;
18056     +      run;
18057     +      quit;
18058     +
18059     + %mend ModifyCorr;
18060     +
18061     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18062     +    data &outdata(drop= _NCL_  _TYPE_);
18063     +       set &indata;
18064     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18065     +       rename _NAME_ = Cluster;
18066     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18067     +    run;
18068     +    %if &RSquare eq Y %then %do;
18069     +     data corr_tmp;
18070     +        set &outdata;
18071     +     run;
18072     +
18073     +     data &outdata(drop=i);
18074     +          set &outdata;
18075     +          %let dsid = %sysfunc(open(work.corr_tmp));
18076     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18077     +          %do i = 2 %to &nvar;
18078     +            %let _name = %sysfunc(varname(&dsid, &i));
18079     +            %let _name_md = &_name.**2;
18080     +                &_name = &_name_md;
18081     +          %end;
18082     +      %let dsid= %sysfunc(close(&dsid));
18083     +      run;
18084     +      proc datasets lib = work nolist;
18085     +           delete corr_tmp;
18086     +      run;
18087     +
18088     +    %end;
18089     +     quit;
18090     +%mend MakeClusStructCorrData;
18091     +
18092     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18093     +    data &outdata(drop= _NCL_  _TYPE_);
18094     +       set &indata;
18095     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18096     +       rename _NAME_ = Cluster;
18097     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18098     +    run;
18099     +    data corr_tmp;
18100     +        set &outdata;
18101     +    run;
18102     +
18103     +    %let dsid = %sysfunc(open(work.corr_tmp));
18104     +    %let nclus2= %eval(&ncluster+1);
18105     +    data &outdata;
18106     +         set &outdata;
18107     +          %do i = 2 %to &nclus2;
18108     +          %let i_1 = %eval(&i-1);
18109     +            %let _name = %sysfunc(varname(&dsid, &i));
18110     +            %let _newName = Clus&i_1;
18111     +                rename &_name = &_newName; ;
18112     +                *label &_name ="Cluster &i_1";
18113     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18114     +          %end;
18115     +          keep Cluster
18116     +          %do i = 2 %to &nclus2;
18117     +                %let _name = %sysfunc(varname(&dsid, &i));
18118     +                &_name
18119     +          %end;
18120     +          ;
18121     +    %let dsid= %sysfunc(close(&dsid));
18122     +     run;
18123     +     quit;
18124     +
18125     +    %if &RSquare eq Y %then %do;
18126     +
18127     +       data corr_tmp;
18128     +        set &outdata;
18129     +     run;
18130     +
18131     +     data &outdata(drop=i);
18132     +          set &outdata;
18133     +          %let dsid = %sysfunc(open(work.corr_tmp));
18134     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18135     +          %do i = 2 %to &nvar;
18136     +            %let _name = %sysfunc(varname(&dsid, &i));
18137     +            %let _name_md = &_name.**2;
18138     +                &_name = &_name_md;
18139     +          %end;
18140     +      %let dsid= %sysfunc(close(&dsid));
18141     +      run;
18142     +    %end;
18143     +
18144     +    %if &makeplotds eq Y %then %do;
18145     +     proc transpose data = &outdata
18146     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18147     +          by cluster;
18148     +     run;
18149     +     data &plotds;
18150     +          set  &plotds;
18151     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18152     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18153     +     run;
18154     +     %end;
18155     +     proc datasets lib = work nolist;
18156     +           delete corr_tmp;
18157     +     run;
18158     +     quit;
18159     +%mend MakeInterClusCorrData;
18160     +
18161     +
18162     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18163     +
18164     +data &outlink(drop = Selected);
18165     +     set &indata;
18166     +     LINKID = _N_;
18167     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18168     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18169     +run;
18170     +data &outnode(keep=NODEID TYPE LABEL);
18171     +    set &indata;
18172     +    length TYPE $16;
18173     +    rename Variable = NODEID;
18174     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18175     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18176     +    then  TYPE = "CLUSTER";
18177     +    else  TYPE="VARIABLE";
18178     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18179     +run;
18180     +quit;
18181     +%mend MakeClusConstellData;
18182     +
18183     +
18184     +
18185     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18186     +
18187     +data &outlink(drop = Selected);
18188     +     set &indata;
18189     +     LINKID = _N_;
18190     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18191     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18192     +run;
18193     +data &outnode(keep=NODEID TYPE LABEL);
18194     +    set &indata;
18195     +    length TYPE $16;
18196     +    rename Variable = NODEID;
18197     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18198     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18199     +    then  TYPE = "CLUSTER";
18200     +    else  TYPE="VARIABLE";
18201     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18202     +run;
18203     +quit;
18204     +%mend MakeClusConstellData;
18205     +
18206     +
18207     +/*--- This will work only when inds is not a view data -------
18208     +
18209     +%macro getNVarNObs(inds=, nvar=, nobs=);
18210     +
18211     +    %global &nvar;
18212     +    %global &nobs;
18213     +    data _null_;
18214     +         dsid = open("&inds");
18215     +         nv = attrn(dsid, 'NVAR');
18216     +         no = attrn(dsid, 'NOBS');
18217     +         dsid = close(dsid);
18218     +         call symput("&nvar", nv);
18219     +         call symput("&nobs", no);
18220     +    run;
18221     +    quit;
18222     +%mend  getNVarNObs;
18223     +
18224     ++---------------------------------------------------------------*/
18225     +
18226     +
18227     +%macro getNVar(inds=, nvar=);
18228     +    %global &nvar;
18229     +    data _null_;
18230     +         dsid = open("&inds");
18231     +         nv = attrn(dsid, 'NVAR');
18232     +         dsid = close(dsid);
18233     +         call symput("&nvar", nv);
18234     +    run;
18235     +    quit;
18236     +%mend  getNVar;
18237     +
18238     +
18239     +
18240     +%macro getNObs(inds=, nobs=);
18241     +    %global &nobs;
18242     +    data _null_;
18243     +        set &inds end=eof;
18244     +        if eof then call symput("&nobs", _N_);
18245     +    run;
18246     +    quit;
18247     +%mend  getNObs;
18248     +
18249     +%Macro CreateVarclusMeta(trainnum=);
18250     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18251     +    data &EM_USER_VARCLUSMETA;
18252     +         length TrainNum 8.;
18253     +         length NewTrain $8;
18254     +         length NGCluster 8.;
18255     +         length ExportedComp $16;
18256     +         length HideVariable $8;
18257     +         TrainNum = &trainnum;
18258     +         NewTrain = "Y";
18259     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18260     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18261     +         NGCluster = 0; /* zero means no twostage */
18262     +   run;
18263     +   quit;
18264     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18265     +
18266     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18267     +    data &outdata(drop= _NCL_  _TYPE_);
18268     +       set &indata;
18269     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18270     +       %if &globalclusid ne %then %do;
18271     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18272     +       rename _NAME_ = Cluster;
18273     +       %end;
18274     +       %else %do;
18275     +        _NAME_ = upcase(_NAME_);
18276     +       rename _NAME_ = Cluster;
18277     +       %end;
18278     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18279     +    run;
18280     +    data corr_tmp;
18281     +        set &outdata;
18282     +    run;
18283     +
18284     +    %let dsid = %sysfunc(open(work.corr_tmp));
18285     +    %let nclus2= %eval(&ncluster+1);
18286     +    data &outdata;
18287     +         set &outdata;
18288     +          %do i = 2 %to &nclus2;
18289     +          %let i_1 = %eval(&i-1);
18290     +            %let _name = %sysfunc(varname(&dsid, &i));
18291     +            %if &globalclusid ne %then
18292     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18293     +                     rename &_name = &_newName;
18294     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18295     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18296     +                %end;
18297     +            %else
18298     +                %do; %let _newName = CLUS&i_1;
18299     +                     rename &_name = &_newName;
18300     +                     *label &_name ="Cluster &i_1";
18301     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18302     +                %end;
18303     +          %end;
18304     +          keep Cluster
18305     +          %do i = 2 %to &nclus2;
18306     +                %let _name = %sysfunc(varname(&dsid, &i));
18307     +                &_name
18308     +          %end;
18309     +          ;
18310     +    %let dsid= %sysfunc(close(&dsid));
18311     +     run;
18312     +     quit;
18313     +
18314     +    %if &RSquare eq Y %then %do;
18315     +
18316     +       data corr_tmp;
18317     +        set &outdata;
18318     +     run;
18319     +
18320     +     data &outdata;
18321     +          set &outdata;
18322     +          %let dsid = %sysfunc(open(work.corr_tmp));
18323     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18324     +          %do i = 2 %to &nvar;
18325     +            %let _name = %sysfunc(varname(&dsid, &i));
18326     +            %let _name_md = &_name.**2;
18327     +                &_name = &_name_md;
18328     +          %end;
18329     +      %let dsid= %sysfunc(close(&dsid));
18330     +      run;
18331     +    %end;
18332     +
18333     +    %if &makeplotds eq Y %then %do;
18334     +     proc transpose data = &outdata
18335     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18336     +          by cluster;
18337     +     run;
18338     +     data &plotds;
18339     +          set  &plotds;
18340     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18341     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18342     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18343     +     run;
18344     +     %end;
18345     +     proc datasets lib = work nolist;
18346     +           delete corr_tmp;
18347     +     run;
18348     +     quit;
18349     +%mend MakeInterClusCorrData;
18350     +
18351     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18352     +    data _tmpds(drop= _NCL_);
18353     +       set &indata;
18354     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18355     +       %if &globalclusid ne %then %do;
18356     +           _NAME_ = "GC&globalclusid.";
18357     +       rename _NAME_ = Cluster;
18358     +       %end;
18359     +       %else %do;
18360     +        _NAME_ = "CLUS";
18361     +        rename _NAME_ = Cluster;
18362     +       %end;
18363     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18364     +    run;
18365     +    proc transpose data =_tmpds out =&outdata;
18366     +    run;
18367     +
18368     +    data &outdata(drop=COL1);
18369     +        %if &globalclusid ne %then %do;
18370     +        length GCluster $16;
18371     +        %end;
18372     +        length Cluster $32;
18373     +        length _NAME_ $32;
18374     +         set &outdata;
18375     +         _NAME_ = upcase(_NAME_);
18376     +         rename _NAME_=Variable;
18377     +         *label _NAME_="Variable";
18378     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18379     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18380     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18381     +
18382     +         %if &globalclusid ne %then %do;
18383     +          GCluster = "GC&globalclusid";
18384     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18385     +         %end;
18386     +         %else %do;
18387     +         Cluster = "CLUS"||strip(COL1);
18388     +        %end;
18389     +         rename COL2 = RSqWithOwnClusComp;
18390     +         *label COL2 = "R-Square With Own Cluster Component";
18391     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18392     +
18393     +   run;
18394     +   proc sort data =&outdata;
18395     +        by Cluster RSqWithOwnClusComp;
18396     +   run;
18397     +   proc datasets lib = work nolist;
18398     +           delete _tmpds;
18399     +   run;
18400     +   quit;
18401     +%mend MakeOwnRSquare;
18402     +
18403     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18404     +    data &outdata(drop= _NCL_  _TYPE_);
18405     +       %if &globalclusid ne %then %do;
18406     +        length GCluster $16;
18407     +        %end;
18408     +       set &indata;
18409     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18410     +       %if &globalclusid ne %then %do;
18411     +         GCluster = "GC&globalclusid";
18412     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18413     +         rename _NAME_ = Cluster;
18414     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18415     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18416     +
18417     +       %end;
18418     +       %else %do;
18419     +         _NAME_ = upcase(_NAME_);
18420     +         rename _NAME_ = Cluster;
18421     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18422     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18423     +
18424     +       %end;
18425     +     run;
18426     +    %if &RSquare eq Y %then %do;
18427     +     data corr_tmp;
18428     +          set &outdata;
18429     +     run;
18430     +     %let istart = 2;
18431     +     %if &globalclusid ne %then %let istart = 3;
18432     +     data &outdata;
18433     +          set &outdata;
18434     +          %let dsid = %sysfunc(open(work.corr_tmp));
18435     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18436     +          %do i =&istart %to &nvar;
18437     +            %let _name = %sysfunc(varname(&dsid, &i));
18438     +            %let _name_md = &_name.**2;
18439     +                &_name = &_name_md;
18440     +          %end;
18441     +      %let dsid= %sysfunc(close(&dsid));
18442     +      run;
18443     +      proc datasets lib = work nolist;
18444     +           delete corr_tmp;
18445     +      run;
18446     +    %end;
18447     +     quit;
18448     +%mend MakeClusStructCorrData;
18449     +
18450     +/*
18451     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18452     +*/
18453     +
18454     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18455     +
18456     +     /* The indata should be the outdata
18457     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18458     +
18459     +     proc sort data =&indata out=_tmpclusRsq;
18460     +     by cluster;
18461     +     run;
18462     +
18463     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18464     +      by cluster;
18465     +     run;
18466     +
18467     +     proc sort data=_tmpclusRsq;
18468     +        by _NAME_ COL1;
18469     +     run;
18470     +
18471     +     data _tmpclusRsq;
18472     +         length _NAME_ $32;
18473     +         set _tmpclusRsq; by _NAME_;
18474     +          _NAME_ = upcase(_NAME_);
18475     +          %if &ncluster ne 1 %then %do;
18476     +             if last._NAME_ then delete;
18477     +          %end;
18478     +          %else %do;
18479     +             COL1 = 0;
18480     +          %end;
18481     +     run;
18482     +     /* need to sort again */
18483     +     proc sort data=_tmpclusRsq;
18484     +        by _NAME_ COL1;
18485     +     run;
18486     +
18487     +     data &outdata;
18488     +         set _tmpclusRsq; by _NAME_;
18489     +         Cluster = upcase(Cluster);
18490     +         if last._NAME_ then output;
18491     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18492     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18493     +         rename COL1 = RSqWithNextClusComp;
18494     +         Cluster = upcase(Cluster);
18495     +         rename Cluster = ClosestCluster;
18496     +         *label  Cluster = "Next Closest Cluster";
18497     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18498     +         rename _NAME_ = Variable;
18499     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18500     +    run;
18501     +
18502     +
18503     +    %if &globalclusid ne %then %do;
18504     +    data &outdata;
18505     +       length GCluster $16;
18506     +       set &outdata;
18507     +       GCluster = "GC&globalclusid";
18508     +       run;
18509     +    %end;
18510     +    proc datasets lib = work nolist;
18511     +           delete _tmpclusRsq;
18512     +    run;
18513     +    quit;
18514     +%mend FindNextClosestClusByVar;
18515     +
18516     +
18517     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18518     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18519     +     proc sort data =&indata out=_tmpclusRsq;
18520     +     by cluster;
18521     +     run;
18522     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18523     +     by cluster;
18524     +     run;
18525     +     proc sort data=_tmpclusRsq;
18526     +        by _NAME_ col1;
18527     +     run;
18528     +     data _tmpclusRsq;
18529     +         length _NAME_ $32;
18530     +         set _tmpclusRsq; by _NAME_;
18531     +          _NAME_ = upcase(_NAME_);
18532     +          %if &ncluster ne 1 %then %do;
18533     +             if last._NAME_ then delete;
18534     +          %end;
18535     +          %else %do;
18536     +             COL1 = 0;
18537     +          %end;
18538     +     run;
18539     +     data &outdata;
18540     +         set _tmpclusRsq; by _NAME_;
18541     +         Cluster = upcase(Cluster);
18542     +         if last._NAME_ then output;
18543     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18544     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18545     +         rename COL1 = RSqWithNextClusComp;
18546     +         Cluster = upcase(Cluster);
18547     +         rename Cluster = ClosestCluster;
18548     +         *label  Cluster = "Next Closest Cluster";
18549     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18550     +         rename _NAME_ = Variable;
18551     +         *label  _NAME_ = "Variable";
18552     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18553     +
18554     +    run;
18555     +    %if &globalclusid ne %then %do;
18556     +    data &outdata;
18557     +       length GCluster $16;
18558     +       set &outdata;
18559     +       GCluster = "GC&globalclusid";
18560     +       run;
18561     +    %end;
18562     +
18563     +    proc datasets lib = work nolist;
18564     +           delete _tmpclusRsq;
18565     +    run;
18566     +
18567     +    quit;
18568     +%mend FindNextClosestClusByCluster;
18569     +
18570     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18571     +/*----
18572     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18573     +-----------*/
18574     +
18575     +proc sort data =&indata1;
18576     +    by Variable;
18577     +run;
18578     +proc sort data =&indata2;
18579     +    by Variable;
18580     +run;
18581     +data &outdata;
18582     +    merge &indata1 &indata2;
18583     +    by Variable;
18584     +    length Type $16;
18585     +    Type = 'Variable';
18586     +    *label Type ='Type';
18587     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18588     +run;
18589     +
18590     +
18591     +data &indata3;
18592     +    set  &indata3 ;
18593     +    length RSqWithOwnClusComp 8.;
18594     +    Cluster = Variable;
18595     +    RSqWithOwnClusComp = 1;
18596     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18597     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18598     +    length Type $16;
18599     +    Type = 'ClusterComp';
18600     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18601     +
18602     +;
18603     +run;
18604     +
18605     +proc sort data=&outdata;
18606     +    by Cluster;
18607     +run;
18608     +proc sort data =&indata3;
18609     +    by Cluster;
18610     +run;
18611     +
18612     +data &outdata;
18613     +     set &outdata &indata3;
18614     +     by Cluster;
18615     +run;
18616     +
18617     +
18618     +/* Create the Selected variable with all YES */
18619     +
18620     +data &outdata;
18621     +     set &outdata;
18622     +     length RsqRatio 8.;
18623     +     length Selected $8;
18624     +     *label RSqRatio = "1-R**2 Ratio";
18625     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18626     +     *label Selected = "Variable Selected";
18627     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18628     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18629     +     Selected ='YES';
18630     +     rename _LABEL_ = Label;
18631     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18632     +run;
18633     +
18634     +
18635     +/*----  Selected = Y/N will be assigened at the %score                   -------+
18636     +        Just create the Selected variable with all YES at the step above
18637     + +------------------------------------------------------------------------------+
18638     +
18639     +proc sort data=&outdata;
18640     +    by Cluster RsqRatio;
18641     +run;
18642     +
18643     +%if &selectedcomp eq CLUSTERCOMP %then %do;
18644     +data &outdata;
18645     +     set &outdata; by Cluster;
18646     +     length Selected $8;
18647     +     label Selected = "Variable Selected";
18648     +     if  first.Cluster then Selected ='Yes';
18649     +     else Selected = 'No';
18650     +    run;
18651     +%end;
18652     +%else %do;
18653     +data &outdata(drop = _var _varchange);
18654     +     set &outdata; retain _var 0; by Cluster;
18655     +     length Selected $8;
18656     +     label Selected = "Variable Selected";
18657     +     if first.Cluster then  _varchange = 0;
18658     +     else _varchange =1;
18659     +     if _var ne _varchange then  Selected  = 'Yes';
18660     +     else Selected = 'No';
18661     +     if last.cluster then  _var = 0;
18662     +     else _var = _varchange;
18663     +run;
18664     +%end;
18665     +
18666     +--------------------------------------------------------------*/
18667     +
18668     +quit;
18669     +%mend MakeVarClusResultTable;
18670     +
18671     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18672     +     proc sort data =&indata;
18673     +        by cluster;
18674     +     run;
18675     +     proc transpose data =&indata
18676     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18677     +          by cluster;
18678     +     run;
18679     +     data &outdata;
18680     +          set  &outdata;
18681     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18682     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18683     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
18684     +     run;
18685     +     %if &globalclusid ne %then %do;
18686     +     data &outdata;
18687     +          Length GCluster $16;
18688     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18689     +          set  &outdata;
18690     +          GCluster ="GC&globalclusid.";
18691     +          run;
18692     +     %end;
18693     +
18694     +%Mend MakePlotDataFromCorrTable;
18695     +
18696     +
18697     +%macro MakeCorrelation(indata=,
18698     +                       outstat=_tmpoutstat,
18699     +                       corrmatrix=N,
18700     +                       outcorr=_tmpoutcorr,
18701     +                       includeclassvar=N,
18702     +                       target=,
18703     +                       freq=,
18704     +                       weight=);
18705     +   %if &target eq  %then %do;
18706     +
18707     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
18708     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
18709     +       %if &includeclassvar eq Y %then %do;
18710     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18711     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18712     +          %do i = 2 %to &nvar;
18713     +          %let varname = %sysfunc(varname(&dsid, &i));
18714     +          &varname
18715     +          %end;
18716     +       %end;
18717     +       ;
18718     +      %if &freq ne  %then %do;
18719     +          freq &freq;
18720     +      %end;
18721     +      %if &weight ne  %then %do;
18722     +          weight &weight;
18723     +      %end;
18724     +
18725     +      run;
18726     +      %if &corrmatrix eq Y %then %do;
18727     +      data  &outcorr (drop = _NCL_ _TYPE_);
18728     +           set  &outstat ;
18729     +           if _TYPE_ ='CORR' then output;
18730     +      run;
18731     +      %end;
18732     +    %end;
18733     +    %else %do;
18734     +       proc corr data=&indata outp=&outstat noprint;
18735     +            var
18736     +       %let dsid = %sysfunc(open(&indata));
18737     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
18738     +          %do i = 1 %to &nvar;
18739     +              %let _name = %sysfunc(varname(&dsid, &i));
18740     +              %if &_name ne &target %then;
18741     +              &_name
18742     +           %end;
18743     +        %let dsid= %sysfunc(close(&dsid));
18744     +        ;
18745     +        with &target;
18746     +        run;
18747     +    %end;
18748     +    quit;
18749     +%mend MakeCorrelation;
18750     +
18751     +
18752     +%macro MakeCorrelationDistance(indata=,
18753     +                               outdata=,
18754     +                               rsquare = N
18755     +                               );
18756     +    data corr_tmp;
18757     +        set &indata;
18758     +        if _N_ = 1 then do;
18759     +           output;
18760     +           stop;
18761     +         end;
18762     +    run;
18763     +    %if &outdata ne  %then %let  _outdata = &outdata;
18764     +    %else %let _outdata = &indata;
18765     +
18766     +    data &_outdata;
18767     +         set &indata;
18768     +
18769     +         %let dsid = %sysfunc(open(work.corr_tmp));
18770     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
18771     +          %do i = 2 %to &nvar;
18772     +              %let _name = %sysfunc(varname(&dsid, &i));
18773     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
18774     +              %else  %let _name_md = &_name;
18775     +              &_name = 1- &_name_md;
18776     +          %end;
18777     +      %let dsid= %sysfunc(close(&dsid));
18778     +      run;
18779     +      proc datasets lib = work nolist;
18780     +           delete corr_tmp;
18781     +      run;
18782     +      quit;
18783     +  %mend MakeCorrelationDistance;
18784     +
18785     +
18786     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
18787     +                                   rsquare = N
18788     +                                   );
18789     +    data corr_tmp;
18790     +        set &indata;
18791     +    run;
18792     +    proc sql noprint;
18793     +           update &indata
18794     +           set
18795     +     %let dsid = %sysfunc(open(work.corr_tmp));
18796     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18797     +          %do i = 4 %to &nvar;
18798     +          %let _name = %sysfunc(varname(&dsid, &i));
18799     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18800     +            %else  %let _name_md = &_name;
18801     +            %if &i < &nvar %then %do;
18802     +               &_name = 1- &_name_md ,
18803     +            %end;
18804     +            %else %do;
18805     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
18806     +            %end;
18807     +          %end;
18808     +      %let dsid= %sysfunc(close(&dsid));
18809     +
18810     +      select * from &indata;
18811     +      run;
18812     +     data &indata( drop = _NCL_);
18813     +           set &indata;
18814     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
18815     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
18816     +     run;
18817     +     data &indata(DROP = _NCL_);
18818     +           set &indata;
18819     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
18820     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
18821     +           rename _NAME_ = _VAR_;
18822     +     run;
18823     +     proc datasets lib = work nolist;
18824     +           delete corr_tmp;
18825     +     run;
18826     +     quit;
18827     + %mend UpdateOutStatCorrToDistance;
18828     +
18829     +
18830     +%macro HierClusWithCorr(indata= ,
18831     +                        ncluster=,
18832     +                        method = Ward,
18833     +                        outtree = _outtree,
18834     +                        idvar =_VAR_,
18835     +                        outdata=,
18836     +                        rescore = N,
18837     +                        newncluster=
18838     +                        );
18839     +      %global &newncluster;
18840     +      %if &rescore ne Y %then %do;
18841     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
18842     +                   method=&method outtree=&outtree noprint;
18843     +           id &idvar;
18844     +      run;
18845     +      %end;
18846     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
18847     +      run;
18848     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
18849     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
18850     +      run;
18851     +      data _outcontent;
18852     +          set _outcontent;
18853     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
18854     +          index = 1;
18855     +          rename NAME = _NAME_;
18856     +      run;
18857     +      proc sort data=_outcontent;
18858     +          by _NAME_;
18859     +      run;
18860     +      proc sort data =&outdata;
18861     +           by _NAME_;
18862     +      run;
18863     +      data &outdata(drop=index);
18864     +          merge &outdata _outcontent;
18865     +          by _NAME_;
18866     +          if index = . then delete;
18867     +      run;
18868     +      /*-----------------------------------------------------------*/
18869     +      data &outdata;
18870     +           length CLUSNAME $16;
18871     +           set &outdata;
18872     +           if CLUSTER > &ncluster then delete;
18873     +           CLUSNAME='GC'||strip(CLUSTER);
18874     +           *label CLUSNAME = "Cluster Name";
18875     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
18876     +           rename _NAME_ = VARIABLE ;
18877     +           *label _NAME_ = "Variable";
18878     +           *label CLUSTER = "Cluster";
18879     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18880     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18881     +      run;
18882     +      proc sort data=&outdata out=&outdata;
18883     +           by CLUSTER;
18884     +      run;
18885     +      proc means data =&outdata noprint;
18886     +           output out=_meanout;
18887     +      run;
18888     +      data _null_;
18889     +            set _meanout;
18890     +            if strip(_STAT_) eq 'MAX' then do;
18891     +            call symput("&newncluster", CLUSTER);
18892     +            stop;
18893     +            end;
18894     +      run;
18895     +
18896     +      proc datasets lib = work nolist;
18897     +           delete _outcontent _meanout;
18898     +      run;
18899     +      quit;
18900     +%mend  HierClusWithCorr;
18901     +
18902     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
18903     +
18904     +     data _tmpindata;
18905     +          set &indata;
18906     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18907     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18908     +          if _TYPE_ = 'STD' then _NAME_='STD';
18909     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
18910     +          DROP _TYPE_ _NCL_;
18911     +     run;
18912     +
18913     +     filename _file_  "&fileRef";
18914     +
18915     +     data _null_;
18916     +        FILE _file_ MOD;
18917     +        put ' ';
18918     +        put "/*-------------------------------------------------*/";
18919     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
18920     +        put "/*-------------------------------------------------*/";
18921     +        put ' ';
18922     +        %let dsid = %sysfunc(open(work._tmpindata));
18923     +
18924     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18925     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18926     +        %let k = 1;
18927     +        %do %while(^%sysfunc(fetch(&dsid)));
18928     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18929     +               %if &k > 2 %then %do;
18930     +                %let cn = %eval(&k-2);
18931     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
18932     +                %end;
18933     +                %let k = %eval(&k+1);
18934     +
18935     +        %end;
18936     +        %let rc = %sysfunc(rewind(&dsid));
18937     +
18938     +        %do j= 2 %to &nvar;
18939     +            %let _varname = %sysfunc(varname(&dsid, &j));
18940     +            %do %while(^%sysfunc(fetch(&dsid)));
18941     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18942     +                %if &_name = MEAN %then
18943     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
18944     +                %else %if &_name = STD %then
18945     +                %let _std = %sysfunc(getvarn(&dsid, &j));
18946     +                %else %do;
18947     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
18948     +                      %let abscoeff = %sysfunc(abs(&coeff));
18949     +                          %if &abscoeff >  0 %then %do;
18950     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18951     +                           %end;
18952     +                 %end;
18953     +             %end;
18954     +             %let rc = %sysfunc(rewind(&dsid));
18955     +         %end;
18956     +
18957     +        %let dsid= %sysfunc(close(&dsid));
18958     +
18959     +     run;
18960     +
18961     +     filename _file_;
18962     +     proc datasets lib = work nolist;
18963     +           delete _tmpindata;
18964     +     run;
18965     +     quit;
18966     +%mend CreateScoreCode2;
18967     +
18968     +
18969     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
18970     +
18971     +     /*--- Build Code to Modify Metadata ---*/
18972     +     filename X "&deltacodefile";
18973     +     data _null_;
18974     +        FILE X;
18975     +        set &groupds end=eof;
18976     +        if _N_=1 then do;
18977     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18978     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18979     +           %end;
18980     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18981     +           put "if upcase(strip(NAME)) in (";
18982     +        end;
18983     +        if Strip(upcase(Selected)) eq 'YES' then do;
18984     +           string = '"'!!trim(left(VARIABLE))!!'"';
18985     +           put string;
18986     +        end;
18987     +        if eof then do;
18988     +           put ') then ROLE="INPUT";';
18989     +           put 'else ROLE="REJECTED";';
18990     +           put 'end;';
18991     +
18992     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18993     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18994     +           %end;
18995     +        end;
18996     +     run;
18997     +     quit;
18998     +
18999     +     filename X;
19000     +     quit;
19001     +%mend MakeDeltaCode2;
19002     +
19003     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19004     +  %global &ngc;
19005     +  data _null_;
19006     +  %if &indata ne %then %do;
19007     +      %let dsid = %sysfunc(open(&indata));
19008     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19009     +      %let dsid = %sysfunc(close(&dsid));
19010     +  %end;
19011     +  %else %do;
19012     +       %let nvar = %eval(&ninput+&ndummy); ;
19013     +  %end;
19014     +  %let numgc = %eval(&nvar/&div+2);
19015     +  %let &ngc = &numgc;
19016     +   run;
19017     +  quit;
19018     +%mend getInitialGClusterNumber;
19019     +
19020     +
19021     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19022     +data &outlink(drop = Selected);
19023     +     set &indata;
19024     +     LINKID = _N_;
19025     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19026     +run;
19027     +data &outnode(keep=NODEID TYPE LABEL);
19028     +    set &indata;
19029     +    length TYPE $16;
19030     +    rename VARIABLE = NODEID;
19031     +    *label  CLUSNAME="Node ID";
19032     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19033     +    TYPE = "VARIABLE";
19034     +    *label TYPE = "Node Type";
19035     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19036     +    run;
19037     +data _tmp(keep=NODEID TYPE LABEL);
19038     +    set &indata;
19039     +    length TYPE $16;
19040     +    rename CLUSNAME = NODEID;
19041     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19042     +    TYPE = "GCLUSTER";
19043     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19044     +    run;
19045     +proc sort data=_tmp;
19046     +    by NODEID;
19047     +run;
19048     +data _tmp;
19049     +    set _tmp; by NODEID;
19050     +    if first.NODEID then output;
19051     +run;
19052     +proc sort data=&outnode;
19053     +    by NODEID;
19054     +run;
19055     +data  &outnode;
19056     +    set _tmp &outnode;
19057     +run;
19058     +proc datasets lib = work nolist;
19059     +     delete _tmp;
19060     +run;
19061     +quit;
19062     +%mend MakeGobalConstellData;
19063     +
19064     +/* Make contellation plot data among GCLUSTERS */
19065     +
19066     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19067     +
19068     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19069     +     set &indata;
19070     +     LINKID = _N_;
19071     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19072     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19073     +     end;
19074     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19075     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19076     +     end;
19077     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19078     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19079     +    end;
19080     +run;
19081     +
19082     +data _tmp_outrsquare;
19083     +        set &inoutrsq;
19084     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19085     +run;
19086     +
19087     +proc freq data =_tmp_outrsquare noprint;
19088     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19089     +run;
19090     +
19091     +data &outnode(keep=_NAME_ TYPE LABEL);
19092     +    set &outlink;
19093     +    length TYPE $16;
19094     +    length LABEL $100;
19095     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19096     +
19097     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19098     +    TYPE = "GCLUSTER";
19099     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19100     +    end;
19101     +    else do;
19102     +    TYPE= "ROOT";
19103     +    LABEL= _NAME_;
19104     +    end;
19105     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19106     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19107     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19108     +    run;
19109     +
19110     +proc sort data=&outnode;
19111     +     by _NAME_;
19112     +proc sort data=_tmp_GCLUSFREQ;
19113     +     by _NAME_;
19114     +run;
19115     +
19116     +data  &outnode;
19117     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19118     +     if COUNT=. then COUNT=1;
19119     +run;
19120     +
19121     +proc datasets lib = work nolist;
19122     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19123     +run;
19124     +
19125     +quit;
19126     +%Mend MakeGClusterConstData;
19127     +
19128     +
19129     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19130     +
19131     +    data _gscoretmpds;
19132     +          set &indata;
19133     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19134     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19135     +          if _TYPE_ = 'STD' then _NAME_='STD';
19136     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19137     +          DROP _TYPE_ _NCL_;
19138     +     run;
19139     +
19140     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19141     +        GCluster Component &globalclusid ------ */
19142     +
19143     +    filename _file_  "&fileref";
19144     +
19145     +    data _null_;
19146     +        %if &globalclusid eq 1 %then %do;
19147     +          FILE _file_;
19148     +        %end;
19149     +        %else %do;
19150     +          FILE _file_ MOD;
19151     +        %end;
19152     +
19153     +        %let dsid = %sysfunc(open(work._gscoretmpds));
19154     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19155     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19156     +
19157     +        %let k = 1;
19158     +        %do %while(^%sysfunc(fetch(&dsid)));
19159     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19160     +                %if &k > 2 %then %do;
19161     +                put "&_name = 0 ; ";
19162     +                %end;
19163     +                %let k = %eval(&k+1);
19164     +        %end;
19165     +
19166     +        %let rc = %sysfunc(rewind(&dsid));
19167     +        %do i= 2 %to &nvar;
19168     +            %let _varname =  %sysfunc(varname(&dsid, &i));
19169     +            %do %while(^%sysfunc(fetch(&dsid)));
19170     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19171     +                %if &_name = MEAN %then
19172     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19173     +                %else %if &_name = STD %then
19174     +                %let _std = %sysfunc(getvarn(&dsid, &i));
19175     +                %else %do;
19176     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19177     +                      %let abscoeff = %sysfunc(abs(&coeff));
19178     +                          %if &abscoeff >  0 %then %do;
19179     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19180     +                           %end;
19181     +                 %end;
19182     +             %end;
19183     +             %let rc = %sysfunc(rewind(&dsid));
19184     +
19185     +         %end;
19186     +
19187     +        %let dsid= %sysfunc(close(&dsid));
19188     +       run;
19189     +
19190     +
19191     +       proc datasets lib=work nolist;
19192     +            delete _gscoretmpds;
19193     +       run;
19194     +      quit;
19195     +
19196     +%mend CreateGClusterScoreCode;
19197     +
19198     +
19199     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19200     +
19201     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19202     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19203     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19204     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19205     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19206     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19207     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19208     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19209     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19210     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19211     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19212     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19213     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19214     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19215     +
19216     +   filename gsfile "&gscorecode";
19217     +
19218     +   data &EM_USER_GSCORE;
19219     +             set &indata;
19220     +             %include  gsfile;
19221     +        keep
19222     +        %do i=1 %to &ngcluster;
19223     +         %let gcvarname = GC&i;
19224     +         &gcvarname
19225     +        %end;
19226     +     ;
19227     +   run;
19228     +
19229     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19230     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19231     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19232     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19233     +    noprint  ;
19234     +     var
19235     +       %do i=1 %to &ngcluster;
19236     +         %let gcvarname = GC&i;
19237     +         &gcvarname
19238     +        %end;
19239     +   ;
19240     +   run;
19241     +
19242     +
19243     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19244     +   data &EM_USER_GSCORECORRPLOT ;
19245     +        set &EM_USER_GSCORECORRPLOT;
19246     +        rename _X_ = X;
19247     +        rename _Y_ = Y;
19248     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19249     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19250     +   run;
19251     +
19252     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19253     +
19254     +   data &EM_USER_GSCORETREE;
19255     +        length _NAME_ $32;
19256     +        length _LABEL_ $100;
19257     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19258     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19259     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19260     +        end;else do;
19261     +         _LABEL_ = _NAME_;
19262     +        end;
19263     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19264     +
19265     +   run;
19266     +
19267     +   quit;
19268     +
19269     +%mend MakeGClusterCorrelation;
19270     +
19271     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
19272      *------------------------------------------------------------*;
19273      * End UPDATE: VarClus;
19274      *------------------------------------------------------------*;
19275      

19276      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19278      %let _HPDMGRIDHOST=;
19279      %let _HPDMGRIDINSTALLLOC=;
19280      %let _HPDMGRIDDATASERVER=;
19281      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* VarClus : End update 
* datetime : 05MAY2022:11:02:00 
* 
*------------------------------------------------------------* 
19282      %let _emdsep = \;
19283      %em_getactionstatus(emlib =EMWS4, nodeid=VarClus);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19284      %let em_filemodtime=;
19285      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
19286      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
19287      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
19288      where fileref eq "#LN00206";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00206";
19289      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
19290      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00206';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19291      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19292      %let em_Train = N;
19293      %let em_Score = N;
19294      %let em_Report = N;
19295      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

19296      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19297      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19298      put '<Node Id="VarClus" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus" Event="Complete" Pid="" Gridid=""/>';
19299      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19300      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19301      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19302      put '<Node Id="Tree" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Update" Pid="" Gridid=""/>';
19303      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19304      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree : Beginning update before running 
* datetime : 05MAY2022:11:02:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify RESPOND(type=PROFIT label= RESPOND);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.RESPOND;
MPRINT(EM_DECDATA):   length RESPOND $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   RESPOND="1";
MPRINT(EM_DECDATA):   COUNT=2739;
MPRINT(EM_DECDATA):   DATAPRIOR=0.0566424021838;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.0566424021838;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   RESPOND="0";
MPRINT(EM_DECDATA):   COUNT=45617;
MPRINT(EM_DECDATA):   DATAPRIOR=0.94335759781619;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.94335759781619;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify RESPOND(type=PROFIT label= RESPOND);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify RESPOND(type=PROFIT label= RESPOND);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
19732      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
19733      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
19734      TARGET="RESPOND";
MPRINT(EM_DIAGRAM):   TARGET="RESPOND";
19735      DECDATA="EMWS4.Ids_RESPOND_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS4.Ids_RESPOND_DD";
19736      DECMETA="EMWS4.Ids_RESPOND_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS4.Ids_RESPOND_DM";
19737      output;
MPRINT(EM_DIAGRAM):   output;
19738      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19739      %let emexceptionString =;
19740      %let EMEXCEPTIONSTRING=;
19741      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
19742      * UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree;
19743      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
19744      %let EM_ACTION = UPDATE;
19745      %let syscc = 0;
19746      %macro main;
19747      
19748        %if %upcase(&EM_ACTION) = CREATE %then %do;
19749          filename temp catalog 'sashelp.emmodl.tree_create.source';
19750          %include temp;
19751          filename temp;
19752      
19753          %em_tree_create;
19754        %end;
19755      
19756         %else
19757         %if %upcase(&EM_ACTION) = TRAIN %then %do;
19758      
19759             filename temp catalog 'sashelp.emmodl.tree_train.source';
19760             %include temp;
19761             filename temp;
19762             %em_tree_train;
19763         %end;
19764      
19765        %else
19766        %if %upcase(&EM_ACTION) = SCORE %then %do;
19767          filename temp catalog 'sashelp.emmodl.tree_score.source';
19768          %include temp;
19769          filename temp;
19770      
19771          %em_tree_score;
19772      
19773        %end;
19774      
19775        %else
19776        %if %upcase(&EM_ACTION) = REPORT %then %do;
19777      
19778             filename temp catalog 'sashelp.emmodl.tree_report.source';
19779             %include temp;
19780             filename temp;
19781      
19782             %em_tree_report;
19783         %end;
19784      
19785        %else
19786        %if %upcase(&EM_ACTION) = OPENINT %then %do;
19787      
19788             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19789             %include temp;
19790             filename temp;
19791             %EM_TREE_OPENTREEVIEWER;
19792      
19793         %end;
19794      
19795        %else
19796        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19797      
19798             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19799             %include temp;
19800             filename temp;
19801             %EM_TREE_CLOSETREEVIEWER;
19802      
19803         %end;
19804      
19805      
19806         %doendm:
19807      %mend main;
19808      
19809      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
19810      
19811      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
19812      * End UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree;
19813      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

19814      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19816      %let _HPDMGRIDHOST=;
19817      %let _HPDMGRIDINSTALLLOC=;
19818      %let _HPDMGRIDDATASERVER=;
19819      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree : End update 
* datetime : 05MAY2022:11:02:00 
* 
*------------------------------------------------------------* 
19820      %let _emdsep = \;
19821      %em_getactionstatus(emlib =EMWS4, nodeid=Tree);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19822      %let em_filemodtime=;
19823      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
19824      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
19825      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
19826      where fileref eq "#LN00227";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00227";
19827      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
19828      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00227';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19829      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19830      %let em_Train = N;
19831      %let em_Score = N;
19832      %let em_Report = N;
19833      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

19834      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19835      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19836      put '<Node Id="Tree" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Complete" Pid="" Gridid=""/>';
19837      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19838      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19839      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19840      put '<Node Id="Tree2" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree2" Event="Update" Pid="" Gridid=""/>';
19841      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19842      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree2 : Beginning update before running 
* datetime : 05MAY2022:11:02:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify RESPOND(type=PROFIT label= RESPOND);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.RESPOND;
MPRINT(EM_DECDATA):   length RESPOND $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   RESPOND="1";
MPRINT(EM_DECDATA):   COUNT=2739;
MPRINT(EM_DECDATA):   DATAPRIOR=0.0566424021838;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.0566424021838;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   RESPOND="0";
MPRINT(EM_DECDATA):   COUNT=45617;
MPRINT(EM_DECDATA):   DATAPRIOR=0.94335759781619;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.94335759781619;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify RESPOND(type=PROFIT label= RESPOND);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify RESPOND(type=PROFIT label= RESPOND);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
20253      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
20254      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
20255      TARGET="RESPOND";
MPRINT(EM_DIAGRAM):   TARGET="RESPOND";
20256      DECDATA="EMWS4.Ids_RESPOND_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS4.Ids_RESPOND_DD";
20257      DECMETA="EMWS4.Ids_RESPOND_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS4.Ids_RESPOND_DM";
20258      output;
MPRINT(EM_DIAGRAM):   output;
20259      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20260      %let emexceptionString =;
20261      %let EMEXCEPTIONSTRING=;
20262      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20263      * UPDATE: Tree2;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree2;
20264      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20265      %let EM_ACTION = UPDATE;
20266      %let syscc = 0;
20267      %macro main;
20268      
20269        %if %upcase(&EM_ACTION) = CREATE %then %do;
20270          filename temp catalog 'sashelp.emmodl.tree_create.source';
20271          %include temp;
20272          filename temp;
20273      
20274          %em_tree_create;
20275        %end;
20276      
20277         %else
20278         %if %upcase(&EM_ACTION) = TRAIN %then %do;
20279      
20280             filename temp catalog 'sashelp.emmodl.tree_train.source';
20281             %include temp;
20282             filename temp;
20283             %em_tree_train;
20284         %end;
20285      
20286        %else
20287        %if %upcase(&EM_ACTION) = SCORE %then %do;
20288          filename temp catalog 'sashelp.emmodl.tree_score.source';
20289          %include temp;
20290          filename temp;
20291      
20292          %em_tree_score;
20293      
20294        %end;
20295      
20296        %else
20297        %if %upcase(&EM_ACTION) = REPORT %then %do;
20298      
20299             filename temp catalog 'sashelp.emmodl.tree_report.source';
20300             %include temp;
20301             filename temp;
20302      
20303             %em_tree_report;
20304         %end;
20305      
20306        %else
20307        %if %upcase(&EM_ACTION) = OPENINT %then %do;
20308      
20309             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20310             %include temp;
20311             filename temp;
20312             %EM_TREE_OPENTREEVIEWER;
20313      
20314         %end;
20315      
20316        %else
20317        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
20318      
20319             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20320             %include temp;
20321             filename temp;
20322             %EM_TREE_CLOSETREEVIEWER;
20323      
20324         %end;
20325      
20326      
20327         %doendm:
20328      %mend main;
20329      
20330      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
20331      
20332      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20333      * End UPDATE: Tree2;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree2;
20334      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

20335      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20337      %let _HPDMGRIDHOST=;
20338      %let _HPDMGRIDINSTALLLOC=;
20339      %let _HPDMGRIDDATASERVER=;
20340      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree2 : End update 
* datetime : 05MAY2022:11:02:01 
* 
*------------------------------------------------------------* 
20341      %let _emdsep = \;
20342      %em_getactionstatus(emlib =EMWS4, nodeid=Tree2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20343      %let em_filemodtime=;
20344      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
20345      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
20346      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
20347      where fileref eq "#LN00248";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00248";
20348      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
20349      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00248';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20350      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
20351      %let em_Train = N;
20352      %let em_Score = N;
20353      %let em_Report = N;
20354      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

20355      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20356      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20357      put '<Node Id="Tree2" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree2" Event="Complete" Pid="" Gridid=""/>';
20358      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20359      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20360      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "VarClus" is up to date and doesn't need to run. 
Node "Tree" is up to date and doesn't need to run. 
Node "Tree2" is up to date and doesn't need to run. 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
20361      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20362      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20363      put '<Node Id="Reg" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Update" Pid="" Gridid=""/>';
20364      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20365      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg : Beginning update before running 
* datetime : 05MAY2022:11:02:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.VarClus_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Reg\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20385      %let _HPDMGRIDHOST=;
20386      %let _HPDMGRIDINSTALLLOC=;
20387      %let _HPDMGRIDDATASERVER=;
20388      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg : End update 
* datetime : 05MAY2022:11:02:01 
* 
*------------------------------------------------------------* 
20389      %let _emdsep = \;
20390      %em_getactionstatus(emlib =EMWS4, nodeid=Reg);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20391      %let em_Train = N;
20392      %let em_Score = N;
20393      %let em_Report = N;
20394      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

20395      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20396      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20397      put '<Node Id="Reg" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Complete" Pid="" Gridid=""/>';
20398      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20399      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20400      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Reg" is up to date and doesn't need to run. 
traverser_readyNode_note 
20401      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20402      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20403      put '<Node Id="MdlComp" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Update" Pid="" Gridid=""/>';
20404      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20405      %let emloopmode =;
*------------------------------------------------------------* 
* 
* MdlComp : Beginning update before running 
* datetime : 05MAY2022:11:02:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.MdlComp_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT export needupdate;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_exportSet EMWS4.Tree2_exportSet EMWS4.Reg_exportSet ;
MPRINT(EM_DIAGRAM):   where EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   drop export needupdate;
MPRINT(EM_DIAGRAM):   port = upcase(trim(NODELABEL)!!'_'!!left(NODEPORT));
MPRINT(EM_DIAGRAM):   if port = upcase("TREE_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_RANK") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_SCOREDIST") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_REPORTFIT") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else USE="Y";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base30KU37_ as select * from WORK.M37W_YUD order by PORT;
MPRINT(EM_DIAGRAM):   create view work._comp30KU37_ as select * from WORK.M05PBC40 order by PORT;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base30KU37_ compare=work._comp30KU37_ out=WORK._DIFF0VRBQBS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id PORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12B6_00K as select * from WORK._DIFF0VRBQBS where PORT in (select PORT from WORK._DIFF0VRBQBS where _type_ = "DIF") order by PORT, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2WIVS9B as select * from WORK._DIFF0VRBQBS where _type_ = "COMPARE" and PORT not in (select PORT from WORK._DIFF0VRBQBS where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2WIVS9B as select * from WORK._DIFF0VRBQBS where _type_ = "BASE" and PORT not in (select PORT from WORK._DIFF0VRBQBS where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2WIVS9B;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2WIVS9B;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2WIVS9B;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2WIVS9B;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 12 observations read from the data set WORK.MDLCOMP_FILTERSET.
NOTE: The data set EMWS4.MDLCOMP_IMPORTSET has 12 observations and 14 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS4.TREE_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO40FDLZ7Y has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS4.TREE_EMINFO.
      WHERE (TARGET='RESPOND') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41LJZL6T has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO42SMA0L4 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMINFO.
      WHERE (TARGET='RESPOND') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO42H4WNAU has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS4.REG_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO431PZTYN has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS4.REG_EMINFO.
      WHERE (TARGET='RESPOND') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO421DOKD7 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
20459      data EMWS4.MdlComp_VariableSet;
MPRINT(EM_DIAGRAM):    data EMWS4.MdlComp_VariableSet;
20460      length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
MPRINT(EM_DIAGRAM):   length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
20461      NAME = "RESPOND";
MPRINT(EM_DIAGRAM):   NAME = "RESPOND";
20462      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
20463      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
20464      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
20465      LABEL = 'response target';
MPRINT(EM_DIAGRAM):   LABEL = 'response target';
20466      output;
MPRINT(EM_DIAGRAM):   output;
20467      NAME = "RESPOND";
MPRINT(EM_DIAGRAM):   NAME = "RESPOND";
20468      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
20469      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
20470      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
20471      LABEL = 'response target';
MPRINT(EM_DIAGRAM):   LABEL = 'response target';
20472      output;
MPRINT(EM_DIAGRAM):   output;
20473      NAME = "RESPOND";
MPRINT(EM_DIAGRAM):   NAME = "RESPOND";
20474      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
20475      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
20476      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
20477      LABEL = 'response target';
MPRINT(EM_DIAGRAM):   LABEL = 'response target';
20478      output;
MPRINT(EM_DIAGRAM):   output;
20479      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable USE is uninitialized.
NOTE: The data set EMWS4.MDLCOMP_VARIABLESET has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20480      proc sort data=EMWS4.MdlComp_VariableSet nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS4.MdlComp_VariableSet nodupkey NOTHREADS;
20481      by NAME LEVEL;
MPRINT(EM_DIAGRAM):   by NAME LEVEL;
20482      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS4.MDLCOMP_VARIABLESET.
NOTE: 2 observations with duplicate key values were deleted.
NOTE: The data set EMWS4.MDLCOMP_VARIABLESET has 1 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20483      data EMWS4.MdlComp_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS4.MdlComp_VariableSet;
20484      set EMWS4.MdlComp_VariableSet;
MPRINT(EM_DIAGRAM):   set EMWS4.MdlComp_VariableSet;
20485      if NAME = "RESPOND" then USE="Y";
MPRINT(EM_DIAGRAM):   if NAME = "RESPOND" then USE="Y";
20486      else USE = "N";
MPRINT(EM_DIAGRAM):   else USE = "N";
20487      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS4.MDLCOMP_VARIABLESET.
NOTE: The data set EMWS4.MDLCOMP_VARIABLESET has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\MdlComp\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20489      %let _HPDMGRIDHOST=;
20490      %let _HPDMGRIDINSTALLLOC=;
20491      %let _HPDMGRIDDATASERVER=;
20492      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* MdlComp : End update 
* datetime : 05MAY2022:11:02:02 
* 
*------------------------------------------------------------* 
20493      %let _emdsep = \;
20494      %em_getactionstatus(emlib =EMWS4, nodeid=MdlComp);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20495      %let em_Train = Y;
20496      %let em_Report = Y;
20497      %let em_Score = Y;
20498      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

20499      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20500      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20501      put '<Node Id="MdlComp" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Run" Pid="" Gridid=""/>';
20502      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20503      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
20504      %let SYSCC=0;
20505      signon C2DDRL5H macvar=C2DDRL5H;
MPRINT(EM_DIAGRAM):   signon macvar=C2DDRL5H;
WARNING: TCP Access method tracing is enabled.
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd   -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C2DDRL5H commencing (SAS Release 9.04.01M6P111518).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M6) 
      Licensed to UNIVERSITY OF NORTH CAROLINA CHARLOTTE - SFA T&R, Site 70080897.
NOTE: This session is executing on the X64_10HOME  platform.



NOTE: Analytical products:
      
      SAS/STAT 15.1
      SAS/ETS 15.1
      SAS/IML 15.1
      SAS/QC 15.1

NOTE: Additional host information:

 X64_10HOME WIN 10.0.19041  Workstation

NOTE: SAS initialization used:
      real time           0.31 seconds
      cpu time            0.28 seconds
      
NOTE: Remote signon to C2DDRL5H complete.
20506      rsubmit C2DDRL5H wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C2DDRL5H in progress.
NOTE: Remote submit to C2DDRL5H commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %nrbquote(Kyle McLester);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(MdlComp);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS4;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMASSMT.ASSESS.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %nrbquote(Kyle McLester);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(final-project);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =MdlComp;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_MdlComp = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_MdlComp = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
20507      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20508      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20509      put '<Node Id="MdlComp" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Run" Pid=" " Gridid=""/>';
20510      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20511      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20512      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20513      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20514      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20515      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20516      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20517      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20518      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20519      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20520      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20521      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20522      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20523      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20524      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20525      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20526      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20527      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20528      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20529      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20530      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20531      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20532      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20533      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20534      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20535      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20536      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20537      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20538      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_runningNode_note 
20539      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20540      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %nrbquote(Kyle McLester);
3     %let EMLDSPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(MdlComp);
6     %let EMPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4);
7     %let EMWS = EMWS4;
8     %let EMNODECLASS = SASHELP.EMASSMT.ASSESS.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %nrbquote(Kyle McLester);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201\final-project);
18    %let EMPROJNAME = %nrstr(final-project);
19    %let EMPROJPATH = %nrstr(C:\Users\Kyle McLester\Desktop\dsba-6201);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =MdlComp;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* MdlComp : Running 
* datetime : 05MAY2022:11:02:03 
* 
*------------------------------------------------------------* 
6575   %let SYSCC =0;
6576   %let EMGROUPMODE =;
6577   %let EMGROUPID =;
13109  data work.MdlComp;
13110  set EMWS4.em_nodeid;
13111  where
13112  (NODEID="Tree2" and LABEL ne 'Tree2')
13113  OR (NODEID="Tree" and LABEL ne 'Tree1')
13114  OR (NODEID="Reg" and LABEL ne 'Regression')
13115  ;
13116  run;

NOTE: There were 0 observations read from the data set EMWS4.EM_NODEID.
      WHERE ((NODEID='Tree2') and (LABEL not = 'Tree2')) or ((NODEID='Tree') and (LABEL not = 'Tree1')) or ((NODEID='Reg') and (LABEL not = 'Regression'));
NOTE: The data set WORK.MDLCOMP has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13643  data EMWS4.MdlComp_EMTRAINVARIABLE;
13644  length NAME $64;
13645  set EMWS4.MdlComp_VariableSet;
13646  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
13647     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
13648  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
13649  run;

NOTE: Variable ORDER is uninitialized.
NOTE: There were 1 observations read from the data set EMWS4.MDLCOMP_VARIABLESET.
NOTE: The data set EMWS4.MDLCOMP_EMTRAINVARIABLE has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

13650  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* MdlComp : End run 
* datetime : 05MAY2022:11:02:10 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-10.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           7.48 seconds
      cpu time            5.96 seconds
      

13653   %put &&emexceptionstring;
 
13654   %sysrput emerror_MdlComp = &&emexceptionstring;
13655   %put &&emloopmode;
 
13656   %sysrput emloopmode_MdlComp = &&emloopmode;
NOTE: Remote submit to C2DDRL5H complete.
NOTE: Remote signoff from C2DDRL5H commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           7.90 seconds
      cpu time            6.29 seconds
      
NOTE: Remote signoff from C2DDRL5H complete.
traverser_runningNode_note 
20541      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20542      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "MdlComp" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\MdlComp\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "MdlComp" succeeded. 
20544      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20545      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20546      put '<Node Id="MdlComp" Event="Complete" Pid="2168" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Complete" Pid="2168" Gridid=""/>';
20547      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=DESKTOP-IGMQS45,
      Local Host IP addr=fe80::b1d3:5519:2705:8806%15,
      Peer Hostname Name=DESKTOP-IGMQS45,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=57874,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Run Completed 
NOTE: There are no active tasks/transactions.
20548      waitfor _all_ C2DDRL5H;
MPRINT(EM_DIAGRAM):    waitfor _all_ C2DDRL5H;
20549      signoff C2DDRL5H;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C2DDRL5H does not exist.  SIGNOFF is not necessary.
20550      proc printto;
MPRINT(EM_DIAGRAM):   proc printto;
20551      run;
MPRINT(EM_DIAGRAM):   run;

