*------------------------------------------------------------*
User:                Kyle McLester
Date:                April 13, 2022
Time:                19:29:37
Site:                70080897
Platform:            X64_10HOME
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 13, 2022
Time:                19:29:31
*------------------------------------------------------------*
15225  proc freq data=EMWS4.VarClus_VariableSet noprint;
15226  table ROLE*LEVEL/out=WORK.VarClusMETA;
15227  run;
 
NOTE: There were 99 observations read from the data set EMWS4.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
15228  proc print data=WORK.VarClusMETA label noobs;
15229  var ROLE LEVEL COUNT;
15230  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15231  title9 ' ';
15232  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15233  run;
 
NOTE: There were 7 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15234  title10;
 
15235  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15629  *------------------------------------------------------------*;
15630  * VarClus: Generation of macros and macro variables;
15631  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15632  *------------------------------------------------------------*;
 
15633  %let EMEXCEPTIONSTRING=;
15634  *------------------------------------------------------------*;
15635  * TRAIN: VarClus;
15636  *------------------------------------------------------------*;
15637  %let EM_ACTION = TRAIN;
15638  %let syscc = 0;
15639
15640  %macro main;
15641
15642     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15643     %include temp;
15644     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15645     %include temp;
15646     filename temp;
15647
15648    %SetProperties;
15649
15650     %if %upcase(&EM_ACTION) = CREATE %then %do;
15651         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15652         %include temp;
15653         filename temp;
15654         %create;
15655     %end;
15656     %else
15657     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15658          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15659             %include temp;
15660             filename temp;
15661             %train;
15662     %end;
15663     %else
15664     %if %upcase(&EM_ACTION) = SCORE %then %do;
15665             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15666             %include temp;
15667             filename temp;
15668             %score;
15669     %end;
15670     %else
15671     %if %upcase(&EM_ACTION) = REPORT %then %do;
15672             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15673             %include temp;
15674             filename temp;
15675             %report;
15676     %end;
15677     /*
15678     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15679         %put 'OPENING TABLE';
15680     %end;
15681     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15682         %put 'CLOSE TABLE';
15683     %end;
15684     */
15685  %mend main;
15686  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15687 +
15688 +/* Initialize property macro variables */
15689 +%macro SetProperties;
15690 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15691 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15692 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15693 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15694 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15695 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15696 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15697 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15698 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15699 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15700 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15701 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15702 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15703 +
15704 +%mend SetProperties;
15705 +
15706 +%Macro MakeDummyVariables(indata=,
15707 +                          outvar=,
15708 +                          outdata=,
15709 +                          fileref=,
15710 +                          recreatecmeta=N, /* optional */
15711 +                          incmeta=,     /* optional */
15712 +                          outcmeta=,    /* optional */
15713 +                          ndummyvars=_ndummyvars
15714 +                          );
15715 +    %global &ndummyvars;
15716 +
15717 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15718 +       class
15719 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15720 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15721 +    ;
15722 +    run;
15723 +    %let &ndummyvars = 0;
15724 +    data _null_;
15725 +    %let dsid = %sysfunc(open(work._classout));
15726 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15727 +    %let dsid = %sysfunc(close(&dsid));
15728 +    run;
15729 +
15730 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15731 +       input
15732 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15733 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15734 +        / level=nominal stdize=no;
15735 +       make outvar = &outvar;
15736 +       score data = &indata out =&outdata;
15737 +       code  file=  "&fileref";
15738 +    run;
15739 +    %if &recreatecmeta eq Y %then %do;
15740 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15741 +    data _tmpds;
15742 +        set _tmpds;
15743 +           ROLE = 'INPUT';
15744 +           LEVEL = 'INTERVAL';
15745 +           CREATOR='DMZIP';
15746 +           if NAME = '_TYPE_' then delete;
15747 +    run;
15748 +    data &outcmeta;
15749 +         set &incmeta _tmpds;
15750 +    run;
15751 +    %end;
15752 +    proc datasets lib=work nolist;
15753 +      delete  _dmdbdat _dmdbcat _classout
15754 +    %if &recreatecmeta eq Y %then %do;
15755 +    _tmpds
15756 +    %end;
15757 +    ;
15758 +    quit;
15759 +%Mend MakeDummyVariables;
15760 +
15761 +/*--- Determine Optimal Number of Cluster ----
15762 +%macro FindClusNum(statds=, groupds=, minvariation=);
15763 +   %global optnclus;
15764 +   data varclus_tmp(drop=_NAME_);
15765 +      set &statDs;
15766 +      where _type_ ='PROPOR';
15767 +   run;
15768 +   proc sort data=varclus_tmp;
15769 +      by _NCL_;
15770 +   run;
15771 +   proc transpose data=varclus_tmp out=varclus_tmp;
15772 +      by _NCL_;
15773 +      var %EM_INTERVAL_INPUT
15774 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15775 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15776 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15777 +          %do i = 2 %to &nvar;
15778 +          %let varname = %sysfunc(varname(&dsid, &i));
15779 +          &varname
15780 +          %end;
15781 +      %end;
15782 +   ;
15783 +   run;
15784 +
15785 +   %if &minVariation eq %then %do;
15786 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15787 +   %end;
15788 +   %if ^(0<&minVariation<100) %then %do;
15789 +       %let minVariation = 90;
15790 +   %end;
15791 +
15792 +   data _null_;
15793 +      set varclus_tmp end=eof;
15794 +      by _NCL_;
15795 +      retain flag 0;
15796 +      if first._ncl_ then flag=0;
15797 +      if .<col1 < &minVariation then flag=1;
15798 +      if last._ncl_ and ^flag then do;
15799 +         call symput('OPTNCL', _ncl_);
15800 +         stop;
15801 +      end;
15802 +     if eof then call symput('OPTNCL', _ncl_);
15803 +   run;
15804 +
15805 +   %let optnclus = &OPTNCL;
15806 +
15807 +   data varclus_tmp(drop=_NCL_ _NAME_);
15808 +      set &statDs;
15809 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15810 +   run;
15811 +   proc sort data=varclus_tmp;
15812 +      by _TYPE_;
15813 +   run;
15814 +   proc transpose data=varclus_tmp out=varclus_tmp;
15815 +      by _TYPE_;
15816 +   run;
15817 +   proc sort data=varclus_tmp;
15818 +      by _name_ _type_;
15819 +   run;
15820 +
15821 +  proc transpose data=varclus_tmp out=&groupds;
15822 +      by _NAME_;
15823 +   run;
15824 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15825 +      by Cluster descending Rsquare;
15826 +      where Cluster ne 0;
15827 +   run;
15828 +   proc datasets lib=work nolist mt=(DATA VIEW);
15829 +      delete varclus_tmp;
15830 +   run;
15831 +   quit;
15832 +%mend findClusNum;
15833 +*/
15834 +
15835 +%macro getNclusfromTrain(inoutstat=, nc=);
15836 +%global &nc;
15837 +data _null_;
15838 +    set &inoutstat end=eof;
15839 +    if eof then do;
15840 +    call symput("&nc", _ncl_);
15841 +    end;
15842 +run;
15843 +%mend  getNclusfromTrain;
15844 +
15845 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15846 +
15847 +     *--- Build Code to Modify Metadata ---*;
15848 +     filename X "&deltacodefile";
15849 +     data _null_;
15850 +        FILE X;
15851 +        set &groupds end=eof;
15852 +        /*by Cluster;*/
15853 +         if _N_=1 then do;
15854 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15855 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15856 +           %end;
15857 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15858 +           put "if upcase(strip(NAME)) in (";
15859 +        end;
15860 +        if Strip(upcase(Selected)) eq 'YES' then do;
15861 +           string = '"'!!trim(left(VARIABLE))!!'"';
15862 +           put string;
15863 +        end;
15864 +        if eof then do;
15865 +           put ') then ROLE="INPUT";';
15866 +           put 'else ROLE="REJECTED";';
15867 +           put 'end;';
15868 +
15869 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15870 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15871 +           %end;
15872 +        end;
15873 +     run;
15874 +     quit;
15875 +
15876 +     filename X;
15877 +
15878 +     quit;
15879 +%mend MakeDeltaCode;
15880 +
15881 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15882 +    %if ^%sysfunc(exist(&statds)) %then %do;
15883 +         %goto doendc;
15884 +    %end;
15885 +
15886 +    data &corrds(drop=_TYPE_ _NCL_) ;
15887 +       set &statds;
15888 +       where _type_ eq 'CORR' ;
15889 +    run ;
15890 +    proc sort data=&corrds;
15891 +       by _NAME_ ;
15892 +    run ;
15893 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15894 +      BY _NAME_ ;
15895 +    run ;
15896 +    data &corrplotds;
15897 +       length _Y_ $100;
15898 +       set &corrplotDs;
15899 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15900 +    run ;
15901 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15902 +       set &corrplotds;
15903 +       where _LABEL_ ne '' ;
15904 +       keep _TMP_ _LABEL_ ;
15905 +    run ;
15906 +    data _null_;
15907 +       nobs=0;
15908 +       dsid = open('varclus_match');
15909 +       if dsid then do;
15910 +          nobs = attrn(dsid, 'NOBS');
15911 +          dsid = close(dsid);
15912 +       end;
15913 +       call symput ('CORR_NOBS', nobs);
15914 +    run;
15915 +    %if &corr_nobs %then %do;
15916 +        proc sort data=varclus_match;
15917 +           by _name_;
15918 +        run ;
15919 +        proc sort data=&corrplotds;
15920 +           by _name_;
15921 +        run ;
15922 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15923 +           merge varclus_match &corrplotds;
15924 +           by _NAME_ ;
15925 +           if _X_ eq '' then _X_=_NAME_ ;
15926 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15927 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15928 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15929 +
15930 +       run ;
15931 +    %end;
15932 +    %else %do;
15933 +        proc sort data=&corrplotds;
15934 +           by _name_;
15935 +        run ;
15936 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15937 +           set &corrplotds;
15938 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15939 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15940 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15941 +
15942 +        run ;
15943 +    %end;
15944 +    proc sort data=&corrplotds;
15945 +       by _X_ _Y_;
15946 +    run ;
15947 +    proc datasets lib=work nolist mt=(DATA VIEW);
15948 +       delete varclus_match;
15949 +    run;
15950 +    quit;
15951 +
15952 +%doendc:
15953 +
15954 +%mend MakeVarClusCorrData;
15955 +
15956 +%macro MakeStatPlotData(statds= , outstatplotds=);
15957 +   %if %sysfunc(exist(&statds)) %then %do;
15958 +
15959 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15960 +          set &statDs;
15961 +          where _type_ in('MEAN', 'STD', 'N');
15962 +       run ;
15963 +       proc transpose data=varclus_tmp out=&outstatplotds;
15964 +          id _TYPE_ ;
15965 +       run ;
15966 +       data &outstatplotds;
15967 +          set &outstatplotds(obs=1000);
15968 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15969 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15970 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15971 +          else SCALEDSTD= STD ;
15972 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15973 +       run ;
15974 +       proc sort data=&outstatplotds;
15975 +          by descending SCALEDSTD ;
15976 +       run ;
15977 +       proc datasets lib=work nolist mt=(DATA VIEW);
15978 +          delete varclus_tmp;
15979 +       run;
15980 +       quit;
15981 +    %end;
15982 +
15983 +%mend MakeStatPlotData;
15984 +
15985 +
15986 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15987 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15988 +    data &EM_USER_OUTSTATSCORE;
15989 +          set &indata;
15990 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15991 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15992 +          if _TYPE_ = 'STD' then _NAME_='STD';
15993 +          DROP _TYPE_ _NCL_;
15994 +     run;
15995 +
15996 +     filename _file_  "&fileRef";
15997 +
15998 +     data _null_;
15999 +        FILE _file_ MOD;
16000 +        put ' ';
16001 +        put '/*-------------------------------------------------*/';
16002 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
16003 +        put '/*-------------------------------------------------*/';
16004 +        put ' ';
16005 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
16006 +
16007 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16008 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16009 +
16010 +        %let k = 1;
16011 +        %do %while(^%sysfunc(fetch(&dsid)));
16012 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16013 +                %if &k > 2 %then %do;
16014 +                 %let cn = %eval(&k-2);
16015 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
16016 +                %end;
16017 +                %let k = %eval(&k+1);
16018 +        %end;
16019 +
16020 +        %let rc = %sysfunc(rewind(&dsid));
16021 +
16022 +        %do i= 2 %to &nvar;
16023 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16024 +            %do %while(^%sysfunc(fetch(&dsid)));
16025 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16026 +                %if &_name = MEAN %then
16027 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16028 +                %else %if &_name = STD %then
16029 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16030 +                %else %do;
16031 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16032 +                      %let abscoeff = %sysfunc(abs(&coeff));
16033 +                          %if &abscoeff >  0 %then %do;
16034 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16035 +                           %end;
16036 +                 %end;
16037 +             %end;
16038 +             %let rc = %sysfunc(rewind(&dsid));
16039 +         %end;
16040 +
16041 +        %let dsid= %sysfunc(close(&dsid));
16042 +       run;
16043 +%mend CreateScoreCode;
16044 +
16045 +
16046 +
16047 +/*----------------------------------------------------------
16048 +    Instead of using %MakeRSquareData,
16049 +    %MakeVarClusResultTable at macro2.source is used
16050 + +----------------------------------------------------------*/
16051 +
16052 +
16053 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
16054 +
16055 +/* modifying  from ods rsquare = data */
16056 +
16057 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
16058 +    Length Cluster $16;
16059 +    length Variable $32;
16060 +    Length VariableLabel $64;
16061 +    set &indata; retain CurrentCluster;
16062 +    if NumberOfClusters ^= &ncluster then delete;
16063 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
16064 +    CurrentCluster = Cluster;
16065 +   run;
16066 +proc sort data =&outdata ;
16067 +     by Cluster RsquareRatio;
16068 +run;
16069 +data _tmprsq(drop=index);
16070 +     set &outdata; by Cluster;
16071 +     if first.Cluster then do;
16072 +     index = strip(scan(Cluster,2 ));
16073 +     Variable = "Clus"||index;
16074 +     VariableLabel = "Cluster Component "||index;
16075 +     OwnCluster = 1;
16076 +     NextClosest = .;
16077 +     RsquareRatio = 0;
16078 +     output;
16079 +     end;
16080 +run;
16081 +
16082 +proc sort data = _tmprsq ;
16083 +     by Cluster RsquareRatio;
16084 +run;
16085 +data &outdata;
16086 +     set &outdata _tmprsq;
16087 +by Cluster;
16088 +run;
16089 +
16090 +
16091 +/* Just create the Selected variable with all YES */
16092 +
16093 +data &outdata;
16094 +    set &outdata; by cluster;
16095 +    length Selected $8;
16096 +    Selected = 'YES';
16097 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16098 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16099 +    rename OwnCluster = RSqWithClusterComp;
16100 +    rename NextClosest = RSqWithNextClusComp;
16101 +run;
16102 +
16103 +
16104 +/* Selected = Y/N will be done %score section -----
16105 +
16106 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
16107 +data &outdata;
16108 +    set &outdata; by cluster;
16109 +    length Selected $8;
16110 +    if first.Cluster then Selected = 'YES';
16111 +    else Selected = 'NO';
16112 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16113 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16114 +    rename OwnCluster = RSqWithClusterComp;
16115 +    rename NextClosest = RSqWithNextClusComp;
16116 +run;
16117 +%end;
16118 +%else %do;
16119 +data &outdata;
16120 +    set &outdata; by cluster;
16121 +    if last.Cluster then Selected = 'YES';
16122 +    else Selected = 'NO';
16123 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16124 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16125 +    rename OwnCluster = RSqWithClusterComp;
16126 +    rename NextClosest = RSqWithNextClusComp;
16127 +run;
16128 +%end;
16129 +---------------------------------------------------------------*/
16130 +
16131 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
16132 +/* to calculate NextClosestClusRsq */
16133 +proc transpose data = &inClusRSquare  out=_clusRsq;
16134 +      by cluster;
16135 +      run;
16136 +data _clusRsq;
16137 +     set _clusRsq;
16138 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
16139 +run;
16140 +
16141 +proc sort data=_clusRsq;
16142 +    by cluster col1;
16143 +    run;
16144 +data _clusRsq(drop=_NAME_ _LABEL_);
16145 +     set _clusRsq; by cluster;
16146 +     if last.Cluster then output;
16147 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
16148 +     rename COL1 = RSqWithNextClusComp;
16149 +     rename Cluster = Variable;
16150 +     label  Cluster = "Variable";
16151 +run;
16152 +
16153 +proc sort data =&outdata;
16154 +     by Variable;
16155 +run;
16156 +data &outdata;
16157 +    merge &outdata _clusRsq;
16158 +    by Variable;
16159 +run;
16160 +proc sort data =&outdata;
16161 +by Cluster  RsquareRatio;
16162 +run;
16163 +quit;
16164 +%end;
16165 +
16166 +proc datasets lib = work nolist;
16167 +     delete _tmprsq _clusRsq;
16168 +     run;
16169 +quit;
16170 +
16171 +%mend MakeRSquareData;
16172 +
16173 +
16174 +/*-------------------------------------------------------------------------*/
16175 +
16176 +
16177 +
16178 +%macro ModifyCorr(indata=,
16179 +                  outdata=,
16180 +                  rsquare = Y
16181 +                  );
16182 +    data corr_tmp;
16183 +        set &indata;
16184 +    run;
16185 +     proc sql;
16186 +           update &indata
16187 +           set
16188 +     %let dsid = %sysfunc(open(work.corr_tmp));
16189 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16190 +          %do i = 4 %to &nvar;
16191 +          %let _name = %sysfunc(varname(&dsid, &i));
16192 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16193 +            %else  %let _name_md = &_name;
16194 +            %if &i < &nvar %then %do;
16195 +               &_name = 1- &_name_md ,
16196 +            %end;
16197 +            %else %do;
16198 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
16199 +            %end;
16200 +          %end;
16201 +      %let dsid= %sysfunc(close(&dsid));
16202 +
16203 +      select * from &indata;
16204 +      run;
16205 +      proc datasets lib = work nolist;
16206 +           delete corr_tmp;
16207 +      run;
16208 +      quit;
16209 +
16210 + %mend ModifyCorr;
16211 +
16212 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
16213 +    data &outdata(drop= _NCL_  _TYPE_);
16214 +       set &indata;
16215 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16216 +       rename _NAME_ = Cluster;
16217 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16218 +    run;
16219 +    %if &RSquare eq Y %then %do;
16220 +     data corr_tmp;
16221 +        set &outdata;
16222 +     run;
16223 +
16224 +     data &outdata(drop=i);
16225 +          set &outdata;
16226 +          %let dsid = %sysfunc(open(work.corr_tmp));
16227 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16228 +          %do i = 2 %to &nvar;
16229 +            %let _name = %sysfunc(varname(&dsid, &i));
16230 +            %let _name_md = &_name.**2;
16231 +                &_name = &_name_md;
16232 +          %end;
16233 +      %let dsid= %sysfunc(close(&dsid));
16234 +      run;
16235 +      proc datasets lib = work nolist;
16236 +           delete corr_tmp;
16237 +      run;
16238 +
16239 +    %end;
16240 +     quit;
16241 +%mend MakeClusStructCorrData;
16242 +
16243 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
16244 +    data &outdata(drop= _NCL_  _TYPE_);
16245 +       set &indata;
16246 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16247 +       rename _NAME_ = Cluster;
16248 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16249 +    run;
16250 +    data corr_tmp;
16251 +        set &outdata;
16252 +    run;
16253 +
16254 +    %let dsid = %sysfunc(open(work.corr_tmp));
16255 +    %let nclus2= %eval(&ncluster+1);
16256 +    data &outdata;
16257 +         set &outdata;
16258 +          %do i = 2 %to &nclus2;
16259 +          %let i_1 = %eval(&i-1);
16260 +            %let _name = %sysfunc(varname(&dsid, &i));
16261 +            %let _newName = Clus&i_1;
16262 +                rename &_name = &_newName; ;
16263 +                *label &_name ="Cluster &i_1";
16264 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16265 +          %end;
16266 +          keep Cluster
16267 +          %do i = 2 %to &nclus2;
16268 +                %let _name = %sysfunc(varname(&dsid, &i));
16269 +                &_name
16270 +          %end;
16271 +          ;
16272 +    %let dsid= %sysfunc(close(&dsid));
16273 +     run;
16274 +     quit;
16275 +
16276 +    %if &RSquare eq Y %then %do;
16277 +
16278 +       data corr_tmp;
16279 +        set &outdata;
16280 +     run;
16281 +
16282 +     data &outdata(drop=i);
16283 +          set &outdata;
16284 +          %let dsid = %sysfunc(open(work.corr_tmp));
16285 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16286 +          %do i = 2 %to &nvar;
16287 +            %let _name = %sysfunc(varname(&dsid, &i));
16288 +            %let _name_md = &_name.**2;
16289 +                &_name = &_name_md;
16290 +          %end;
16291 +      %let dsid= %sysfunc(close(&dsid));
16292 +      run;
16293 +    %end;
16294 +
16295 +    %if &makeplotds eq Y %then %do;
16296 +     proc transpose data = &outdata
16297 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16298 +          by cluster;
16299 +     run;
16300 +     data &plotds;
16301 +          set  &plotds;
16302 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16303 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16304 +     run;
16305 +     %end;
16306 +     proc datasets lib = work nolist;
16307 +           delete corr_tmp;
16308 +     run;
16309 +     quit;
16310 +%mend MakeInterClusCorrData;
16311 +
16312 +
16313 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16314 +
16315 +data &outlink(drop = Selected);
16316 +     set &indata;
16317 +     LINKID = _N_;
16318 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16319 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16320 +run;
16321 +data &outnode(keep=NODEID TYPE LABEL);
16322 +    set &indata;
16323 +    length TYPE $16;
16324 +    rename Variable = NODEID;
16325 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16326 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16327 +    then  TYPE = "CLUSTER";
16328 +    else  TYPE="VARIABLE";
16329 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16330 +run;
16331 +quit;
16332 +%mend MakeClusConstellData;
16333 +
16334 +
16335 +
16336 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16337 +
16338 +data &outlink(drop = Selected);
16339 +     set &indata;
16340 +     LINKID = _N_;
16341 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16342 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16343 +run;
16344 +data &outnode(keep=NODEID TYPE LABEL);
16345 +    set &indata;
16346 +    length TYPE $16;
16347 +    rename Variable = NODEID;
16348 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16349 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16350 +    then  TYPE = "CLUSTER";
16351 +    else  TYPE="VARIABLE";
16352 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16353 +run;
16354 +quit;
16355 +%mend MakeClusConstellData;
16356 +
16357 +
16358 +/*--- This will work only when inds is not a view data -------
16359 +
16360 +%macro getNVarNObs(inds=, nvar=, nobs=);
16361 +
16362 +    %global &nvar;
16363 +    %global &nobs;
16364 +    data _null_;
16365 +         dsid = open("&inds");
16366 +         nv = attrn(dsid, 'NVAR');
16367 +         no = attrn(dsid, 'NOBS');
16368 +         dsid = close(dsid);
16369 +         call symput("&nvar", nv);
16370 +         call symput("&nobs", no);
16371 +    run;
16372 +    quit;
16373 +%mend  getNVarNObs;
16374 +
16375 ++---------------------------------------------------------------*/
16376 +
16377 +
16378 +%macro getNVar(inds=, nvar=);
16379 +    %global &nvar;
16380 +    data _null_;
16381 +         dsid = open("&inds");
16382 +         nv = attrn(dsid, 'NVAR');
16383 +         dsid = close(dsid);
16384 +         call symput("&nvar", nv);
16385 +    run;
16386 +    quit;
16387 +%mend  getNVar;
16388 +
16389 +
16390 +
16391 +%macro getNObs(inds=, nobs=);
16392 +    %global &nobs;
16393 +    data _null_;
16394 +        set &inds end=eof;
16395 +        if eof then call symput("&nobs", _N_);
16396 +    run;
16397 +    quit;
16398 +%mend  getNObs;
16399 +
16400 +%Macro CreateVarclusMeta(trainnum=);
16401 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
16402 +    data &EM_USER_VARCLUSMETA;
16403 +         length TrainNum 8.;
16404 +         length NewTrain $8;
16405 +         length NGCluster 8.;
16406 +         length ExportedComp $16;
16407 +         length HideVariable $8;
16408 +         TrainNum = &trainnum;
16409 +         NewTrain = "Y";
16410 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
16411 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
16412 +         NGCluster = 0; /* zero means no twostage */
16413 +   run;
16414 +   quit;
16415 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
16416 +
16417 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
16418 +    data &outdata(drop= _NCL_  _TYPE_);
16419 +       set &indata;
16420 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16421 +       %if &globalclusid ne %then %do;
16422 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16423 +       rename _NAME_ = Cluster;
16424 +       %end;
16425 +       %else %do;
16426 +        _NAME_ = upcase(_NAME_);
16427 +       rename _NAME_ = Cluster;
16428 +       %end;
16429 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16430 +    run;
16431 +    data corr_tmp;
16432 +        set &outdata;
16433 +    run;
16434 +
16435 +    %let dsid = %sysfunc(open(work.corr_tmp));
16436 +    %let nclus2= %eval(&ncluster+1);
16437 +    data &outdata;
16438 +         set &outdata;
16439 +          %do i = 2 %to &nclus2;
16440 +          %let i_1 = %eval(&i-1);
16441 +            %let _name = %sysfunc(varname(&dsid, &i));
16442 +            %if &globalclusid ne %then
16443 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
16444 +                     rename &_name = &_newName;
16445 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
16446 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
16447 +                %end;
16448 +            %else
16449 +                %do; %let _newName = CLUS&i_1;
16450 +                     rename &_name = &_newName;
16451 +                     *label &_name ="Cluster &i_1";
16452 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16453 +                %end;
16454 +          %end;
16455 +          keep Cluster
16456 +          %do i = 2 %to &nclus2;
16457 +                %let _name = %sysfunc(varname(&dsid, &i));
16458 +                &_name
16459 +          %end;
16460 +          ;
16461 +    %let dsid= %sysfunc(close(&dsid));
16462 +     run;
16463 +     quit;
16464 +
16465 +    %if &RSquare eq Y %then %do;
16466 +
16467 +       data corr_tmp;
16468 +        set &outdata;
16469 +     run;
16470 +
16471 +     data &outdata;
16472 +          set &outdata;
16473 +          %let dsid = %sysfunc(open(work.corr_tmp));
16474 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16475 +          %do i = 2 %to &nvar;
16476 +            %let _name = %sysfunc(varname(&dsid, &i));
16477 +            %let _name_md = &_name.**2;
16478 +                &_name = &_name_md;
16479 +          %end;
16480 +      %let dsid= %sysfunc(close(&dsid));
16481 +      run;
16482 +    %end;
16483 +
16484 +    %if &makeplotds eq Y %then %do;
16485 +     proc transpose data = &outdata
16486 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16487 +          by cluster;
16488 +     run;
16489 +     data &plotds;
16490 +          set  &plotds;
16491 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16492 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16493 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16494 +     run;
16495 +     %end;
16496 +     proc datasets lib = work nolist;
16497 +           delete corr_tmp;
16498 +     run;
16499 +     quit;
16500 +%mend MakeInterClusCorrData;
16501 +
16502 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
16503 +    data _tmpds(drop= _NCL_);
16504 +       set &indata;
16505 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
16506 +       %if &globalclusid ne %then %do;
16507 +           _NAME_ = "GC&globalclusid.";
16508 +       rename _NAME_ = Cluster;
16509 +       %end;
16510 +       %else %do;
16511 +        _NAME_ = "CLUS";
16512 +        rename _NAME_ = Cluster;
16513 +       %end;
16514 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16515 +    run;
16516 +    proc transpose data =_tmpds out =&outdata;
16517 +    run;
16518 +
16519 +    data &outdata(drop=COL1);
16520 +        %if &globalclusid ne %then %do;
16521 +        length GCluster $16;
16522 +        %end;
16523 +        length Cluster $32;
16524 +        length _NAME_ $32;
16525 +         set &outdata;
16526 +         _NAME_ = upcase(_NAME_);
16527 +         rename _NAME_=Variable;
16528 +         *label _NAME_="Variable";
16529 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16530 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16531 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16532 +
16533 +         %if &globalclusid ne %then %do;
16534 +          GCluster = "GC&globalclusid";
16535 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16536 +         %end;
16537 +         %else %do;
16538 +         Cluster = "CLUS"||strip(COL1);
16539 +        %end;
16540 +         rename COL2 = RSqWithOwnClusComp;
16541 +         *label COL2 = "R-Square With Own Cluster Component";
16542 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16543 +
16544 +   run;
16545 +   proc sort data =&outdata;
16546 +        by Cluster RSqWithOwnClusComp;
16547 +   run;
16548 +   proc datasets lib = work nolist;
16549 +           delete _tmpds;
16550 +   run;
16551 +   quit;
16552 +%mend MakeOwnRSquare;
16553 +
16554 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16555 +    data &outdata(drop= _NCL_  _TYPE_);
16556 +       %if &globalclusid ne %then %do;
16557 +        length GCluster $16;
16558 +        %end;
16559 +       set &indata;
16560 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16561 +       %if &globalclusid ne %then %do;
16562 +         GCluster = "GC&globalclusid";
16563 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16564 +         rename _NAME_ = Cluster;
16565 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16566 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16567 +
16568 +       %end;
16569 +       %else %do;
16570 +         _NAME_ = upcase(_NAME_);
16571 +         rename _NAME_ = Cluster;
16572 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16573 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16574 +
16575 +       %end;
16576 +     run;
16577 +    %if &RSquare eq Y %then %do;
16578 +     data corr_tmp;
16579 +          set &outdata;
16580 +     run;
16581 +     %let istart = 2;
16582 +     %if &globalclusid ne %then %let istart = 3;
16583 +     data &outdata;
16584 +          set &outdata;
16585 +          %let dsid = %sysfunc(open(work.corr_tmp));
16586 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16587 +          %do i =&istart %to &nvar;
16588 +            %let _name = %sysfunc(varname(&dsid, &i));
16589 +            %let _name_md = &_name.**2;
16590 +                &_name = &_name_md;
16591 +          %end;
16592 +      %let dsid= %sysfunc(close(&dsid));
16593 +      run;
16594 +      proc datasets lib = work nolist;
16595 +           delete corr_tmp;
16596 +      run;
16597 +    %end;
16598 +     quit;
16599 +%mend MakeClusStructCorrData;
16600 +
16601 +/*
16602 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16603 +*/
16604 +
16605 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16606 +
16607 +     /* The indata should be the outdata
16608 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16609 +
16610 +     proc sort data =&indata out=_tmpclusRsq;
16611 +     by cluster;
16612 +     run;
16613 +
16614 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16615 +      by cluster;
16616 +     run;
16617 +
16618 +     proc sort data=_tmpclusRsq;
16619 +        by _NAME_ COL1;
16620 +     run;
16621 +
16622 +     data _tmpclusRsq;
16623 +         length _NAME_ $32;
16624 +         set _tmpclusRsq; by _NAME_;
16625 +          _NAME_ = upcase(_NAME_);
16626 +          %if &ncluster ne 1 %then %do;
16627 +             if last._NAME_ then delete;
16628 +          %end;
16629 +          %else %do;
16630 +             COL1 = 0;
16631 +          %end;
16632 +     run;
16633 +     /* need to sort again */
16634 +     proc sort data=_tmpclusRsq;
16635 +        by _NAME_ COL1;
16636 +     run;
16637 +
16638 +     data &outdata;
16639 +         set _tmpclusRsq; by _NAME_;
16640 +         Cluster = upcase(Cluster);
16641 +         if last._NAME_ then output;
16642 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16643 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16644 +         rename COL1 = RSqWithNextClusComp;
16645 +         Cluster = upcase(Cluster);
16646 +         rename Cluster = ClosestCluster;
16647 +         *label  Cluster = "Next Closest Cluster";
16648 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16649 +         rename _NAME_ = Variable;
16650 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16651 +    run;
16652 +
16653 +
16654 +    %if &globalclusid ne %then %do;
16655 +    data &outdata;
16656 +       length GCluster $16;
16657 +       set &outdata;
16658 +       GCluster = "GC&globalclusid";
16659 +       run;
16660 +    %end;
16661 +    proc datasets lib = work nolist;
16662 +           delete _tmpclusRsq;
16663 +    run;
16664 +    quit;
16665 +%mend FindNextClosestClusByVar;
16666 +
16667 +
16668 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16669 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16670 +     proc sort data =&indata out=_tmpclusRsq;
16671 +     by cluster;
16672 +     run;
16673 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16674 +     by cluster;
16675 +     run;
16676 +     proc sort data=_tmpclusRsq;
16677 +        by _NAME_ col1;
16678 +     run;
16679 +     data _tmpclusRsq;
16680 +         length _NAME_ $32;
16681 +         set _tmpclusRsq; by _NAME_;
16682 +          _NAME_ = upcase(_NAME_);
16683 +          %if &ncluster ne 1 %then %do;
16684 +             if last._NAME_ then delete;
16685 +          %end;
16686 +          %else %do;
16687 +             COL1 = 0;
16688 +          %end;
16689 +     run;
16690 +     data &outdata;
16691 +         set _tmpclusRsq; by _NAME_;
16692 +         Cluster = upcase(Cluster);
16693 +         if last._NAME_ then output;
16694 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16695 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16696 +         rename COL1 = RSqWithNextClusComp;
16697 +         Cluster = upcase(Cluster);
16698 +         rename Cluster = ClosestCluster;
16699 +         *label  Cluster = "Next Closest Cluster";
16700 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16701 +         rename _NAME_ = Variable;
16702 +         *label  _NAME_ = "Variable";
16703 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16704 +
16705 +    run;
16706 +    %if &globalclusid ne %then %do;
16707 +    data &outdata;
16708 +       length GCluster $16;
16709 +       set &outdata;
16710 +       GCluster = "GC&globalclusid";
16711 +       run;
16712 +    %end;
16713 +
16714 +    proc datasets lib = work nolist;
16715 +           delete _tmpclusRsq;
16716 +    run;
16717 +
16718 +    quit;
16719 +%mend FindNextClosestClusByCluster;
16720 +
16721 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16722 +/*----
16723 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16724 +-----------*/
16725 +
16726 +proc sort data =&indata1;
16727 +    by Variable;
16728 +run;
16729 +proc sort data =&indata2;
16730 +    by Variable;
16731 +run;
16732 +data &outdata;
16733 +    merge &indata1 &indata2;
16734 +    by Variable;
16735 +    length Type $16;
16736 +    Type = 'Variable';
16737 +    *label Type ='Type';
16738 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16739 +run;
16740 +
16741 +
16742 +data &indata3;
16743 +    set  &indata3 ;
16744 +    length RSqWithOwnClusComp 8.;
16745 +    Cluster = Variable;
16746 +    RSqWithOwnClusComp = 1;
16747 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16748 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16749 +    length Type $16;
16750 +    Type = 'ClusterComp';
16751 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16752 +
16753 +;
16754 +run;
16755 +
16756 +proc sort data=&outdata;
16757 +    by Cluster;
16758 +run;
16759 +proc sort data =&indata3;
16760 +    by Cluster;
16761 +run;
16762 +
16763 +data &outdata;
16764 +     set &outdata &indata3;
16765 +     by Cluster;
16766 +run;
16767 +
16768 +
16769 +/* Create the Selected variable with all YES */
16770 +
16771 +data &outdata;
16772 +     set &outdata;
16773 +     length RsqRatio 8.;
16774 +     length Selected $8;
16775 +     *label RSqRatio = "1-R**2 Ratio";
16776 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16777 +     *label Selected = "Variable Selected";
16778 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16779 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16780 +     Selected ='YES';
16781 +     rename _LABEL_ = Label;
16782 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16783 +run;
16784 +
16785 +
16786 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16787 +        Just create the Selected variable with all YES at the step above
16788 + +------------------------------------------------------------------------------+
16789 +
16790 +proc sort data=&outdata;
16791 +    by Cluster RsqRatio;
16792 +run;
16793 +
16794 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16795 +data &outdata;
16796 +     set &outdata; by Cluster;
16797 +     length Selected $8;
16798 +     label Selected = "Variable Selected";
16799 +     if  first.Cluster then Selected ='Yes';
16800 +     else Selected = 'No';
16801 +    run;
16802 +%end;
16803 +%else %do;
16804 +data &outdata(drop = _var _varchange);
16805 +     set &outdata; retain _var 0; by Cluster;
16806 +     length Selected $8;
16807 +     label Selected = "Variable Selected";
16808 +     if first.Cluster then  _varchange = 0;
16809 +     else _varchange =1;
16810 +     if _var ne _varchange then  Selected  = 'Yes';
16811 +     else Selected = 'No';
16812 +     if last.cluster then  _var = 0;
16813 +     else _var = _varchange;
16814 +run;
16815 +%end;
16816 +
16817 +--------------------------------------------------------------*/
16818 +
16819 +quit;
16820 +%mend MakeVarClusResultTable;
16821 +
16822 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16823 +     proc sort data =&indata;
16824 +        by cluster;
16825 +     run;
16826 +     proc transpose data =&indata
16827 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16828 +          by cluster;
16829 +     run;
16830 +     data &outdata;
16831 +          set  &outdata;
16832 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16833 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16834 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16835 +     run;
16836 +     %if &globalclusid ne %then %do;
16837 +     data &outdata;
16838 +          Length GCluster $16;
16839 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16840 +          set  &outdata;
16841 +          GCluster ="GC&globalclusid.";
16842 +          run;
16843 +     %end;
16844 +
16845 +%Mend MakePlotDataFromCorrTable;
16846 +
16847 +
16848 +%macro MakeCorrelation(indata=,
16849 +                       outstat=_tmpoutstat,
16850 +                       corrmatrix=N,
16851 +                       outcorr=_tmpoutcorr,
16852 +                       includeclassvar=N,
16853 +                       target=,
16854 +                       freq=,
16855 +                       weight=);
16856 +   %if &target eq  %then %do;
16857 +
16858 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16859 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16860 +       %if &includeclassvar eq Y %then %do;
16861 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16862 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16863 +          %do i = 2 %to &nvar;
16864 +          %let varname = %sysfunc(varname(&dsid, &i));
16865 +          &varname
16866 +          %end;
16867 +       %end;
16868 +       ;
16869 +      %if &freq ne  %then %do;
16870 +          freq &freq;
16871 +      %end;
16872 +      %if &weight ne  %then %do;
16873 +          weight &weight;
16874 +      %end;
16875 +
16876 +      run;
16877 +      %if &corrmatrix eq Y %then %do;
16878 +      data  &outcorr (drop = _NCL_ _TYPE_);
16879 +           set  &outstat ;
16880 +           if _TYPE_ ='CORR' then output;
16881 +      run;
16882 +      %end;
16883 +    %end;
16884 +    %else %do;
16885 +       proc corr data=&indata outp=&outstat noprint;
16886 +            var
16887 +       %let dsid = %sysfunc(open(&indata));
16888 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16889 +          %do i = 1 %to &nvar;
16890 +              %let _name = %sysfunc(varname(&dsid, &i));
16891 +              %if &_name ne &target %then;
16892 +              &_name
16893 +           %end;
16894 +        %let dsid= %sysfunc(close(&dsid));
16895 +        ;
16896 +        with &target;
16897 +        run;
16898 +    %end;
16899 +    quit;
16900 +%mend MakeCorrelation;
16901 +
16902 +
16903 +%macro MakeCorrelationDistance(indata=,
16904 +                               outdata=,
16905 +                               rsquare = N
16906 +                               );
16907 +    data corr_tmp;
16908 +        set &indata;
16909 +        if _N_ = 1 then do;
16910 +           output;
16911 +           stop;
16912 +         end;
16913 +    run;
16914 +    %if &outdata ne  %then %let  _outdata = &outdata;
16915 +    %else %let _outdata = &indata;
16916 +
16917 +    data &_outdata;
16918 +         set &indata;
16919 +
16920 +         %let dsid = %sysfunc(open(work.corr_tmp));
16921 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16922 +          %do i = 2 %to &nvar;
16923 +              %let _name = %sysfunc(varname(&dsid, &i));
16924 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16925 +              %else  %let _name_md = &_name;
16926 +              &_name = 1- &_name_md;
16927 +          %end;
16928 +      %let dsid= %sysfunc(close(&dsid));
16929 +      run;
16930 +      proc datasets lib = work nolist;
16931 +           delete corr_tmp;
16932 +      run;
16933 +      quit;
16934 +  %mend MakeCorrelationDistance;
16935 +
16936 +
16937 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16938 +                                   rsquare = N
16939 +                                   );
16940 +    data corr_tmp;
16941 +        set &indata;
16942 +    run;
16943 +    proc sql noprint;
16944 +           update &indata
16945 +           set
16946 +     %let dsid = %sysfunc(open(work.corr_tmp));
16947 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16948 +          %do i = 4 %to &nvar;
16949 +          %let _name = %sysfunc(varname(&dsid, &i));
16950 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16951 +            %else  %let _name_md = &_name;
16952 +            %if &i < &nvar %then %do;
16953 +               &_name = 1- &_name_md ,
16954 +            %end;
16955 +            %else %do;
16956 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16957 +            %end;
16958 +          %end;
16959 +      %let dsid= %sysfunc(close(&dsid));
16960 +
16961 +      select * from &indata;
16962 +      run;
16963 +     data &indata( drop = _NCL_);
16964 +           set &indata;
16965 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16966 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16967 +     run;
16968 +     data &indata(DROP = _NCL_);
16969 +           set &indata;
16970 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16971 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16972 +           rename _NAME_ = _VAR_;
16973 +     run;
16974 +     proc datasets lib = work nolist;
16975 +           delete corr_tmp;
16976 +     run;
16977 +     quit;
16978 + %mend UpdateOutStatCorrToDistance;
16979 +
16980 +
16981 +%macro HierClusWithCorr(indata= ,
16982 +                        ncluster=,
16983 +                        method = Ward,
16984 +                        outtree = _outtree,
16985 +                        idvar =_VAR_,
16986 +                        outdata=,
16987 +                        rescore = N,
16988 +                        newncluster=
16989 +                        );
16990 +      %global &newncluster;
16991 +      %if &rescore ne Y %then %do;
16992 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16993 +                   method=&method outtree=&outtree noprint;
16994 +           id &idvar;
16995 +      run;
16996 +      %end;
16997 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16998 +      run;
16999 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
17000 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
17001 +      run;
17002 +      data _outcontent;
17003 +          set _outcontent;
17004 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
17005 +          index = 1;
17006 +          rename NAME = _NAME_;
17007 +      run;
17008 +      proc sort data=_outcontent;
17009 +          by _NAME_;
17010 +      run;
17011 +      proc sort data =&outdata;
17012 +           by _NAME_;
17013 +      run;
17014 +      data &outdata(drop=index);
17015 +          merge &outdata _outcontent;
17016 +          by _NAME_;
17017 +          if index = . then delete;
17018 +      run;
17019 +      /*-----------------------------------------------------------*/
17020 +      data &outdata;
17021 +           length CLUSNAME $16;
17022 +           set &outdata;
17023 +           if CLUSTER > &ncluster then delete;
17024 +           CLUSNAME='GC'||strip(CLUSTER);
17025 +           *label CLUSNAME = "Cluster Name";
17026 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
17027 +           rename _NAME_ = VARIABLE ;
17028 +           *label _NAME_ = "Variable";
17029 +           *label CLUSTER = "Cluster";
17030 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17031 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17032 +      run;
17033 +      proc sort data=&outdata out=&outdata;
17034 +           by CLUSTER;
17035 +      run;
17036 +      proc means data =&outdata noprint;
17037 +           output out=_meanout;
17038 +      run;
17039 +      data _null_;
17040 +            set _meanout;
17041 +            if strip(_STAT_) eq 'MAX' then do;
17042 +            call symput("&newncluster", CLUSTER);
17043 +            stop;
17044 +            end;
17045 +      run;
17046 +
17047 +      proc datasets lib = work nolist;
17048 +           delete _outcontent _meanout;
17049 +      run;
17050 +      quit;
17051 +%mend  HierClusWithCorr;
17052 +
17053 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
17054 +
17055 +     data _tmpindata;
17056 +          set &indata;
17057 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
17058 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17059 +          if _TYPE_ = 'STD' then _NAME_='STD';
17060 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
17061 +          DROP _TYPE_ _NCL_;
17062 +     run;
17063 +
17064 +     filename _file_  "&fileRef";
17065 +
17066 +     data _null_;
17067 +        FILE _file_ MOD;
17068 +        put ' ';
17069 +        put "/*-------------------------------------------------*/";
17070 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
17071 +        put "/*-------------------------------------------------*/";
17072 +        put ' ';
17073 +        %let dsid = %sysfunc(open(work._tmpindata));
17074 +
17075 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17076 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17077 +        %let k = 1;
17078 +        %do %while(^%sysfunc(fetch(&dsid)));
17079 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17080 +               %if &k > 2 %then %do;
17081 +                %let cn = %eval(&k-2);
17082 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
17083 +                %end;
17084 +                %let k = %eval(&k+1);
17085 +
17086 +        %end;
17087 +        %let rc = %sysfunc(rewind(&dsid));
17088 +
17089 +        %do j= 2 %to &nvar;
17090 +            %let _varname = %sysfunc(varname(&dsid, &j));
17091 +            %do %while(^%sysfunc(fetch(&dsid)));
17092 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17093 +                %if &_name = MEAN %then
17094 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
17095 +                %else %if &_name = STD %then
17096 +                %let _std = %sysfunc(getvarn(&dsid, &j));
17097 +                %else %do;
17098 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
17099 +                      %let abscoeff = %sysfunc(abs(&coeff));
17100 +                          %if &abscoeff >  0 %then %do;
17101 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17102 +                           %end;
17103 +                 %end;
17104 +             %end;
17105 +             %let rc = %sysfunc(rewind(&dsid));
17106 +         %end;
17107 +
17108 +        %let dsid= %sysfunc(close(&dsid));
17109 +
17110 +     run;
17111 +
17112 +     filename _file_;
17113 +     proc datasets lib = work nolist;
17114 +           delete _tmpindata;
17115 +     run;
17116 +     quit;
17117 +%mend CreateScoreCode2;
17118 +
17119 +
17120 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
17121 +
17122 +     /*--- Build Code to Modify Metadata ---*/
17123 +     filename X "&deltacodefile";
17124 +     data _null_;
17125 +        FILE X;
17126 +        set &groupds end=eof;
17127 +        if _N_=1 then do;
17128 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17129 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17130 +           %end;
17131 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17132 +           put "if upcase(strip(NAME)) in (";
17133 +        end;
17134 +        if Strip(upcase(Selected)) eq 'YES' then do;
17135 +           string = '"'!!trim(left(VARIABLE))!!'"';
17136 +           put string;
17137 +        end;
17138 +        if eof then do;
17139 +           put ') then ROLE="INPUT";';
17140 +           put 'else ROLE="REJECTED";';
17141 +           put 'end;';
17142 +
17143 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17144 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17145 +           %end;
17146 +        end;
17147 +     run;
17148 +     quit;
17149 +
17150 +     filename X;
17151 +     quit;
17152 +%mend MakeDeltaCode2;
17153 +
17154 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
17155 +  %global &ngc;
17156 +  data _null_;
17157 +  %if &indata ne %then %do;
17158 +      %let dsid = %sysfunc(open(&indata));
17159 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
17160 +      %let dsid = %sysfunc(close(&dsid));
17161 +  %end;
17162 +  %else %do;
17163 +       %let nvar = %eval(&ninput+&ndummy); ;
17164 +  %end;
17165 +  %let numgc = %eval(&nvar/&div+2);
17166 +  %let &ngc = &numgc;
17167 +   run;
17168 +  quit;
17169 +%mend getInitialGClusterNumber;
17170 +
17171 +
17172 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
17173 +data &outlink(drop = Selected);
17174 +     set &indata;
17175 +     LINKID = _N_;
17176 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
17177 +run;
17178 +data &outnode(keep=NODEID TYPE LABEL);
17179 +    set &indata;
17180 +    length TYPE $16;
17181 +    rename VARIABLE = NODEID;
17182 +    *label  CLUSNAME="Node ID";
17183 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17184 +    TYPE = "VARIABLE";
17185 +    *label TYPE = "Node Type";
17186 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17187 +    run;
17188 +data _tmp(keep=NODEID TYPE LABEL);
17189 +    set &indata;
17190 +    length TYPE $16;
17191 +    rename CLUSNAME = NODEID;
17192 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17193 +    TYPE = "GCLUSTER";
17194 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17195 +    run;
17196 +proc sort data=_tmp;
17197 +    by NODEID;
17198 +run;
17199 +data _tmp;
17200 +    set _tmp; by NODEID;
17201 +    if first.NODEID then output;
17202 +run;
17203 +proc sort data=&outnode;
17204 +    by NODEID;
17205 +run;
17206 +data  &outnode;
17207 +    set _tmp &outnode;
17208 +run;
17209 +proc datasets lib = work nolist;
17210 +     delete _tmp;
17211 +run;
17212 +quit;
17213 +%mend MakeGobalConstellData;
17214 +
17215 +/* Make contellation plot data among GCLUSTERS */
17216 +
17217 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
17218 +
17219 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
17220 +     set &indata;
17221 +     LINKID = _N_;
17222 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
17223 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
17224 +     end;
17225 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
17226 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
17227 +     end;
17228 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
17229 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
17230 +    end;
17231 +run;
17232 +
17233 +data _tmp_outrsquare;
17234 +        set &inoutrsq;
17235 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
17236 +run;
17237 +
17238 +proc freq data =_tmp_outrsquare noprint;
17239 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
17240 +run;
17241 +
17242 +data &outnode(keep=_NAME_ TYPE LABEL);
17243 +    set &outlink;
17244 +    length TYPE $16;
17245 +    length LABEL $100;
17246 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
17247 +
17248 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17249 +    TYPE = "GCLUSTER";
17250 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17251 +    end;
17252 +    else do;
17253 +    TYPE= "ROOT";
17254 +    LABEL= _NAME_;
17255 +    end;
17256 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17257 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17258 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17259 +    run;
17260 +
17261 +proc sort data=&outnode;
17262 +     by _NAME_;
17263 +proc sort data=_tmp_GCLUSFREQ;
17264 +     by _NAME_;
17265 +run;
17266 +
17267 +data  &outnode;
17268 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
17269 +     if COUNT=. then COUNT=1;
17270 +run;
17271 +
17272 +proc datasets lib = work nolist;
17273 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
17274 +run;
17275 +
17276 +quit;
17277 +%Mend MakeGClusterConstData;
17278 +
17279 +
17280 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
17281 +
17282 +    data _gscoretmpds;
17283 +          set &indata;
17284 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
17285 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17286 +          if _TYPE_ = 'STD' then _NAME_='STD';
17287 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
17288 +          DROP _TYPE_ _NCL_;
17289 +     run;
17290 +
17291 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17292 +        GCluster Component &globalclusid ------ */
17293 +
17294 +    filename _file_  "&fileref";
17295 +
17296 +    data _null_;
17297 +        %if &globalclusid eq 1 %then %do;
17298 +          FILE _file_;
17299 +        %end;
17300 +        %else %do;
17301 +          FILE _file_ MOD;
17302 +        %end;
17303 +
17304 +        %let dsid = %sysfunc(open(work._gscoretmpds));
17305 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17306 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17307 +
17308 +        %let k = 1;
17309 +        %do %while(^%sysfunc(fetch(&dsid)));
17310 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17311 +                %if &k > 2 %then %do;
17312 +                put "&_name = 0 ; ";
17313 +                %end;
17314 +                %let k = %eval(&k+1);
17315 +        %end;
17316 +
17317 +        %let rc = %sysfunc(rewind(&dsid));
17318 +        %do i= 2 %to &nvar;
17319 +            %let _varname =  %sysfunc(varname(&dsid, &i));
17320 +            %do %while(^%sysfunc(fetch(&dsid)));
17321 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17322 +                %if &_name = MEAN %then
17323 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
17324 +                %else %if &_name = STD %then
17325 +                %let _std = %sysfunc(getvarn(&dsid, &i));
17326 +                %else %do;
17327 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
17328 +                      %let abscoeff = %sysfunc(abs(&coeff));
17329 +                          %if &abscoeff >  0 %then %do;
17330 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17331 +                           %end;
17332 +                 %end;
17333 +             %end;
17334 +             %let rc = %sysfunc(rewind(&dsid));
17335 +
17336 +         %end;
17337 +
17338 +        %let dsid= %sysfunc(close(&dsid));
17339 +       run;
17340 +
17341 +
17342 +       proc datasets lib=work nolist;
17343 +            delete _gscoretmpds;
17344 +       run;
17345 +      quit;
17346 +
17347 +%mend CreateGClusterScoreCode;
17348 +
17349 +
17350 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
17351 +
17352 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
17353 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
17354 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
17355 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
17356 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
17357 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
17358 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
17359 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
17360 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
17361 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
17362 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
17363 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
17364 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
17365 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
17366 +
17367 +   filename gsfile "&gscorecode";
17368 +
17369 +   data &EM_USER_GSCORE;
17370 +             set &indata;
17371 +             %include  gsfile;
17372 +        keep
17373 +        %do i=1 %to &ngcluster;
17374 +         %let gcvarname = GC&i;
17375 +         &gcvarname
17376 +        %end;
17377 +     ;
17378 +   run;
17379 +
17380 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
17381 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17382 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17383 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17384 +    noprint  ;
17385 +     var
17386 +       %do i=1 %to &ngcluster;
17387 +         %let gcvarname = GC&i;
17388 +         &gcvarname
17389 +        %end;
17390 +   ;
17391 +   run;
17392 +
17393 +
17394 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
17395 +   data &EM_USER_GSCORECORRPLOT ;
17396 +        set &EM_USER_GSCORECORRPLOT;
17397 +        rename _X_ = X;
17398 +        rename _Y_ = Y;
17399 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17400 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17401 +   run;
17402 +
17403 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
17404 +
17405 +   data &EM_USER_GSCORETREE;
17406 +        length _NAME_ $32;
17407 +        length _LABEL_ $100;
17408 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
17409 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17410 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17411 +        end;else do;
17412 +         _LABEL_ = _NAME_;
17413 +        end;
17414 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
17415 +
17416 +   run;
17417 +
17418 +   quit;
17419 +
17420 +%mend MakeGClusterCorrelation;
17421 +
17422 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
17425 +%macro train;
17427 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
17428 +   %include temp;
17429 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
17430 +   %include temp;
17431 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
17432 +   %include temp;
17433 +   filename temp;
17435 +   %let VARCLUS_MAXNUMOBS = 100000;
17436 +   %let VARCLUS_MAXNUMVAR = 200;
17437 +   %let trainnum = 0;
17438 +   %let error = 0;
17440 +   %if &EM_IMPORT_DATA eq %then %do;
17441 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17442 +       %let  error = 1;
17443 +       %goto endtrain;
17444 +   %end;
17446 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
17447 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17448 +        %let  error = 1;
17449 +        %goto endline;
17450 +    %end;
17452 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17453 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
17454 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
17455 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
17456 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
17457 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
17459 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
17460 +        %if  &_num_input_total < 2 %then %do;
17461 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17462 +            %let error = 2;
17463 +            %goto endtrain;
17464 +        %end;
17465 +   %end;
17466 +   %else %do;
17467 +         %if  &_num_input_interval < 2 %then %do;
17468 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17469 +         %let error = 2;
17470 +         %goto endtrain;
17471 +         %end;
17472 +   %end;
17474 +   %em_checkerror();
17476 +   %if &EMEXCEPTIONSTRING ne %then %do;
17477 +       %goto endtrain;
17478 +   %end;
17480 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
17482 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17483 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17484 +                             outvar=&EM_USER_OUTDUMMY,
17485 +                             outdata=_newtrainds,
17486 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17488 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17489 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
17490 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17491 +                proc datasets lib=work nolist;
17492 +                delete  _newtrainds;
17493 +                run;
17494 +                quit;
17495 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17496 +                %let error = 3;
17497 +               %goto endtrain;
17498 +            %end;
17499 +        %end;
17501 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17502 +             %getNVar(inds=_newtrainds, nvar=_nvar);
17504 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
17505 +                %let trainnum = 2;
17506 +            %end;
17507 +            %else %do;
17508 +                %let trainnum = 1;
17509 +            %end;
17510 +        %end;
17511 +    %end;
17512 +    %else %do;
17514 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17516 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
17518 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17520 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17521 +                  %let error = 3;
17522 +                 %goto endtrain;
17523 +            %end;
17524 +        %end;
17527 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17528 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17529 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17530 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17531 +                %let trainnum = 2;
17532 +            %end;
17533 +            %else %do;
17534 +                %let trainnum = 1;
17535 +            %end;
17536 +        %end;
17538 +   %end;
17540 +    %em_checkerror();
17542 +    %if &EMEXCEPTIONSTRING ne %then %do;
17543 +       %let error = 4;
17544 +       %goto endtrain;
17545 +    %end;
17547 +    %CreateVarclusMeta(trainnum=&trainnum);
17549 +    %if &error > 0 %then  %goto endtrain;
17551 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17553 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17554 +           %train1;
17555 +       %end;
17556 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17557 +           %train2;
17558 +       %end;
17560 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17561 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17562 +      data _null_;
17563 +         length line $20000;
17564 +         file _out lrecl=20000;
17565 +         fid=fopen("_in",'i',20000,'v');
17566 +         if fid > 0  then do;
17567 +            do while(^fread(fid));
17568 +               rlen = frlen(fid);
17569 +               rc= fget(fid,line,20000);
17570 +               start = length(line)-length(left(line))+1;
17571 +               line=strip(line);
17572 +               if line ne 'delete;' then do;
17573 +                  put @start line;
17574 +               end;
17575 +            end;
17576 +            if fid > 0  then rc=fclose(fid);
17577 +         end;
17578 +      run;
17579 +      filename _in;
17580 +      filename _out;
17582 +   %endtrain:
17585 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17587 +%macro VarClus(indata=,
17588 +               outstat=,
17589 +               outtree=,
17590 +               vars=,
17591 +               freq=,
17592 +               weight=,
17593 +               includeclassvar=
17594 +               );
17596 +   %if &vars eq %then
17597 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17599 +        /*Add by ruzhan, May 28, 2013*/
17600 +        ods graphics on;
17601 +        %let odspath =;
17602 +        data _null_;
17603 +            path = pathname('WORK');
17604 +            call symput('odspath', path);
17605 +        run;
17606 +        ods listing gpath="&odspath";
17607 +        ods output DENDROGRAM=&outtree;
17608 +       proc varclus data = &indata outstat= &outstat
17609 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17610 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17611 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17612 +        /*-----------------------
17613 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17614 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17615 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17616 +       %end;
17617 +       -------------------------*/
17618 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17619 +            maxc = &EM_PROPERTY_MAXCLUS
17620 +       %end;
17622 +       /*------------------------------------------------------------------------------------------------------
17623 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17624 +        ------------------------------------------------------------------------------------------------------*/
17626 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17627 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17628 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17629 +       %end;
17631 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17632 +            proportion = &EM_PROPERTY_PROPORTION
17633 +       %end;
17634 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17635 +               summary
17636 +       %end;
17638 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17639 +           short
17640 +       %end;
17641 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17642 +           corr trace simple
17643 +       %end;
17644 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17645 +          noprint
17646 +       %end;
17647 +        /*Comment out by ruzhan, May 28, 2013*/
17648 +       /*       outtree=&outtree*/
17649 +       ;
17650 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17652 +      %if &includeclassvar eq Y %then %do;
17653 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17654 +          %if &dsid > 0 %then %do;
17655 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17656 +              %do i = 2 %to &nvar;
17657 +                  %let varname = %sysfunc(varname(&dsid, &i));
17658 +                   &varname
17659 +              %end;
17661 +          %end;
17662 +      %end;
17664 +      ;
17665 +      /*------------------------
17666 +      %if &freq ne  %then %do;
17667 +          freq &freq;
17668 +      %end;
17669 +      %if &weight ne  %then %do;
17670 +          weight &weight;
17671 +      %end;
17672 +      ----------------------------*/
17673 +      %if %EM_FREQ ne %then %do;
17674 +           Freq %EM_FREQ;
17675 +      %end;
17676 +      ;
17677 +    run;
17678 +    ods graphics off;
17679 +    %endline:
17680 +    quit;
17681 +%mend VarClus;
17683 +%macro Train1;
17685 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17686 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17687 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17688 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17689 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17690 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17691 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17692 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17693 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17694 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17695 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17696 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17697 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17699 +   /*
17700 +     %let VARCLUS_MAXNUMOBS = 100;
17701 +     %let VARCLUS_MAXNUMVAR = 200;
17702 +   */
17704 +   /* Train
17706 +   %if &EM_IMPORT_DATA eq %then %do;
17707 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17708 +       %goto endtrain1;
17709 +   %end;
17711 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17712 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17713 +        %goto endtrain1;
17714 +   %end;
17715 +   */
17716 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17717 +       /* moved this to pretrain ------------
17719 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17720 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17721 +                             outvar=&EM_USER_OUTDUMMY,
17722 +                             outdata=_newtrainds,
17723 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17725 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17726 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17727 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17728 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17729 +                %goto endtrain;
17730 +            %end;
17731 +        %end;
17733 +        +-------------------------------------*/
17735 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17736 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17737 +          There is no _newtrainds */
17738 +         %VarClus( indata=&EM_IMPORT_DATA,
17739 +                  outstat=&EM_USER_OUTSTAT,
17740 +                  outtree = &EM_USER_OUTTREE,
17741 +                  includeclassvar=N
17742 +                 );
17743 +        %end;
17744 +        %else %do;
17745 +        %VarClus( indata=_newtrainds,
17746 +                  outstat=&EM_USER_OUTSTAT,
17747 +                  outtree = &EM_USER_OUTTREE,
17748 +                  includeclassvar=Y
17749 +                 );
17750 +         proc datasets lib=work nolist;
17751 +              delete  _newtrainds;
17752 +         run;
17753 +         %end;
17754 +    %end;
17755 +    %else %do;
17757 +        /*----- moved this to pretrain ------------
17758 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17759 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17760 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17761 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17762 +                 %goto endtrain;
17763 +            %end;
17764 +        %end;
17765 +        +-------------------------------------*/
17767 +        %VarClus(indata=&EM_IMPORT_DATA,
17768 +                  outstat=&EM_USER_OUTSTAT,
17769 +                  outtree =&EM_USER_OUTTREE,
17770 +                  includeclassvar=N
17771 +               );
17773 +   %end;
17775 +   %em_checkerror();
17777 +   %if &EMEXCEPTIONSTRING ne %then %do;
17778 +       %goto endtrain1;
17779 +   %end;
17780 +    /*
17781 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17782 +    */
17784 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17786 +    %let gid=;
17788 +    /*--- To make the main result table ----------------------*/
17790 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17791 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17792 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17793 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17794 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17795 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17797 +   /* Inter Cluster Correlation Plot ------------------------*/
17799 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17800 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17802 +   /* Create some other data sets for results ----*/
17804 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17805 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17806 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17808 +  /*---- move this to Score action ------------
17809 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17810 +   */
17812 +   /* create score code at training time */
17813 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17814 +   %endtrain1:
17815 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17818 +%macro VarClus2( indata=,
17819 +                 outdata=,
17820 +                 outstat =outstat,
17821 +                 outrsquare=outrsquare,
17822 +                 outtree = outtree,
17823 +                 outclusstruct = outclusstruct,
17824 +                 outcluscorr =outcluscorr,
17825 +                 outcluscorrplot =outcluscorrplot,
17826 +                 outclusrsquare =outclusrsquare,
17827 +                 outstatplot = outstatplot,
17828 +                 outcorr = outcorr,
17829 +                 outcorrplot = outcorrplot,
17830 +                 clusdata=,
17831 +                 outnode=outnode,
17832 +                 outlink=outlink,
17833 +                 ngroup =1  );
17834 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17835 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17836 +              %goto endline;
17837 +         %end;
17839 +        %global numglobalcluster;
17840 +        %let  numglobalcluster = &ngroup;
17841 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17842 +        %do vci =1 %to &ngroup;
17843 +           data tmp_clusdata;
17844 +                set &clusdata;
17845 +                if CLUSTER ne &vci then delete;
17846 +           run;
17847 +           %let outstatds = &outstat.&vci;
17848 +           %let outrsquareds = &outrsquare.&vci;
17849 +           %let outtreeds = &outtree.&vci;
17850 +           %let outclusstuctds = &outclusstruct.&vci;
17851 +           %let outcluscorrds = &outcluscorr.&vci;
17852 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17853 +           %let outclusrsquareds = &outclussquare.&vci;
17854 +           %let outstatplotds = &outstatplot.&vci;
17855 +           %let outcorrds = &outcorr.&vci;
17856 +           %let outcorrplotds = &outcorrplot.&vci;
17857 +           %let outnodeds = &outnode.&vci;
17858 +           %let outlinkds = &outlink.&vci;
17860 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17861 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17862 +           %let emuseroutstat = &EM_USER_&outstatds;
17864 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17865 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17866 +           %let emuserouttree = &EM_USER_&outtreeds;
17868 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17869 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17870 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17872 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17873 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17874 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17876 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17877 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17878 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17880 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17881 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17882 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17884 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17885 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17886 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17888 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17889 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17890 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17892 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17893 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17894 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17896 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17897 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17898 +           %let emuseroutnode = &EM_USER_&outnodeds;
17900 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17901 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17902 +           %let emuseroutlink = &EM_USER_&outlinkds;
17904 +           /*Add by ruzhan, May 28, 2013*/
17905 +           ods graphics on;
17906 +            %let odspath =;
17907 +            data _null_;
17908 +                path = pathname('WORK');
17909 +                call symput('odspath', path);
17910 +            run;
17911 +            ods listing gpath="&odspath";
17913 +           ods output DENDROGRAM=&emuserouttree;
17915 +           proc varclus data=&indata outstat=&emuseroutstat
17916 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17917 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17918 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17919 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17920 +                  maxc=&EM_PROPERTY_MAXCLUS
17921 +           %end;
17923 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17924 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17925 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17926 +            %end;
17928 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17929 +                proportion = &EM_PROPERTY_PROPORTION
17930 +           %end;
17931 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17932 +               summary
17933 +           %end;
17934 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17935 +               short
17936 +           %end;
17937 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17938 +               corr trace simple
17939 +           %end;
17940 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17941 +               noprint
17942 +           %end;
17943 +            /*Comment out by ruzhan, May 28, 2013*/
17944 +              /*outtree=&emuserouttree*/
17945 +           ;
17946 +           var
17947 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17948 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17949 +                %do %while(^%sysfunc(fetch(&dsid)));
17950 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17951 +                    &_varname
17952 +                %end;
17953 +            %let dsid = %sysfunc(close(&dsid));
17954 +           ;
17955 +           %if %EM_FREQ ne %then %do;
17956 +           Freq %EM_FREQ;
17957 +           %end;
17958 +           run;
17959 +            ods graphics off;
17960 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17962 +            %let gid=&vci;
17963 +            /*--- To make the main result table ----------------------*/
17964 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17965 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17966 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17967 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17968 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17969 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17971 +            /* Inter Cluster Correlation Plot ------------------------*/
17973 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17974 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17976 +           /* Create some other data sets for results ---------------*/
17978 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17979 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17980 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17982 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17984 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17986 +           %if &vci = 1 %then %do;
17987 +           data &EM_USER_OUTRSQUARE;
17988 +                set &emuseroutrsquare;
17989 +           run;
17990 +           %end;
17991 +           %else %do;
17992 +           data &EM_USER_OUTRSQUARE;
17993 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17994 +           run;
17995 +           %end;
17996 +           quit;
17997 +       %end;
17999 +       /*---- move this to Score action ------------
18000 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
18001 +       */
18003 +       /* Make Score Gcluster component & correlation  */
18004 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
18006 +       quit;
18007 +       %endline:
18008 +%mend VarClus2;
18011 +%macro Train2;
18013 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
18014 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
18015 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
18016 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
18017 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
18018 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
18019 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
18020 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
18021 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
18022 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
18023 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
18024 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
18025 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
18026 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
18027 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
18028 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
18029 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
18030 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
18034 +    /* Train */
18036 +   /* moved to pretrain ------------
18038 +   %if &EM_IMPORT_DATA eq %then %do;
18039 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
18040 +       %goto endtrain2;
18041 +   %end;
18043 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
18044 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
18045 +        %goto endtrain2;
18046 +   %end;
18047 +   +-------------------------------------------*/
18049 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
18052 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18054 +        /*----- moved to pretrain ------------
18056 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
18057 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
18058 +                             outvar=&EM_USER_OUTDUMMY,
18059 +                             outdata=_newtrainds,
18060 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
18061 +                              ndummyvars=_ndummyvars
18062 +                            );
18064 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
18065 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
18066 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
18067 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
18068 +                %goto endtrain;
18069 +            %end;
18070 +        %end;
18072 +        +---------------------------------------*/
18073 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
18074 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
18075 +          There is no _newtrainds */
18076 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
18077 +                             outstat=&EM_USER_GOUTSTAT,
18078 +                             corrmatrix=Y,
18079 +                             outcorr=&EM_USER_GOUTCORR,
18080 +                             includeclassvar=N,
18081 +                             freq =%EM_FREQ
18082 +                          );
18083 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
18085 +        %end;
18086 +        %else %do;
18087 +         %MakeCorrelation(   indata=_newtrainds,
18088 +                             outstat=&EM_USER_GOUTSTAT,
18089 +                             corrmatrix=Y,
18090 +                             outcorr=&EM_USER_GOUTCORR,
18091 +                             includeclassvar=Y,
18092 +                             freq =%EM_FREQ
18093 +                          );
18094 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
18096 +        %end;
18098 +    %end;
18099 +    %else %do;
18101 +        /* moved to pretrain -------------------
18103 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
18104 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
18105 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
18106 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
18107 +                %goto endtrain;
18108 +            %end;
18109 +        %end;
18110 +         +------------------------------------------*/
18112 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
18113 +                          outstat=&EM_USER_GOUTSTAT,
18114 +                          corrmatrix=Y,
18115 +                          outcorr=&EM_USER_GOUTCORR,
18116 +                          includeclassvar=N,
18117 +                          freq =%EM_FREQ
18118 +                          );
18119 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
18120 +    %end;
18122 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
18123 +                                rsquare = N
18124 +                                );
18125 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
18126 +                      ncluster=&_ngc,
18127 +                      method = Ward,
18128 +                      outtree =&EM_USER_GOUTTREE,
18129 +                      idvar = _VAR_,
18130 +                      outdata=&EM_USER_GOUTGROUP,
18131 +                      rescore = N,
18132 +                      newncluster=_newnclus
18133 +                        );
18135 +   /* store the number of global cluster */
18137 +   data &EM_USER_VARCLUSMETA;
18138 +        set &EM_USER_VARCLUSMETA;
18139 +        NGCluster = &_newnclus;
18140 +   run;
18142 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
18144 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18145 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
18146 +            %VarClus2(indata=&EM_IMPORT_DATA,
18147 +                 clusdata=&EM_USER_GOUTGROUP,
18148 +                 ngroup=&_newnclus);
18149 +         %end;
18150 +         %else %do;
18151 +             %VarClus2(indata=_newtrainds,
18152 +                 clusdata=&EM_USER_GOUTGROUP,
18153 +                 ngroup=&_newnclus);
18155 +         %end;
18157 +   %end;
18158 +   %else %do;
18159 +       %VarClus2(indata=&EM_IMPORT_DATA,
18160 +                 clusdata=&EM_USER_GOUTGROUP,
18161 +                 ngroup=&_newnclus);
18162 +   %end;
18164 +   %em_checkerror();
18165 +   %if &EMEXCEPTIONSTRING ne %then %do;
18166 +       %put &em_codebar;
18167 +       %put Error: Variable clustering failed.;
18168 +       %put &em_codebar;
18169 +       %goto endtrain2;
18170 +   %end;
18171 +   /*
18172 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
18173 +   */
18174 +   %endtrain2:
18175 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
18177 +%macro em_copyfile(infref=, outfref=, append=N);
18178 +
18179 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
18180 +
18181 +       %let omode =;
18182 +       %if &append=Y %then
18183 +           %let omode = MOD;
18184 +       data _null_;
18185 +          length line $20000;
18186 +          file &outfref &omode lrecl=20000;
18187 +          fid=fopen("&infref",'i',20000,'v');
18188 +          if fid > 0  then do;
18189 +             do while(^fread(fid));
18190 +                rlen = frlen(fid);
18191 +                rc= fget(fid,line,20000);
18192 +                start = length(line)-length(left(line))+1;
18193 +                line=strip(line);
18194 +                put @start line;
18195 +             end;
18196 +             if fid > 0  then rc=fclose(fid);
18197 +          end;
18198 +       run;
18199 +
18200 +   %end;
18201 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
18202  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 32235 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.
 
NOTE: 4 input variable(s).
NOTE: Number of cases=32235
NOTE: Sum of frequencies=32235
NOTE: Sum of weights=32235
NOTE: VARDEF=DF
NOTE: Maximum number of categories=4
NOTE: The total number of variables is 4 with dimensionality 10.
NOTE: The data set EMWS4.VARCLUS_OUTDUMMY has 3 observations and 11 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 32235 observations and 109 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.
 
 
NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:167
NOTE: There were 32235 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:226
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
18203  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS4.VARCLUS_OUTTREE has 162 observations and 3 variables.
NOTE: The data set EMWS4.VARCLUS_OUTSTAT has 2164 observations and 99 variables.
NOTE: The PROCEDURE VARCLUS printed pages 2-7.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           2.07 seconds
      cpu time            0.50 seconds
 
 
 
NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
18204  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1190 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1190 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 98 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      50463:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      50463:84
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1225 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 96 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS4.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTLINK has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTNODE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATSCORE has 37 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2403,
      Last Modified=13Apr2022:19:29:31,
      Create Time=13Apr2022:19:29:10
 
NOTE: 136 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:19:29:35,
      Create Time=13Apr2022:19:29:10
 
NOTE: 245 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
18205  *------------------------------------------------------------*;
18206  * End TRAIN: VarClus;
18207  *------------------------------------------------------------*;
18208
 
18209  *------------------------------------------------------------*;
18210  * Close any missing semi colons;
18211  *------------------------------------------------------------*;
18212  ;
18213  ;
18214  ;
18215  ;
18216  quit;
18217  *------------------------------------------------------------*;
18218  * Close any unbalanced quotes;
18219  *------------------------------------------------------------*;
18220  /*; *"; *'; */
18221  ;
18222  run;
18223  quit;
18224  /* Reset EM Options */
18225  options formchar="|----|+|---+=|-/\<>*";
18226  options nocenter ls=256 ps=10000;
18227  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                April 13, 2022
Time:                19:29:35
*------------------------------------------------------------*
18329  %let EMEXCEPTIONSTRING=;
18330  *------------------------------------------------------------*;
18331  * SCORE: VarClus;
18332  *------------------------------------------------------------*;
18333  %let EM_ACTION = SCORE;
18334  %let syscc = 0;
18335
18336  %macro main;
18337
18338     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
18339     %include temp;
18340     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
18341     %include temp;
18342     filename temp;
18343
18344    %SetProperties;
18345
18346     %if %upcase(&EM_ACTION) = CREATE %then %do;
18347         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
18348         %include temp;
18349         filename temp;
18350         %create;
18351     %end;
18352     %else
18353     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18354          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
18355             %include temp;
18356             filename temp;
18357             %train;
18358     %end;
18359     %else
18360     %if %upcase(&EM_ACTION) = SCORE %then %do;
18361             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
18362             %include temp;
18363             filename temp;
18364             %score;
18365     %end;
18366     %else
18367     %if %upcase(&EM_ACTION) = REPORT %then %do;
18368             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
18369             %include temp;
18370             filename temp;
18371             %report;
18372     %end;
18373     /*
18374     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
18375         %put 'OPENING TABLE';
18376     %end;
18377     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
18378         %put 'CLOSE TABLE';
18379     %end;
18380     */
18381  %mend main;
18382  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
18383 +
18384 +/* Initialize property macro variables */
18385 +%macro SetProperties;
18386 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
18387 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
18388 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
18389 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
18390 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
18391 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
18392 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
18393 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
18394 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
18395 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
18396 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
18397 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
18398 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
18399 +
18400 +%mend SetProperties;
18401 +
18402 +%Macro MakeDummyVariables(indata=,
18403 +                          outvar=,
18404 +                          outdata=,
18405 +                          fileref=,
18406 +                          recreatecmeta=N, /* optional */
18407 +                          incmeta=,     /* optional */
18408 +                          outcmeta=,    /* optional */
18409 +                          ndummyvars=_ndummyvars
18410 +                          );
18411 +    %global &ndummyvars;
18412 +
18413 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
18414 +       class
18415 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18416 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18417 +    ;
18418 +    run;
18419 +    %let &ndummyvars = 0;
18420 +    data _null_;
18421 +    %let dsid = %sysfunc(open(work._classout));
18422 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
18423 +    %let dsid = %sysfunc(close(&dsid));
18424 +    run;
18425 +
18426 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
18427 +       input
18428 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18429 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18430 +        / level=nominal stdize=no;
18431 +       make outvar = &outvar;
18432 +       score data = &indata out =&outdata;
18433 +       code  file=  "&fileref";
18434 +    run;
18435 +    %if &recreatecmeta eq Y %then %do;
18436 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
18437 +    data _tmpds;
18438 +        set _tmpds;
18439 +           ROLE = 'INPUT';
18440 +           LEVEL = 'INTERVAL';
18441 +           CREATOR='DMZIP';
18442 +           if NAME = '_TYPE_' then delete;
18443 +    run;
18444 +    data &outcmeta;
18445 +         set &incmeta _tmpds;
18446 +    run;
18447 +    %end;
18448 +    proc datasets lib=work nolist;
18449 +      delete  _dmdbdat _dmdbcat _classout
18450 +    %if &recreatecmeta eq Y %then %do;
18451 +    _tmpds
18452 +    %end;
18453 +    ;
18454 +    quit;
18455 +%Mend MakeDummyVariables;
18456 +
18457 +/*--- Determine Optimal Number of Cluster ----
18458 +%macro FindClusNum(statds=, groupds=, minvariation=);
18459 +   %global optnclus;
18460 +   data varclus_tmp(drop=_NAME_);
18461 +      set &statDs;
18462 +      where _type_ ='PROPOR';
18463 +   run;
18464 +   proc sort data=varclus_tmp;
18465 +      by _NCL_;
18466 +   run;
18467 +   proc transpose data=varclus_tmp out=varclus_tmp;
18468 +      by _NCL_;
18469 +      var %EM_INTERVAL_INPUT
18470 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18471 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18472 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
18473 +          %do i = 2 %to &nvar;
18474 +          %let varname = %sysfunc(varname(&dsid, &i));
18475 +          &varname
18476 +          %end;
18477 +      %end;
18478 +   ;
18479 +   run;
18480 +
18481 +   %if &minVariation eq %then %do;
18482 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
18483 +   %end;
18484 +   %if ^(0<&minVariation<100) %then %do;
18485 +       %let minVariation = 90;
18486 +   %end;
18487 +
18488 +   data _null_;
18489 +      set varclus_tmp end=eof;
18490 +      by _NCL_;
18491 +      retain flag 0;
18492 +      if first._ncl_ then flag=0;
18493 +      if .<col1 < &minVariation then flag=1;
18494 +      if last._ncl_ and ^flag then do;
18495 +         call symput('OPTNCL', _ncl_);
18496 +         stop;
18497 +      end;
18498 +     if eof then call symput('OPTNCL', _ncl_);
18499 +   run;
18500 +
18501 +   %let optnclus = &OPTNCL;
18502 +
18503 +   data varclus_tmp(drop=_NCL_ _NAME_);
18504 +      set &statDs;
18505 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
18506 +   run;
18507 +   proc sort data=varclus_tmp;
18508 +      by _TYPE_;
18509 +   run;
18510 +   proc transpose data=varclus_tmp out=varclus_tmp;
18511 +      by _TYPE_;
18512 +   run;
18513 +   proc sort data=varclus_tmp;
18514 +      by _name_ _type_;
18515 +   run;
18516 +
18517 +  proc transpose data=varclus_tmp out=&groupds;
18518 +      by _NAME_;
18519 +   run;
18520 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
18521 +      by Cluster descending Rsquare;
18522 +      where Cluster ne 0;
18523 +   run;
18524 +   proc datasets lib=work nolist mt=(DATA VIEW);
18525 +      delete varclus_tmp;
18526 +   run;
18527 +   quit;
18528 +%mend findClusNum;
18529 +*/
18530 +
18531 +%macro getNclusfromTrain(inoutstat=, nc=);
18532 +%global &nc;
18533 +data _null_;
18534 +    set &inoutstat end=eof;
18535 +    if eof then do;
18536 +    call symput("&nc", _ncl_);
18537 +    end;
18538 +run;
18539 +%mend  getNclusfromTrain;
18540 +
18541 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18542 +
18543 +     *--- Build Code to Modify Metadata ---*;
18544 +     filename X "&deltacodefile";
18545 +     data _null_;
18546 +        FILE X;
18547 +        set &groupds end=eof;
18548 +        /*by Cluster;*/
18549 +         if _N_=1 then do;
18550 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18551 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18552 +           %end;
18553 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18554 +           put "if upcase(strip(NAME)) in (";
18555 +        end;
18556 +        if Strip(upcase(Selected)) eq 'YES' then do;
18557 +           string = '"'!!trim(left(VARIABLE))!!'"';
18558 +           put string;
18559 +        end;
18560 +        if eof then do;
18561 +           put ') then ROLE="INPUT";';
18562 +           put 'else ROLE="REJECTED";';
18563 +           put 'end;';
18564 +
18565 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18566 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18567 +           %end;
18568 +        end;
18569 +     run;
18570 +     quit;
18571 +
18572 +     filename X;
18573 +
18574 +     quit;
18575 +%mend MakeDeltaCode;
18576 +
18577 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18578 +    %if ^%sysfunc(exist(&statds)) %then %do;
18579 +         %goto doendc;
18580 +    %end;
18581 +
18582 +    data &corrds(drop=_TYPE_ _NCL_) ;
18583 +       set &statds;
18584 +       where _type_ eq 'CORR' ;
18585 +    run ;
18586 +    proc sort data=&corrds;
18587 +       by _NAME_ ;
18588 +    run ;
18589 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18590 +      BY _NAME_ ;
18591 +    run ;
18592 +    data &corrplotds;
18593 +       length _Y_ $100;
18594 +       set &corrplotDs;
18595 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18596 +    run ;
18597 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18598 +       set &corrplotds;
18599 +       where _LABEL_ ne '' ;
18600 +       keep _TMP_ _LABEL_ ;
18601 +    run ;
18602 +    data _null_;
18603 +       nobs=0;
18604 +       dsid = open('varclus_match');
18605 +       if dsid then do;
18606 +          nobs = attrn(dsid, 'NOBS');
18607 +          dsid = close(dsid);
18608 +       end;
18609 +       call symput ('CORR_NOBS', nobs);
18610 +    run;
18611 +    %if &corr_nobs %then %do;
18612 +        proc sort data=varclus_match;
18613 +           by _name_;
18614 +        run ;
18615 +        proc sort data=&corrplotds;
18616 +           by _name_;
18617 +        run ;
18618 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18619 +           merge varclus_match &corrplotds;
18620 +           by _NAME_ ;
18621 +           if _X_ eq '' then _X_=_NAME_ ;
18622 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18623 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18624 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18625 +
18626 +       run ;
18627 +    %end;
18628 +    %else %do;
18629 +        proc sort data=&corrplotds;
18630 +           by _name_;
18631 +        run ;
18632 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18633 +           set &corrplotds;
18634 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18635 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18636 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18637 +
18638 +        run ;
18639 +    %end;
18640 +    proc sort data=&corrplotds;
18641 +       by _X_ _Y_;
18642 +    run ;
18643 +    proc datasets lib=work nolist mt=(DATA VIEW);
18644 +       delete varclus_match;
18645 +    run;
18646 +    quit;
18647 +
18648 +%doendc:
18649 +
18650 +%mend MakeVarClusCorrData;
18651 +
18652 +%macro MakeStatPlotData(statds= , outstatplotds=);
18653 +   %if %sysfunc(exist(&statds)) %then %do;
18654 +
18655 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18656 +          set &statDs;
18657 +          where _type_ in('MEAN', 'STD', 'N');
18658 +       run ;
18659 +       proc transpose data=varclus_tmp out=&outstatplotds;
18660 +          id _TYPE_ ;
18661 +       run ;
18662 +       data &outstatplotds;
18663 +          set &outstatplotds(obs=1000);
18664 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18665 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18666 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18667 +          else SCALEDSTD= STD ;
18668 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18669 +       run ;
18670 +       proc sort data=&outstatplotds;
18671 +          by descending SCALEDSTD ;
18672 +       run ;
18673 +       proc datasets lib=work nolist mt=(DATA VIEW);
18674 +          delete varclus_tmp;
18675 +       run;
18676 +       quit;
18677 +    %end;
18678 +
18679 +%mend MakeStatPlotData;
18680 +
18681 +
18682 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18683 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18684 +    data &EM_USER_OUTSTATSCORE;
18685 +          set &indata;
18686 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18687 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18688 +          if _TYPE_ = 'STD' then _NAME_='STD';
18689 +          DROP _TYPE_ _NCL_;
18690 +     run;
18691 +
18692 +     filename _file_  "&fileRef";
18693 +
18694 +     data _null_;
18695 +        FILE _file_ MOD;
18696 +        put ' ';
18697 +        put '/*-------------------------------------------------*/';
18698 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18699 +        put '/*-------------------------------------------------*/';
18700 +        put ' ';
18701 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18702 +
18703 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18704 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18705 +
18706 +        %let k = 1;
18707 +        %do %while(^%sysfunc(fetch(&dsid)));
18708 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18709 +                %if &k > 2 %then %do;
18710 +                 %let cn = %eval(&k-2);
18711 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18712 +                %end;
18713 +                %let k = %eval(&k+1);
18714 +        %end;
18715 +
18716 +        %let rc = %sysfunc(rewind(&dsid));
18717 +
18718 +        %do i= 2 %to &nvar;
18719 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18720 +            %do %while(^%sysfunc(fetch(&dsid)));
18721 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18722 +                %if &_name = MEAN %then
18723 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18724 +                %else %if &_name = STD %then
18725 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18726 +                %else %do;
18727 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18728 +                      %let abscoeff = %sysfunc(abs(&coeff));
18729 +                          %if &abscoeff >  0 %then %do;
18730 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18731 +                           %end;
18732 +                 %end;
18733 +             %end;
18734 +             %let rc = %sysfunc(rewind(&dsid));
18735 +         %end;
18736 +
18737 +        %let dsid= %sysfunc(close(&dsid));
18738 +       run;
18739 +%mend CreateScoreCode;
18740 +
18741 +
18742 +
18743 +/*----------------------------------------------------------
18744 +    Instead of using %MakeRSquareData,
18745 +    %MakeVarClusResultTable at macro2.source is used
18746 + +----------------------------------------------------------*/
18747 +
18748 +
18749 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18750 +
18751 +/* modifying  from ods rsquare = data */
18752 +
18753 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18754 +    Length Cluster $16;
18755 +    length Variable $32;
18756 +    Length VariableLabel $64;
18757 +    set &indata; retain CurrentCluster;
18758 +    if NumberOfClusters ^= &ncluster then delete;
18759 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18760 +    CurrentCluster = Cluster;
18761 +   run;
18762 +proc sort data =&outdata ;
18763 +     by Cluster RsquareRatio;
18764 +run;
18765 +data _tmprsq(drop=index);
18766 +     set &outdata; by Cluster;
18767 +     if first.Cluster then do;
18768 +     index = strip(scan(Cluster,2 ));
18769 +     Variable = "Clus"||index;
18770 +     VariableLabel = "Cluster Component "||index;
18771 +     OwnCluster = 1;
18772 +     NextClosest = .;
18773 +     RsquareRatio = 0;
18774 +     output;
18775 +     end;
18776 +run;
18777 +
18778 +proc sort data = _tmprsq ;
18779 +     by Cluster RsquareRatio;
18780 +run;
18781 +data &outdata;
18782 +     set &outdata _tmprsq;
18783 +by Cluster;
18784 +run;
18785 +
18786 +
18787 +/* Just create the Selected variable with all YES */
18788 +
18789 +data &outdata;
18790 +    set &outdata; by cluster;
18791 +    length Selected $8;
18792 +    Selected = 'YES';
18793 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18794 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18795 +    rename OwnCluster = RSqWithClusterComp;
18796 +    rename NextClosest = RSqWithNextClusComp;
18797 +run;
18798 +
18799 +
18800 +/* Selected = Y/N will be done %score section -----
18801 +
18802 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18803 +data &outdata;
18804 +    set &outdata; by cluster;
18805 +    length Selected $8;
18806 +    if first.Cluster then Selected = 'YES';
18807 +    else Selected = 'NO';
18808 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18809 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18810 +    rename OwnCluster = RSqWithClusterComp;
18811 +    rename NextClosest = RSqWithNextClusComp;
18812 +run;
18813 +%end;
18814 +%else %do;
18815 +data &outdata;
18816 +    set &outdata; by cluster;
18817 +    if last.Cluster then Selected = 'YES';
18818 +    else Selected = 'NO';
18819 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18820 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18821 +    rename OwnCluster = RSqWithClusterComp;
18822 +    rename NextClosest = RSqWithNextClusComp;
18823 +run;
18824 +%end;
18825 +---------------------------------------------------------------*/
18826 +
18827 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18828 +/* to calculate NextClosestClusRsq */
18829 +proc transpose data = &inClusRSquare  out=_clusRsq;
18830 +      by cluster;
18831 +      run;
18832 +data _clusRsq;
18833 +     set _clusRsq;
18834 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18835 +run;
18836 +
18837 +proc sort data=_clusRsq;
18838 +    by cluster col1;
18839 +    run;
18840 +data _clusRsq(drop=_NAME_ _LABEL_);
18841 +     set _clusRsq; by cluster;
18842 +     if last.Cluster then output;
18843 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18844 +     rename COL1 = RSqWithNextClusComp;
18845 +     rename Cluster = Variable;
18846 +     label  Cluster = "Variable";
18847 +run;
18848 +
18849 +proc sort data =&outdata;
18850 +     by Variable;
18851 +run;
18852 +data &outdata;
18853 +    merge &outdata _clusRsq;
18854 +    by Variable;
18855 +run;
18856 +proc sort data =&outdata;
18857 +by Cluster  RsquareRatio;
18858 +run;
18859 +quit;
18860 +%end;
18861 +
18862 +proc datasets lib = work nolist;
18863 +     delete _tmprsq _clusRsq;
18864 +     run;
18865 +quit;
18866 +
18867 +%mend MakeRSquareData;
18868 +
18869 +
18870 +/*-------------------------------------------------------------------------*/
18871 +
18872 +
18873 +
18874 +%macro ModifyCorr(indata=,
18875 +                  outdata=,
18876 +                  rsquare = Y
18877 +                  );
18878 +    data corr_tmp;
18879 +        set &indata;
18880 +    run;
18881 +     proc sql;
18882 +           update &indata
18883 +           set
18884 +     %let dsid = %sysfunc(open(work.corr_tmp));
18885 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18886 +          %do i = 4 %to &nvar;
18887 +          %let _name = %sysfunc(varname(&dsid, &i));
18888 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18889 +            %else  %let _name_md = &_name;
18890 +            %if &i < &nvar %then %do;
18891 +               &_name = 1- &_name_md ,
18892 +            %end;
18893 +            %else %do;
18894 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18895 +            %end;
18896 +          %end;
18897 +      %let dsid= %sysfunc(close(&dsid));
18898 +
18899 +      select * from &indata;
18900 +      run;
18901 +      proc datasets lib = work nolist;
18902 +           delete corr_tmp;
18903 +      run;
18904 +      quit;
18905 +
18906 + %mend ModifyCorr;
18907 +
18908 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18909 +    data &outdata(drop= _NCL_  _TYPE_);
18910 +       set &indata;
18911 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18912 +       rename _NAME_ = Cluster;
18913 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18914 +    run;
18915 +    %if &RSquare eq Y %then %do;
18916 +     data corr_tmp;
18917 +        set &outdata;
18918 +     run;
18919 +
18920 +     data &outdata(drop=i);
18921 +          set &outdata;
18922 +          %let dsid = %sysfunc(open(work.corr_tmp));
18923 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18924 +          %do i = 2 %to &nvar;
18925 +            %let _name = %sysfunc(varname(&dsid, &i));
18926 +            %let _name_md = &_name.**2;
18927 +                &_name = &_name_md;
18928 +          %end;
18929 +      %let dsid= %sysfunc(close(&dsid));
18930 +      run;
18931 +      proc datasets lib = work nolist;
18932 +           delete corr_tmp;
18933 +      run;
18934 +
18935 +    %end;
18936 +     quit;
18937 +%mend MakeClusStructCorrData;
18938 +
18939 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18940 +    data &outdata(drop= _NCL_  _TYPE_);
18941 +       set &indata;
18942 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18943 +       rename _NAME_ = Cluster;
18944 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18945 +    run;
18946 +    data corr_tmp;
18947 +        set &outdata;
18948 +    run;
18949 +
18950 +    %let dsid = %sysfunc(open(work.corr_tmp));
18951 +    %let nclus2= %eval(&ncluster+1);
18952 +    data &outdata;
18953 +         set &outdata;
18954 +          %do i = 2 %to &nclus2;
18955 +          %let i_1 = %eval(&i-1);
18956 +            %let _name = %sysfunc(varname(&dsid, &i));
18957 +            %let _newName = Clus&i_1;
18958 +                rename &_name = &_newName; ;
18959 +                *label &_name ="Cluster &i_1";
18960 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18961 +          %end;
18962 +          keep Cluster
18963 +          %do i = 2 %to &nclus2;
18964 +                %let _name = %sysfunc(varname(&dsid, &i));
18965 +                &_name
18966 +          %end;
18967 +          ;
18968 +    %let dsid= %sysfunc(close(&dsid));
18969 +     run;
18970 +     quit;
18971 +
18972 +    %if &RSquare eq Y %then %do;
18973 +
18974 +       data corr_tmp;
18975 +        set &outdata;
18976 +     run;
18977 +
18978 +     data &outdata(drop=i);
18979 +          set &outdata;
18980 +          %let dsid = %sysfunc(open(work.corr_tmp));
18981 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18982 +          %do i = 2 %to &nvar;
18983 +            %let _name = %sysfunc(varname(&dsid, &i));
18984 +            %let _name_md = &_name.**2;
18985 +                &_name = &_name_md;
18986 +          %end;
18987 +      %let dsid= %sysfunc(close(&dsid));
18988 +      run;
18989 +    %end;
18990 +
18991 +    %if &makeplotds eq Y %then %do;
18992 +     proc transpose data = &outdata
18993 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18994 +          by cluster;
18995 +     run;
18996 +     data &plotds;
18997 +          set  &plotds;
18998 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18999 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19000 +     run;
19001 +     %end;
19002 +     proc datasets lib = work nolist;
19003 +           delete corr_tmp;
19004 +     run;
19005 +     quit;
19006 +%mend MakeInterClusCorrData;
19007 +
19008 +
19009 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
19010 +
19011 +data &outlink(drop = Selected);
19012 +     set &indata;
19013 +     LINKID = _N_;
19014 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
19015 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
19016 +run;
19017 +data &outnode(keep=NODEID TYPE LABEL);
19018 +    set &indata;
19019 +    length TYPE $16;
19020 +    rename Variable = NODEID;
19021 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
19022 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
19023 +    then  TYPE = "CLUSTER";
19024 +    else  TYPE="VARIABLE";
19025 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
19026 +run;
19027 +quit;
19028 +%mend MakeClusConstellData;
19029 +
19030 +
19031 +
19032 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
19033 +
19034 +data &outlink(drop = Selected);
19035 +     set &indata;
19036 +     LINKID = _N_;
19037 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
19038 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
19039 +run;
19040 +data &outnode(keep=NODEID TYPE LABEL);
19041 +    set &indata;
19042 +    length TYPE $16;
19043 +    rename Variable = NODEID;
19044 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
19045 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
19046 +    then  TYPE = "CLUSTER";
19047 +    else  TYPE="VARIABLE";
19048 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
19049 +run;
19050 +quit;
19051 +%mend MakeClusConstellData;
19052 +
19053 +
19054 +/*--- This will work only when inds is not a view data -------
19055 +
19056 +%macro getNVarNObs(inds=, nvar=, nobs=);
19057 +
19058 +    %global &nvar;
19059 +    %global &nobs;
19060 +    data _null_;
19061 +         dsid = open("&inds");
19062 +         nv = attrn(dsid, 'NVAR');
19063 +         no = attrn(dsid, 'NOBS');
19064 +         dsid = close(dsid);
19065 +         call symput("&nvar", nv);
19066 +         call symput("&nobs", no);
19067 +    run;
19068 +    quit;
19069 +%mend  getNVarNObs;
19070 +
19071 ++---------------------------------------------------------------*/
19072 +
19073 +
19074 +%macro getNVar(inds=, nvar=);
19075 +    %global &nvar;
19076 +    data _null_;
19077 +         dsid = open("&inds");
19078 +         nv = attrn(dsid, 'NVAR');
19079 +         dsid = close(dsid);
19080 +         call symput("&nvar", nv);
19081 +    run;
19082 +    quit;
19083 +%mend  getNVar;
19084 +
19085 +
19086 +
19087 +%macro getNObs(inds=, nobs=);
19088 +    %global &nobs;
19089 +    data _null_;
19090 +        set &inds end=eof;
19091 +        if eof then call symput("&nobs", _N_);
19092 +    run;
19093 +    quit;
19094 +%mend  getNObs;
19095 +
19096 +%Macro CreateVarclusMeta(trainnum=);
19097 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
19098 +    data &EM_USER_VARCLUSMETA;
19099 +         length TrainNum 8.;
19100 +         length NewTrain $8;
19101 +         length NGCluster 8.;
19102 +         length ExportedComp $16;
19103 +         length HideVariable $8;
19104 +         TrainNum = &trainnum;
19105 +         NewTrain = "Y";
19106 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19107 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19108 +         NGCluster = 0; /* zero means no twostage */
19109 +   run;
19110 +   quit;
19111 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
19112  +
19113  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
19114  +    data &outdata(drop= _NCL_  _TYPE_);
19115  +       set &indata;
19116  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
19117  +       %if &globalclusid ne %then %do;
19118  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
19119  +       rename _NAME_ = Cluster;
19120  +       %end;
19121  +       %else %do;
19122  +        _NAME_ = upcase(_NAME_);
19123  +       rename _NAME_ = Cluster;
19124  +       %end;
19125  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
19126  +    run;
19127  +    data corr_tmp;
19128  +        set &outdata;
19129  +    run;
19130  +
19131  +    %let dsid = %sysfunc(open(work.corr_tmp));
19132  +    %let nclus2= %eval(&ncluster+1);
19133  +    data &outdata;
19134  +         set &outdata;
19135  +          %do i = 2 %to &nclus2;
19136  +          %let i_1 = %eval(&i-1);
19137  +            %let _name = %sysfunc(varname(&dsid, &i));
19138  +            %if &globalclusid ne %then
19139  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
19140  +                     rename &_name = &_newName;
19141  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
19142  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
19143  +                %end;
19144  +            %else
19145  +                %do; %let _newName = CLUS&i_1;
19146  +                     rename &_name = &_newName;
19147  +                     *label &_name ="Cluster &i_1";
19148  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
19149  +                %end;
19150  +          %end;
19151  +          keep Cluster
19152  +          %do i = 2 %to &nclus2;
19153  +                %let _name = %sysfunc(varname(&dsid, &i));
19154  +                &_name
19155  +          %end;
19156  +          ;
19157  +    %let dsid= %sysfunc(close(&dsid));
19158  +     run;
19159  +     quit;
19160  +
19161  +    %if &RSquare eq Y %then %do;
19162  +
19163  +       data corr_tmp;
19164  +        set &outdata;
19165  +     run;
19166  +
19167  +     data &outdata;
19168  +          set &outdata;
19169  +          %let dsid = %sysfunc(open(work.corr_tmp));
19170  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19171  +          %do i = 2 %to &nvar;
19172  +            %let _name = %sysfunc(varname(&dsid, &i));
19173  +            %let _name_md = &_name.**2;
19174  +                &_name = &_name_md;
19175  +          %end;
19176  +      %let dsid= %sysfunc(close(&dsid));
19177  +      run;
19178  +    %end;
19179  +
19180  +    %if &makeplotds eq Y %then %do;
19181  +     proc transpose data = &outdata
19182  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19183  +          by cluster;
19184  +     run;
19185  +     data &plotds;
19186  +          set  &plotds;
19187  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19188  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19189  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
19190  +     run;
19191  +     %end;
19192  +     proc datasets lib = work nolist;
19193  +           delete corr_tmp;
19194  +     run;
19195  +     quit;
19196  +%mend MakeInterClusCorrData;
19197  +
19198  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
19199  +    data _tmpds(drop= _NCL_);
19200  +       set &indata;
19201  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
19202  +       %if &globalclusid ne %then %do;
19203  +           _NAME_ = "GC&globalclusid.";
19204  +       rename _NAME_ = Cluster;
19205  +       %end;
19206  +       %else %do;
19207  +        _NAME_ = "CLUS";
19208  +        rename _NAME_ = Cluster;
19209  +       %end;
19210  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
19211  +    run;
19212  +    proc transpose data =_tmpds out =&outdata;
19213  +    run;
19214  +
19215  +    data &outdata(drop=COL1);
19216  +        %if &globalclusid ne %then %do;
19217  +        length GCluster $16;
19218  +        %end;
19219  +        length Cluster $32;
19220  +        length _NAME_ $32;
19221  +         set &outdata;
19222  +         _NAME_ = upcase(_NAME_);
19223  +         rename _NAME_=Variable;
19224  +         *label _NAME_="Variable";
19225  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19226  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19227  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19228  +
19229  +         %if &globalclusid ne %then %do;
19230  +          GCluster = "GC&globalclusid";
19231  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
19232  +         %end;
19233  +         %else %do;
19234  +         Cluster = "CLUS"||strip(COL1);
19235  +        %end;
19236  +         rename COL2 = RSqWithOwnClusComp;
19237  +         *label COL2 = "R-Square With Own Cluster Component";
19238  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19239  +
19240  +   run;
19241  +   proc sort data =&outdata;
19242  +        by Cluster RSqWithOwnClusComp;
19243  +   run;
19244  +   proc datasets lib = work nolist;
19245  +           delete _tmpds;
19246  +   run;
19247  +   quit;
19248  +%mend MakeOwnRSquare;
19249  +
19250  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
19251  +    data &outdata(drop= _NCL_  _TYPE_);
19252  +       %if &globalclusid ne %then %do;
19253  +        length GCluster $16;
19254  +        %end;
19255  +       set &indata;
19256  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
19257  +       %if &globalclusid ne %then %do;
19258  +         GCluster = "GC&globalclusid";
19259  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
19260  +         rename _NAME_ = Cluster;
19261  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19262  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19263  +
19264  +       %end;
19265  +       %else %do;
19266  +         _NAME_ = upcase(_NAME_);
19267  +         rename _NAME_ = Cluster;
19268  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19269  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19270  +
19271  +       %end;
19272  +     run;
19273  +    %if &RSquare eq Y %then %do;
19274  +     data corr_tmp;
19275  +          set &outdata;
19276  +     run;
19277  +     %let istart = 2;
19278  +     %if &globalclusid ne %then %let istart = 3;
19279  +     data &outdata;
19280  +          set &outdata;
19281  +          %let dsid = %sysfunc(open(work.corr_tmp));
19282  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19283  +          %do i =&istart %to &nvar;
19284  +            %let _name = %sysfunc(varname(&dsid, &i));
19285  +            %let _name_md = &_name.**2;
19286  +                &_name = &_name_md;
19287  +          %end;
19288  +      %let dsid= %sysfunc(close(&dsid));
19289  +      run;
19290  +      proc datasets lib = work nolist;
19291  +           delete corr_tmp;
19292  +      run;
19293  +    %end;
19294  +     quit;
19295  +%mend MakeClusStructCorrData;
19296  +
19297  +/*
19298  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
19299  +*/
19300  +
19301  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
19302  +
19303  +     /* The indata should be the outdata
19304  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
19305  +
19306  +     proc sort data =&indata out=_tmpclusRsq;
19307  +     by cluster;
19308  +     run;
19309  +
19310  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19311  +      by cluster;
19312  +     run;
19313  +
19314  +     proc sort data=_tmpclusRsq;
19315  +        by _NAME_ COL1;
19316  +     run;
19317  +
19318  +     data _tmpclusRsq;
19319  +         length _NAME_ $32;
19320  +         set _tmpclusRsq; by _NAME_;
19321  +          _NAME_ = upcase(_NAME_);
19322  +          %if &ncluster ne 1 %then %do;
19323  +             if last._NAME_ then delete;
19324  +          %end;
19325  +          %else %do;
19326  +             COL1 = 0;
19327  +          %end;
19328  +     run;
19329  +     /* need to sort again */
19330  +     proc sort data=_tmpclusRsq;
19331  +        by _NAME_ COL1;
19332  +     run;
19333  +
19334  +     data &outdata;
19335  +         set _tmpclusRsq; by _NAME_;
19336  +         Cluster = upcase(Cluster);
19337  +         if last._NAME_ then output;
19338  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19339  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19340  +         rename COL1 = RSqWithNextClusComp;
19341  +         Cluster = upcase(Cluster);
19342  +         rename Cluster = ClosestCluster;
19343  +         *label  Cluster = "Next Closest Cluster";
19344  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19345  +         rename _NAME_ = Variable;
19346  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19347  +    run;
19348  +
19349  +
19350  +    %if &globalclusid ne %then %do;
19351  +    data &outdata;
19352  +       length GCluster $16;
19353  +       set &outdata;
19354  +       GCluster = "GC&globalclusid";
19355  +       run;
19356  +    %end;
19357  +    proc datasets lib = work nolist;
19358  +           delete _tmpclusRsq;
19359  +    run;
19360  +    quit;
19361  +%mend FindNextClosestClusByVar;
19362  +
19363  +
19364  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
19365  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
19366  +     proc sort data =&indata out=_tmpclusRsq;
19367  +     by cluster;
19368  +     run;
19369  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19370  +     by cluster;
19371  +     run;
19372  +     proc sort data=_tmpclusRsq;
19373  +        by _NAME_ col1;
19374  +     run;
19375  +     data _tmpclusRsq;
19376  +         length _NAME_ $32;
19377  +         set _tmpclusRsq; by _NAME_;
19378  +          _NAME_ = upcase(_NAME_);
19379  +          %if &ncluster ne 1 %then %do;
19380  +             if last._NAME_ then delete;
19381  +          %end;
19382  +          %else %do;
19383  +             COL1 = 0;
19384  +          %end;
19385  +     run;
19386  +     data &outdata;
19387  +         set _tmpclusRsq; by _NAME_;
19388  +         Cluster = upcase(Cluster);
19389  +         if last._NAME_ then output;
19390  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19391  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19392  +         rename COL1 = RSqWithNextClusComp;
19393  +         Cluster = upcase(Cluster);
19394  +         rename Cluster = ClosestCluster;
19395  +         *label  Cluster = "Next Closest Cluster";
19396  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19397  +         rename _NAME_ = Variable;
19398  +         *label  _NAME_ = "Variable";
19399  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19400  +
19401  +    run;
19402  +    %if &globalclusid ne %then %do;
19403  +    data &outdata;
19404  +       length GCluster $16;
19405  +       set &outdata;
19406  +       GCluster = "GC&globalclusid";
19407  +       run;
19408  +    %end;
19409  +
19410  +    proc datasets lib = work nolist;
19411  +           delete _tmpclusRsq;
19412  +    run;
19413  +
19414  +    quit;
19415  +%mend FindNextClosestClusByCluster;
19416  +
19417  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
19418  +/*----
19419  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
19420  +-----------*/
19421  +
19422  +proc sort data =&indata1;
19423  +    by Variable;
19424  +run;
19425  +proc sort data =&indata2;
19426  +    by Variable;
19427  +run;
19428  +data &outdata;
19429  +    merge &indata1 &indata2;
19430  +    by Variable;
19431  +    length Type $16;
19432  +    Type = 'Variable';
19433  +    *label Type ='Type';
19434  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19435  +run;
19436  +
19437  +
19438  +data &indata3;
19439  +    set  &indata3 ;
19440  +    length RSqWithOwnClusComp 8.;
19441  +    Cluster = Variable;
19442  +    RSqWithOwnClusComp = 1;
19443  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
19444  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19445  +    length Type $16;
19446  +    Type = 'ClusterComp';
19447  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19448  +
19449  +;
19450  +run;
19451  +
19452  +proc sort data=&outdata;
19453  +    by Cluster;
19454  +run;
19455  +proc sort data =&indata3;
19456  +    by Cluster;
19457  +run;
19458  +
19459  +data &outdata;
19460  +     set &outdata &indata3;
19461  +     by Cluster;
19462  +run;
19463  +
19464  +
19465  +/* Create the Selected variable with all YES */
19466  +
19467  +data &outdata;
19468  +     set &outdata;
19469  +     length RsqRatio 8.;
19470  +     length Selected $8;
19471  +     *label RSqRatio = "1-R**2 Ratio";
19472  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
19473  +     *label Selected = "Variable Selected";
19474  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
19475  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
19476  +     Selected ='YES';
19477  +     rename _LABEL_ = Label;
19478  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19479  +run;
19480  +
19481  +
19482  +/*----  Selected = Y/N will be assigened at the %score                   -------+
19483  +        Just create the Selected variable with all YES at the step above
19484  + +------------------------------------------------------------------------------+
19485  +
19486  +proc sort data=&outdata;
19487  +    by Cluster RsqRatio;
19488  +run;
19489  +
19490  +%if &selectedcomp eq CLUSTERCOMP %then %do;
19491  +data &outdata;
19492  +     set &outdata; by Cluster;
19493  +     length Selected $8;
19494  +     label Selected = "Variable Selected";
19495  +     if  first.Cluster then Selected ='Yes';
19496  +     else Selected = 'No';
19497  +    run;
19498  +%end;
19499  +%else %do;
19500  +data &outdata(drop = _var _varchange);
19501  +     set &outdata; retain _var 0; by Cluster;
19502  +     length Selected $8;
19503  +     label Selected = "Variable Selected";
19504  +     if first.Cluster then  _varchange = 0;
19505  +     else _varchange =1;
19506  +     if _var ne _varchange then  Selected  = 'Yes';
19507  +     else Selected = 'No';
19508  +     if last.cluster then  _var = 0;
19509  +     else _var = _varchange;
19510  +run;
19511  +%end;
19512  +
19513  +--------------------------------------------------------------*/
19514  +
19515  +quit;
19516  +%mend MakeVarClusResultTable;
19517  +
19518  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
19519  +     proc sort data =&indata;
19520  +        by cluster;
19521  +     run;
19522  +     proc transpose data =&indata
19523  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19524  +          by cluster;
19525  +     run;
19526  +     data &outdata;
19527  +          set  &outdata;
19528  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19529  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19530  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
19531  +     run;
19532  +     %if &globalclusid ne %then %do;
19533  +     data &outdata;
19534  +          Length GCluster $16;
19535  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19536  +          set  &outdata;
19537  +          GCluster ="GC&globalclusid.";
19538  +          run;
19539  +     %end;
19540  +
19541  +%Mend MakePlotDataFromCorrTable;
19542  +
19543  +
19544  +%macro MakeCorrelation(indata=,
19545  +                       outstat=_tmpoutstat,
19546  +                       corrmatrix=N,
19547  +                       outcorr=_tmpoutcorr,
19548  +                       includeclassvar=N,
19549  +                       target=,
19550  +                       freq=,
19551  +                       weight=);
19552  +   %if &target eq  %then %do;
19553  +
19554  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19555  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19556  +       %if &includeclassvar eq Y %then %do;
19557  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19558  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19559  +          %do i = 2 %to &nvar;
19560  +          %let varname = %sysfunc(varname(&dsid, &i));
19561  +          &varname
19562  +          %end;
19563  +       %end;
19564  +       ;
19565  +      %if &freq ne  %then %do;
19566  +          freq &freq;
19567  +      %end;
19568  +      %if &weight ne  %then %do;
19569  +          weight &weight;
19570  +      %end;
19571  +
19572  +      run;
19573  +      %if &corrmatrix eq Y %then %do;
19574  +      data  &outcorr (drop = _NCL_ _TYPE_);
19575  +           set  &outstat ;
19576  +           if _TYPE_ ='CORR' then output;
19577  +      run;
19578  +      %end;
19579  +    %end;
19580  +    %else %do;
19581  +       proc corr data=&indata outp=&outstat noprint;
19582  +            var
19583  +       %let dsid = %sysfunc(open(&indata));
19584  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19585  +          %do i = 1 %to &nvar;
19586  +              %let _name = %sysfunc(varname(&dsid, &i));
19587  +              %if &_name ne &target %then;
19588  +              &_name
19589  +           %end;
19590  +        %let dsid= %sysfunc(close(&dsid));
19591  +        ;
19592  +        with &target;
19593  +        run;
19594  +    %end;
19595  +    quit;
19596  +%mend MakeCorrelation;
19597  +
19598  +
19599  +%macro MakeCorrelationDistance(indata=,
19600  +                               outdata=,
19601  +                               rsquare = N
19602  +                               );
19603  +    data corr_tmp;
19604  +        set &indata;
19605  +        if _N_ = 1 then do;
19606  +           output;
19607  +           stop;
19608  +         end;
19609  +    run;
19610  +    %if &outdata ne  %then %let  _outdata = &outdata;
19611  +    %else %let _outdata = &indata;
19612  +
19613  +    data &_outdata;
19614  +         set &indata;
19615  +
19616  +         %let dsid = %sysfunc(open(work.corr_tmp));
19617  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19618  +          %do i = 2 %to &nvar;
19619  +              %let _name = %sysfunc(varname(&dsid, &i));
19620  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19621  +              %else  %let _name_md = &_name;
19622  +              &_name = 1- &_name_md;
19623  +          %end;
19624  +      %let dsid= %sysfunc(close(&dsid));
19625  +      run;
19626  +      proc datasets lib = work nolist;
19627  +           delete corr_tmp;
19628  +      run;
19629  +      quit;
19630  +  %mend MakeCorrelationDistance;
19631  +
19632  +
19633  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19634  +                                   rsquare = N
19635  +                                   );
19636  +    data corr_tmp;
19637  +        set &indata;
19638  +    run;
19639  +    proc sql noprint;
19640  +           update &indata
19641  +           set
19642  +     %let dsid = %sysfunc(open(work.corr_tmp));
19643  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19644  +          %do i = 4 %to &nvar;
19645  +          %let _name = %sysfunc(varname(&dsid, &i));
19646  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19647  +            %else  %let _name_md = &_name;
19648  +            %if &i < &nvar %then %do;
19649  +               &_name = 1- &_name_md ,
19650  +            %end;
19651  +            %else %do;
19652  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19653  +            %end;
19654  +          %end;
19655  +      %let dsid= %sysfunc(close(&dsid));
19656  +
19657  +      select * from &indata;
19658  +      run;
19659  +     data &indata( drop = _NCL_);
19660  +           set &indata;
19661  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19662  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19663  +     run;
19664  +     data &indata(DROP = _NCL_);
19665  +           set &indata;
19666  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19667  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19668  +           rename _NAME_ = _VAR_;
19669  +     run;
19670  +     proc datasets lib = work nolist;
19671  +           delete corr_tmp;
19672  +     run;
19673  +     quit;
19674  + %mend UpdateOutStatCorrToDistance;
19675  +
19676  +
19677  +%macro HierClusWithCorr(indata= ,
19678  +                        ncluster=,
19679  +                        method = Ward,
19680  +                        outtree = _outtree,
19681  +                        idvar =_VAR_,
19682  +                        outdata=,
19683  +                        rescore = N,
19684  +                        newncluster=
19685  +                        );
19686  +      %global &newncluster;
19687  +      %if &rescore ne Y %then %do;
19688  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19689  +                   method=&method outtree=&outtree noprint;
19690  +           id &idvar;
19691  +      run;
19692  +      %end;
19693  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19694  +      run;
19695  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19696  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19697  +      run;
19698  +      data _outcontent;
19699  +          set _outcontent;
19700  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19701  +          index = 1;
19702  +          rename NAME = _NAME_;
19703  +      run;
19704  +      proc sort data=_outcontent;
19705  +          by _NAME_;
19706  +      run;
19707  +      proc sort data =&outdata;
19708  +           by _NAME_;
19709  +      run;
19710  +      data &outdata(drop=index);
19711  +          merge &outdata _outcontent;
19712  +          by _NAME_;
19713  +          if index = . then delete;
19714  +      run;
19715  +      /*-----------------------------------------------------------*/
19716  +      data &outdata;
19717  +           length CLUSNAME $16;
19718  +           set &outdata;
19719  +           if CLUSTER > &ncluster then delete;
19720  +           CLUSNAME='GC'||strip(CLUSTER);
19721  +           *label CLUSNAME = "Cluster Name";
19722  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19723  +           rename _NAME_ = VARIABLE ;
19724  +           *label _NAME_ = "Variable";
19725  +           *label CLUSTER = "Cluster";
19726  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19727  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19728  +      run;
19729  +      proc sort data=&outdata out=&outdata;
19730  +           by CLUSTER;
19731  +      run;
19732  +      proc means data =&outdata noprint;
19733  +           output out=_meanout;
19734  +      run;
19735  +      data _null_;
19736  +            set _meanout;
19737  +            if strip(_STAT_) eq 'MAX' then do;
19738  +            call symput("&newncluster", CLUSTER);
19739  +            stop;
19740  +            end;
19741  +      run;
19742  +
19743  +      proc datasets lib = work nolist;
19744  +           delete _outcontent _meanout;
19745  +      run;
19746  +      quit;
19747  +%mend  HierClusWithCorr;
19748  +
19749  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19750  +
19751  +     data _tmpindata;
19752  +          set &indata;
19753  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19754  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19755  +          if _TYPE_ = 'STD' then _NAME_='STD';
19756  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19757  +          DROP _TYPE_ _NCL_;
19758  +     run;
19759  +
19760  +     filename _file_  "&fileRef";
19761  +
19762  +     data _null_;
19763  +        FILE _file_ MOD;
19764  +        put ' ';
19765  +        put "/*-------------------------------------------------*/";
19766  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19767  +        put "/*-------------------------------------------------*/";
19768  +        put ' ';
19769  +        %let dsid = %sysfunc(open(work._tmpindata));
19770  +
19771  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19772  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19773  +        %let k = 1;
19774  +        %do %while(^%sysfunc(fetch(&dsid)));
19775  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19776  +               %if &k > 2 %then %do;
19777  +                %let cn = %eval(&k-2);
19778  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19779  +                %end;
19780  +                %let k = %eval(&k+1);
19781  +
19782  +        %end;
19783  +        %let rc = %sysfunc(rewind(&dsid));
19784  +
19785  +        %do j= 2 %to &nvar;
19786  +            %let _varname = %sysfunc(varname(&dsid, &j));
19787  +            %do %while(^%sysfunc(fetch(&dsid)));
19788  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19789  +                %if &_name = MEAN %then
19790  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19791  +                %else %if &_name = STD %then
19792  +                %let _std = %sysfunc(getvarn(&dsid, &j));
19793  +                %else %do;
19794  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19795  +                      %let abscoeff = %sysfunc(abs(&coeff));
19796  +                          %if &abscoeff >  0 %then %do;
19797  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19798  +                           %end;
19799  +                 %end;
19800  +             %end;
19801  +             %let rc = %sysfunc(rewind(&dsid));
19802  +         %end;
19803  +
19804  +        %let dsid= %sysfunc(close(&dsid));
19805  +
19806  +     run;
19807  +
19808  +     filename _file_;
19809  +     proc datasets lib = work nolist;
19810  +           delete _tmpindata;
19811  +     run;
19812  +     quit;
19813  +%mend CreateScoreCode2;
19814  +
19815  +
19816  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19817  +
19818  +     /*--- Build Code to Modify Metadata ---*/
19819  +     filename X "&deltacodefile";
19820  +     data _null_;
19821  +        FILE X;
19822  +        set &groupds end=eof;
19823  +        if _N_=1 then do;
19824  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19825  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19826  +           %end;
19827  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19828  +           put "if upcase(strip(NAME)) in (";
19829  +        end;
19830  +        if Strip(upcase(Selected)) eq 'YES' then do;
19831  +           string = '"'!!trim(left(VARIABLE))!!'"';
19832  +           put string;
19833  +        end;
19834  +        if eof then do;
19835  +           put ') then ROLE="INPUT";';
19836  +           put 'else ROLE="REJECTED";';
19837  +           put 'end;';
19838  +
19839  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19840  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19841  +           %end;
19842  +        end;
19843  +     run;
19844  +     quit;
19845  +
19846  +     filename X;
19847  +     quit;
19848  +%mend MakeDeltaCode2;
19849  +
19850  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19851  +  %global &ngc;
19852  +  data _null_;
19853  +  %if &indata ne %then %do;
19854  +      %let dsid = %sysfunc(open(&indata));
19855  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19856  +      %let dsid = %sysfunc(close(&dsid));
19857  +  %end;
19858  +  %else %do;
19859  +       %let nvar = %eval(&ninput+&ndummy); ;
19860  +  %end;
19861  +  %let numgc = %eval(&nvar/&div+2);
19862  +  %let &ngc = &numgc;
19863  +   run;
19864  +  quit;
19865  +%mend getInitialGClusterNumber;
19866  +
19867  +
19868  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19869  +data &outlink(drop = Selected);
19870  +     set &indata;
19871  +     LINKID = _N_;
19872  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19873  +run;
19874  +data &outnode(keep=NODEID TYPE LABEL);
19875  +    set &indata;
19876  +    length TYPE $16;
19877  +    rename VARIABLE = NODEID;
19878  +    *label  CLUSNAME="Node ID";
19879  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19880  +    TYPE = "VARIABLE";
19881  +    *label TYPE = "Node Type";
19882  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19883  +    run;
19884  +data _tmp(keep=NODEID TYPE LABEL);
19885  +    set &indata;
19886  +    length TYPE $16;
19887  +    rename CLUSNAME = NODEID;
19888  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19889  +    TYPE = "GCLUSTER";
19890  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19891  +    run;
19892  +proc sort data=_tmp;
19893  +    by NODEID;
19894  +run;
19895  +data _tmp;
19896  +    set _tmp; by NODEID;
19897  +    if first.NODEID then output;
19898  +run;
19899  +proc sort data=&outnode;
19900  +    by NODEID;
19901  +run;
19902  +data  &outnode;
19903  +    set _tmp &outnode;
19904  +run;
19905  +proc datasets lib = work nolist;
19906  +     delete _tmp;
19907  +run;
19908  +quit;
19909  +%mend MakeGobalConstellData;
19910  +
19911  +/* Make contellation plot data among GCLUSTERS */
19912  +
19913  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19914  +
19915  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19916  +     set &indata;
19917  +     LINKID = _N_;
19918  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19919  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19920  +     end;
19921  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19922  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19923  +     end;
19924  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19925  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19926  +    end;
19927  +run;
19928  +
19929  +data _tmp_outrsquare;
19930  +        set &inoutrsq;
19931  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19932  +run;
19933  +
19934  +proc freq data =_tmp_outrsquare noprint;
19935  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19936  +run;
19937  +
19938  +data &outnode(keep=_NAME_ TYPE LABEL);
19939  +    set &outlink;
19940  +    length TYPE $16;
19941  +    length LABEL $100;
19942  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19943  +
19944  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19945  +    TYPE = "GCLUSTER";
19946  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19947  +    end;
19948  +    else do;
19949  +    TYPE= "ROOT";
19950  +    LABEL= _NAME_;
19951  +    end;
19952  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19953  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19954  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19955  +    run;
19956  +
19957  +proc sort data=&outnode;
19958  +     by _NAME_;
19959  +proc sort data=_tmp_GCLUSFREQ;
19960  +     by _NAME_;
19961  +run;
19962  +
19963  +data  &outnode;
19964  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19965  +     if COUNT=. then COUNT=1;
19966  +run;
19967  +
19968  +proc datasets lib = work nolist;
19969  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19970  +run;
19971  +
19972  +quit;
19973  +%Mend MakeGClusterConstData;
19974  +
19975  +
19976  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19977  +
19978  +    data _gscoretmpds;
19979  +          set &indata;
19980  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19981  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19982  +          if _TYPE_ = 'STD' then _NAME_='STD';
19983  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19984  +          DROP _TYPE_ _NCL_;
19985  +     run;
19986  +
19987  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19988  +        GCluster Component &globalclusid ------ */
19989  +
19990  +    filename _file_  "&fileref";
19991  +
19992  +    data _null_;
19993  +        %if &globalclusid eq 1 %then %do;
19994  +          FILE _file_;
19995  +        %end;
19996  +        %else %do;
19997  +          FILE _file_ MOD;
19998  +        %end;
19999  +
20000  +        %let dsid = %sysfunc(open(work._gscoretmpds));
20001  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20002  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20003  +
20004  +        %let k = 1;
20005  +        %do %while(^%sysfunc(fetch(&dsid)));
20006  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20007  +                %if &k > 2 %then %do;
20008  +                put "&_name = 0 ; ";
20009  +                %end;
20010  +                %let k = %eval(&k+1);
20011  +        %end;
20012  +
20013  +        %let rc = %sysfunc(rewind(&dsid));
20014  +        %do i= 2 %to &nvar;
20015  +            %let _varname =  %sysfunc(varname(&dsid, &i));
20016  +            %do %while(^%sysfunc(fetch(&dsid)));
20017  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20018  +                %if &_name = MEAN %then
20019  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20020  +                %else %if &_name = STD %then
20021  +                %let _std = %sysfunc(getvarn(&dsid, &i));
20022  +                %else %do;
20023  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20024  +                      %let abscoeff = %sysfunc(abs(&coeff));
20025  +                          %if &abscoeff >  0 %then %do;
20026  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20027  +                           %end;
20028  +                 %end;
20029  +             %end;
20030  +             %let rc = %sysfunc(rewind(&dsid));
20031  +
20032  +         %end;
20033  +
20034  +        %let dsid= %sysfunc(close(&dsid));
20035  +       run;
20036  +
20037  +
20038  +       proc datasets lib=work nolist;
20039  +            delete _gscoretmpds;
20040  +       run;
20041  +      quit;
20042  +
20043  +%mend CreateGClusterScoreCode;
20044  +
20045  +
20046  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
20047  +
20048  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
20049  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
20050  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
20051  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
20052  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
20053  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
20054  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
20055  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
20056  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
20057  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
20058  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
20059  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
20060  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
20061  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
20062  +
20063  +   filename gsfile "&gscorecode";
20064  +
20065  +   data &EM_USER_GSCORE;
20066  +             set &indata;
20067  +             %include  gsfile;
20068  +        keep
20069  +        %do i=1 %to &ngcluster;
20070  +         %let gcvarname = GC&i;
20071  +         &gcvarname
20072  +        %end;
20073  +     ;
20074  +   run;
20075  +
20076  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
20077  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
20078  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
20079  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
20080  +    noprint  ;
20081  +     var
20082  +       %do i=1 %to &ngcluster;
20083  +         %let gcvarname = GC&i;
20084  +         &gcvarname
20085  +        %end;
20086  +   ;
20087  +   run;
20088  +
20089  +
20090  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
20091  +   data &EM_USER_GSCORECORRPLOT ;
20092  +        set &EM_USER_GSCORECORRPLOT;
20093  +        rename _X_ = X;
20094  +        rename _Y_ = Y;
20095  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20096  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20097  +   run;
20098  +
20099  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
20100  +
20101  +   data &EM_USER_GSCORETREE;
20102  +        length _NAME_ $32;
20103  +        length _LABEL_ $100;
20104  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
20105  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
20106  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
20107  +        end;else do;
20108  +         _LABEL_ = _NAME_;
20109  +        end;
20110  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20111  +
20112  +   run;
20113  +
20114  +   quit;
20115  +
20116  +%mend MakeGClusterCorrelation;
20117  +
20118  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
20119  +%macro score;
20120  +
20121  +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
20122  +%include temp;
20123  +filename temp;
20124  +
20125  +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
20126  +
20127  +data _null_;
20128  +         set &EM_USER_VARCLUSMETA;
20129  +         if _N_=1 then
20130  +         call symput('_trainnum', TrainNum);
20131  +         call symput('_exportedcomp', ExportedComp);
20132  +         call symput('_hidevariable', HideVariable);
20133  +         call symput('_newTrain', NewTrain);
20134  +run;
20135  +
20136  +%if &_newTrain = N %then %do;
20137  +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
20138  +        %else %let _exportedCompChanged = Y;
20139  +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
20140  +        %else  %let _hideVariableChanged = Y;
20141  +%end;
20142  +%else %do;
20143  +        %let _exportedCompChanged = Y;
20144  +        %let _hideVariableChanged = Y;
20145  +%end;
20146  +
20147  +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
20148  +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
20149  +     %include temp;
20150  +     filename temp;
20151  +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
20152  +%end;
20153  +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
20154  +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
20155  +     %include temp;
20156  +     filename temp;
20157  +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
20158  +%end;
20159  +
20160  +  /* store  current property values */
20161  + data &EM_USER_VARCLUSMETA;
20162  +       set &EM_USER_VARCLUSMETA;
20163  +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
20164  +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
20165  + run;
20166  +
20167  +%mend score;
20168  +
20169  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
20170  +
20171  +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
20172  +     proc sort data =&indata;
20173  +              by Cluster RsqRatio Type;
20174  +     run;
20175  +     /*----------------------------------------------------------------------
20176  +      The Type variabe is used becuse the variable need to be selected
20177  +        instead of Cluster component when only one variable is in the cluster
20178  +     +-----------------------------------------------------------------------*/
20179  +
20180  +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
20181  +         data &indata;
20182  +              set &indata; by cluster;
20183  +              if first.Cluster then Selected = 'YES';
20184  +              else Selected = 'NO';
20185  +         run;
20186  +         quit;
20187  +    %end;
20188  +    %else %do;
20189  +         data &indata(drop = _var _varchange);
20190  +              set &indata; retain _var 0; by Cluster;
20191  +             if first.Cluster then  _varchange = 0;
20192  +                 else _varchange =1;
20193  +             if _var ne _varchange then  Selected  = 'YES';
20194  +             else Selected = 'NO';
20195  +             if last.cluster then  _var = 0;
20196  +             else _var = _varchange;
20197  +         run;
20198  +         quit;
20199  +    %end;
20200  +%mend ChangeVariableSelectionFlag;
20201  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
20202  +
20203  +%macro score1(ExportedCompChanged=,
20204  +              HideVariableChanged=);
20205  +
20206  +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
20207  +   %if &ExportedCompChanged = Y %then %do;
20208  +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
20209  +   %end;
20210  +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
20211  +
20212  +%mend score1;
20213  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13Apr2022:19:29:35,
      Create Time=13Apr2022:19:29:09
 
NOTE: 42 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20214   *------------------------------------------------------------*;
20215   * End SCORE: VarClus;
20216   *------------------------------------------------------------*;
20217
 
20218   filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas";
20219   *------------------------------------------------------------*;
20220   * VarClus: Scoring DATA data;
20221   *------------------------------------------------------------*;
20222   data EMWS4.VarClus_TRAIN
20223   / view=EMWS4.VarClus_TRAIN
20224   ;
20225   set EMWS4.Part_TRAIN
20226   ;
20227   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas.
20228  +*** Begin Class Look-up, Standardization, Replacement ;
20229  +
20230  +*** Generate dummy variables for BOTHPAYM ;
20231  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
20232  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
20233  +if missing( BOTHPAYM ) then do;
20234  +   BOTHPAYM0 = .;
20235  +   BOTHPAYM1 = .;
20236  +end;
20237  +else do;
20238  +   length _dm4 $ 4; drop _dm4 ;
20239  +   _dm4 = put( BOTHPAYM , $4. );
20240  +   %DMNORMIP( _dm4 )
20241  +   if _dm4 = '0'  then do;
20242  +      BOTHPAYM0 = 1;
20243  +      BOTHPAYM1 = 0;
20244  +   end;
20245  +   else if _dm4 = '1'  then do;
20246  +      BOTHPAYM0 = 0;
20247  +      BOTHPAYM1 = 1;
20248  +   end;
20249  +   else do;
20250  +      delete;
20251  +   end;
20252  +end;
20253  +
20254  +*** Generate dummy variables for CCPAYM ;
20255  +label CCPAYM0 = 'CCPAYM=0' ;
20256  +label CCPAYM1 = 'CCPAYM=1' ;
20257  +if missing( CCPAYM ) then do;
20258  +   CCPAYM0 = .;
20259  +   CCPAYM1 = .;
20260  +end;
20261  +else do;
20262  +   length _dm4 $ 4; drop _dm4 ;
20263  +   _dm4 = put( CCPAYM , $4. );
20264  +   %DMNORMIP( _dm4 )
20265  +   if _dm4 = '0'  then do;
20266  +      CCPAYM0 = 1;
20267  +      CCPAYM1 = 0;
20268  +   end;
20269  +   else if _dm4 = '1'  then do;
20270  +      CCPAYM0 = 0;
20271  +      CCPAYM1 = 1;
20272  +   end;
20273  +   else do;
20274  +      delete;
20275  +   end;
20276  +end;
20277  +
20278  +*** Generate dummy variables for PCPAYM ;
20279  +label PCPAYM0 = 'PCPAYM=0' ;
20280  +label PCPAYM1 = 'PCPAYM=1' ;
20281  +if missing( PCPAYM ) then do;
20282  +   PCPAYM0 = .;
20283  +   PCPAYM1 = .;
20284  +end;
20285  +else do;
20286  +   length _dm4 $ 4; drop _dm4 ;
20287  +   _dm4 = put( PCPAYM , $4. );
20288  +   %DMNORMIP( _dm4 )
20289  +   if _dm4 = '0'  then do;
20290  +      PCPAYM0 = 1;
20291  +      PCPAYM1 = 0;
20292  +   end;
20293  +   else if _dm4 = '1'  then do;
20294  +      PCPAYM0 = 0;
20295  +      PCPAYM1 = 1;
20296  +   end;
20297  +   else do;
20298  +      delete;
20299  +   end;
20300  +end;
20301  +
20302  +*** Generate dummy variables for METHPAYM ;
20303  +label METHPAYMCC = 'METHPAYM=CC' ;
20304  +label METHPAYMCK = 'METHPAYM=CK' ;
20305  +label METHPAYMDK = 'METHPAYM=DK' ;
20306  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
20307  +*** encoding is sparse, initialize to zero;
20308  +METHPAYMCC = 0;
20309  +METHPAYMCK = 0;
20310  +METHPAYMDK = 0;
20311  +METHPAYMXBOT = 0;
20312  +if missing( METHPAYM ) then do;
20313  +   METHPAYMCC = .;
20314  +   METHPAYMCK = .;
20315  +   METHPAYMDK = .;
20316  +   METHPAYMXBOT = .;
20317  +end;
20318  +else do;
20319  +   length _dm4 $ 4; drop _dm4 ;
20320  +   _dm4 = put( METHPAYM , $4. );
20321  +   %DMNORMIP( _dm4 )
20322  +   if _dm4 = 'CC'  then do;
20323  +      METHPAYMCC = 1;
20324  +   end;
20325  +   else if _dm4 = 'CK'  then do;
20326  +      METHPAYMCK = 1;
20327  +   end;
20328  +   else if _dm4 = 'XBOT'  then do;
20329  +      METHPAYMXBOT = 1;
20330  +   end;
20331  +   else if _dm4 = 'DK'  then do;
20332  +      METHPAYMDK = 1;
20333  +   end;
20334  +   else do;
20335  +      delete;
20336  +   end;
20337  +end;
20338  +
20339  +*** End Class Look-up, Standardization, Replacement ;
20340  +
20341  +
20342  +/*-------------------------------------------------*/
20343  +/* Varclus Score Code Begins*/
20344  +/*-------------------------------------------------*/
20345  +
20346  +Clus1 = 0 ; /*---Cluster Component 1------ */
20347  +Clus2 = 0 ; /*---Cluster Component 2------ */
20348  +Clus3 = 0 ; /*---Cluster Component 3------ */
20349  +Clus4 = 0 ; /*---Cluster Component 4------ */
20350  +Clus5 = 0 ; /*---Cluster Component 5------ */
20351  +Clus6 = 0 ; /*---Cluster Component 6------ */
20352  +Clus7 = 0 ; /*---Cluster Component 7------ */
20353  +Clus8 = 0 ; /*---Cluster Component 8------ */
20354  +Clus9 = 0 ; /*---Cluster Component 9------ */
20355  +Clus10 = 0 ; /*---Cluster Component 10------ */
20356  +Clus11 = 0 ; /*---Cluster Component 11------ */
20357  +Clus12 = 0 ; /*---Cluster Component 12------ */
20358  +Clus13 = 0 ; /*---Cluster Component 13------ */
20359  +Clus14 = 0 ; /*---Cluster Component 14------ */
20360  +Clus15 = 0 ; /*---Cluster Component 15------ */
20361  +Clus16 = 0 ; /*---Cluster Component 16------ */
20362  +Clus17 = 0 ; /*---Cluster Component 17------ */
20363  +Clus18 = 0 ; /*---Cluster Component 18------ */
20364  +Clus19 = 0 ; /*---Cluster Component 19------ */
20365  +Clus20 = 0 ; /*---Cluster Component 20------ */
20366  +Clus21 = 0 ; /*---Cluster Component 21------ */
20367  +Clus22 = 0 ; /*---Cluster Component 22------ */
20368  +Clus23 = 0 ; /*---Cluster Component 23------ */
20369  +Clus24 = 0 ; /*---Cluster Component 24------ */
20370  +Clus25 = 0 ; /*---Cluster Component 25------ */
20371  +Clus26 = 0 ; /*---Cluster Component 26------ */
20372  +Clus27 = 0 ; /*---Cluster Component 27------ */
20373  +Clus28 = 0 ; /*---Cluster Component 28------ */
20374  +Clus29 = 0 ; /*---Cluster Component 29------ */
20375  +Clus30 = 0 ; /*---Cluster Component 30------ */
20376  +Clus31 = 0 ; /*---Cluster Component 31------ */
20377  +Clus32 = 0 ; /*---Cluster Component 32------ */
20378  +Clus33 = 0 ; /*---Cluster Component 33------ */
20379  +Clus34 = 0 ; /*---Cluster Component 34------ */
20380  +Clus35 = 0 ; /*---Cluster Component 35------ */
20381  +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
20382  +Clus9 = Clus9+0.32502227037692 * (BUYPROP - 0.18928931964407)/0.25656954904129;
20383  +Clus32 = Clus32+0.27053392066665 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
20384  +Clus7 = Clus7+0.36779194981722 * (DAYLAST - 1182.17608189855)/1226.0780195912;
20385  +Clus29 = Clus29+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
20386  +Clus29 = Clus29+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
20387  +Clus29 = Clus29+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
20388  +Clus29 = Clus29+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
20389  +Clus29 = Clus29+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
20390  +Clus32 = Clus32+0.17644386618702 * (DEPT06 - 0.85925236544129)/1.98131768775175;
20391  +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
20392  +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
20393  +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
20394  +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
20395  +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
20396  +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
20397  +Clus32 = Clus32+0.21094125773847 * (DEPT13 - 1.30395532805956)/2.58742913517547;
20398  +Clus1 = Clus1+0.14612398962451 * (DEPT14 - 0.83527221963704)/2.18699342328426;
20399  +Clus1 = Clus1+0.09702913619723 * (DEPT15 - 0.28949899177912)/1.23869079532202;
20400  +Clus1 = Clus1+0.09670854836259 * (DEPT16 - 0.22491081123002)/1.0272304883634;
20401  +Clus1 = Clus1+0.08864693290338 * (DEPT17 - 0.19466418489219)/0.960753111967;
20402  +Clus34 = Clus34+0.68513998203611 * (DEPT18 - 0.1317512021095)/0.70116887678934;
20403  +Clus34 = Clus34+0.68513998203611 * (DEPT19 - 0.07324336900884)/0.59281735227563;
20404  +Clus32 = Clus32+0.0549670760145 * (DEPT20 - 0.02956413835892)/0.31025698407933;
20405  +Clus33 = Clus33+1 * (DEPT21 - 0.01821002016441)/0.24509272697267;
20406  +Clus32 = Clus32+0.23307614189926 * (DEPT22 - 2.12771831859779)/3.55134640550257;
20407  +Clus32 = Clus32+0.20251555040293 * (DEPT23 - 2.14223669923995)/3.81941288304535;
20408  +Clus32 = Clus32+0.17413334206296 * (DEPT24 - 0.64039087947882)/1.70711269742472;
20409  +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
20410  +Clus9 = Clus9+0.18580207423567 * (DEPT26 - 0.19075539010392)/0.91270742425277;
20411  +Clus32 = Clus32+0.16412176293701 * (DEPT27 - 0.58712579494338)/1.55259848403997;
20412  +Clus4 = Clus4+0.41745197007519 * (DOLINDEA - 47.8585866898046)/37.591191668842;
20413  +Clus1 = Clus1+0.22176651741164 * (DOLINDET - 197.869031487513)/314.244548218948;
20414  +Clus3 = Clus3+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
20415  +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969907)/18.9572343997303;
20416  +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
20417  +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
20418  +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
20419  +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
20420  +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
20421  +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
20422  +Clus27 = Clus27+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
20423  +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
20424  +Clus10 = Clus10+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
20425  +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974562)/20.8177653006881;
20426  +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
20427  +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
20428  +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
20429  +Clus8 = Clus8+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
20430  +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166278)/31.0104071776129;
20431  +Clus3 = Clus3+0.44436827521592 * (DOLLARQ17 - 5.57017403443461)/26.1415799982751;
20432  +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
20433  +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
20434  +Clus9 = Clus9+0.37631589198989 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
20435  +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.74636513106872)/24.2680885720031;
20436  +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
20437  +Clus4 = Clus4+0.41538876032442 * (DOLNETDA - 45.411597554134)/36.1502695431938;
20438  +Clus1 = Clus1+0.22085514615169 * (DOLNETDT - 189.18095548317)/303.615750735173;
20439  +Clus1 = Clus1+0.19970567328905 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
20440  +Clus7 = Clus7+0.36779707552659 * (MONLAST - 38.7579959671164)/40.2783526824403;
20441  +Clus35 = Clus35+1 * (TENURE - 83.4682798200713)/60.0499642836247;
20442  +Clus24 = Clus24+0.53431022831305 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
20443  +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
20444  +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
20445  +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
20446  +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
20447  +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
20448  +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
20449  +Clus27 = Clus27+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
20450  +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
20451  +Clus10 = Clus10+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
20452  +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
20453  +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
20454  +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
20455  +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
20456  +Clus8 = Clus8+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
20457  +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
20458  +Clus3 = Clus3+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
20459  +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
20460  +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
20461  +Clus9 = Clus9+0.40129080124664 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
20462  +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
20463  +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
20464  +Clus1 = Clus1+0.21191459192951 * (UNITSIDD - 10.9602916085)/17.1055734908767;
20465  +Clus4 = Clus4+0.30018376965081 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
20466  +Clus30 = Clus30+1 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
20467  +Clus5 = Clus5+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
20468  +Clus5 = Clus5+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
20469  +Clus2 = Clus2+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
20470  +Clus2 = Clus2+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
20471  +Clus28 = Clus28+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
20472  +Clus28 = Clus28+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
20473  +Clus2 = Clus2+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
20474  +Clus28 = Clus28+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
20475  +Clus7 = Clus7+0.32661485207285 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
20476  +Clus5 = Clus5+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
NOTE: %INCLUDE (level 1) ending.
20477   run;
 
NOTE: DATA STEP view saved on file EMWS4.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20478   quit;
20479   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20480   filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas";
20481   *------------------------------------------------------------*;
20482   * VarClus: Scoring VALIDATE data;
20483   *------------------------------------------------------------*;
20484   data EMWS4.VarClus_VALIDATE
20485   / view=EMWS4.VarClus_VALIDATE
20486   ;
20487   set EMWS4.Part_VALIDATE
20488   ;
20489   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas.
20490  +*** Begin Class Look-up, Standardization, Replacement ;
20491  +
20492  +*** Generate dummy variables for BOTHPAYM ;
20493  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
20494  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
20495  +if missing( BOTHPAYM ) then do;
20496  +   BOTHPAYM0 = .;
20497  +   BOTHPAYM1 = .;
20498  +end;
20499  +else do;
20500  +   length _dm4 $ 4; drop _dm4 ;
20501  +   _dm4 = put( BOTHPAYM , $4. );
20502  +   %DMNORMIP( _dm4 )
20503  +   if _dm4 = '0'  then do;
20504  +      BOTHPAYM0 = 1;
20505  +      BOTHPAYM1 = 0;
20506  +   end;
20507  +   else if _dm4 = '1'  then do;
20508  +      BOTHPAYM0 = 0;
20509  +      BOTHPAYM1 = 1;
20510  +   end;
20511  +   else do;
20512  +      delete;
20513  +   end;
20514  +end;
20515  +
20516  +*** Generate dummy variables for CCPAYM ;
20517  +label CCPAYM0 = 'CCPAYM=0' ;
20518  +label CCPAYM1 = 'CCPAYM=1' ;
20519  +if missing( CCPAYM ) then do;
20520  +   CCPAYM0 = .;
20521  +   CCPAYM1 = .;
20522  +end;
20523  +else do;
20524  +   length _dm4 $ 4; drop _dm4 ;
20525  +   _dm4 = put( CCPAYM , $4. );
20526  +   %DMNORMIP( _dm4 )
20527  +   if _dm4 = '0'  then do;
20528  +      CCPAYM0 = 1;
20529  +      CCPAYM1 = 0;
20530  +   end;
20531  +   else if _dm4 = '1'  then do;
20532  +      CCPAYM0 = 0;
20533  +      CCPAYM1 = 1;
20534  +   end;
20535  +   else do;
20536  +      delete;
20537  +   end;
20538  +end;
20539  +
20540  +*** Generate dummy variables for PCPAYM ;
20541  +label PCPAYM0 = 'PCPAYM=0' ;
20542  +label PCPAYM1 = 'PCPAYM=1' ;
20543  +if missing( PCPAYM ) then do;
20544  +   PCPAYM0 = .;
20545  +   PCPAYM1 = .;
20546  +end;
20547  +else do;
20548  +   length _dm4 $ 4; drop _dm4 ;
20549  +   _dm4 = put( PCPAYM , $4. );
20550  +   %DMNORMIP( _dm4 )
20551  +   if _dm4 = '0'  then do;
20552  +      PCPAYM0 = 1;
20553  +      PCPAYM1 = 0;
20554  +   end;
20555  +   else if _dm4 = '1'  then do;
20556  +      PCPAYM0 = 0;
20557  +      PCPAYM1 = 1;
20558  +   end;
20559  +   else do;
20560  +      delete;
20561  +   end;
20562  +end;
20563  +
20564  +*** Generate dummy variables for METHPAYM ;
20565  +label METHPAYMCC = 'METHPAYM=CC' ;
20566  +label METHPAYMCK = 'METHPAYM=CK' ;
20567  +label METHPAYMDK = 'METHPAYM=DK' ;
20568  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
20569  +*** encoding is sparse, initialize to zero;
20570  +METHPAYMCC = 0;
20571  +METHPAYMCK = 0;
20572  +METHPAYMDK = 0;
20573  +METHPAYMXBOT = 0;
20574  +if missing( METHPAYM ) then do;
20575  +   METHPAYMCC = .;
20576  +   METHPAYMCK = .;
20577  +   METHPAYMDK = .;
20578  +   METHPAYMXBOT = .;
20579  +end;
20580  +else do;
20581  +   length _dm4 $ 4; drop _dm4 ;
20582  +   _dm4 = put( METHPAYM , $4. );
20583  +   %DMNORMIP( _dm4 )
20584  +   if _dm4 = 'CC'  then do;
20585  +      METHPAYMCC = 1;
20586  +   end;
20587  +   else if _dm4 = 'CK'  then do;
20588  +      METHPAYMCK = 1;
20589  +   end;
20590  +   else if _dm4 = 'XBOT'  then do;
20591  +      METHPAYMXBOT = 1;
20592  +   end;
20593  +   else if _dm4 = 'DK'  then do;
20594  +      METHPAYMDK = 1;
20595  +   end;
20596  +   else do;
20597  +      delete;
20598  +   end;
20599  +end;
20600  +
20601  +*** End Class Look-up, Standardization, Replacement ;
20602  +
20603  +
20604  +/*-------------------------------------------------*/
20605  +/* Varclus Score Code Begins*/
20606  +/*-------------------------------------------------*/
20607  +
20608  +Clus1 = 0 ; /*---Cluster Component 1------ */
20609  +Clus2 = 0 ; /*---Cluster Component 2------ */
20610  +Clus3 = 0 ; /*---Cluster Component 3------ */
20611  +Clus4 = 0 ; /*---Cluster Component 4------ */
20612  +Clus5 = 0 ; /*---Cluster Component 5------ */
20613  +Clus6 = 0 ; /*---Cluster Component 6------ */
20614  +Clus7 = 0 ; /*---Cluster Component 7------ */
20615  +Clus8 = 0 ; /*---Cluster Component 8------ */
20616  +Clus9 = 0 ; /*---Cluster Component 9------ */
20617  +Clus10 = 0 ; /*---Cluster Component 10------ */
20618  +Clus11 = 0 ; /*---Cluster Component 11------ */
20619  +Clus12 = 0 ; /*---Cluster Component 12------ */
20620  +Clus13 = 0 ; /*---Cluster Component 13------ */
20621  +Clus14 = 0 ; /*---Cluster Component 14------ */
20622  +Clus15 = 0 ; /*---Cluster Component 15------ */
20623  +Clus16 = 0 ; /*---Cluster Component 16------ */
20624  +Clus17 = 0 ; /*---Cluster Component 17------ */
20625  +Clus18 = 0 ; /*---Cluster Component 18------ */
20626  +Clus19 = 0 ; /*---Cluster Component 19------ */
20627  +Clus20 = 0 ; /*---Cluster Component 20------ */
20628  +Clus21 = 0 ; /*---Cluster Component 21------ */
20629  +Clus22 = 0 ; /*---Cluster Component 22------ */
20630  +Clus23 = 0 ; /*---Cluster Component 23------ */
20631  +Clus24 = 0 ; /*---Cluster Component 24------ */
20632  +Clus25 = 0 ; /*---Cluster Component 25------ */
20633  +Clus26 = 0 ; /*---Cluster Component 26------ */
20634  +Clus27 = 0 ; /*---Cluster Component 27------ */
20635  +Clus28 = 0 ; /*---Cluster Component 28------ */
20636  +Clus29 = 0 ; /*---Cluster Component 29------ */
20637  +Clus30 = 0 ; /*---Cluster Component 30------ */
20638  +Clus31 = 0 ; /*---Cluster Component 31------ */
20639  +Clus32 = 0 ; /*---Cluster Component 32------ */
20640  +Clus33 = 0 ; /*---Cluster Component 33------ */
20641  +Clus34 = 0 ; /*---Cluster Component 34------ */
20642  +Clus35 = 0 ; /*---Cluster Component 35------ */
20643  +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
20644  +Clus9 = Clus9+0.32502227037692 * (BUYPROP - 0.18928931964407)/0.25656954904129;
20645  +Clus32 = Clus32+0.27053392066665 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
20646  +Clus7 = Clus7+0.36779194981722 * (DAYLAST - 1182.17608189855)/1226.0780195912;
20647  +Clus29 = Clus29+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
20648  +Clus29 = Clus29+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
20649  +Clus29 = Clus29+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
20650  +Clus29 = Clus29+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
20651  +Clus29 = Clus29+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
20652  +Clus32 = Clus32+0.17644386618702 * (DEPT06 - 0.85925236544129)/1.98131768775175;
20653  +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
20654  +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
20655  +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
20656  +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
20657  +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
20658  +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
20659  +Clus32 = Clus32+0.21094125773847 * (DEPT13 - 1.30395532805956)/2.58742913517547;
20660  +Clus1 = Clus1+0.14612398962451 * (DEPT14 - 0.83527221963704)/2.18699342328426;
20661  +Clus1 = Clus1+0.09702913619723 * (DEPT15 - 0.28949899177912)/1.23869079532202;
20662  +Clus1 = Clus1+0.09670854836259 * (DEPT16 - 0.22491081123002)/1.0272304883634;
20663  +Clus1 = Clus1+0.08864693290338 * (DEPT17 - 0.19466418489219)/0.960753111967;
20664  +Clus34 = Clus34+0.68513998203611 * (DEPT18 - 0.1317512021095)/0.70116887678934;
20665  +Clus34 = Clus34+0.68513998203611 * (DEPT19 - 0.07324336900884)/0.59281735227563;
20666  +Clus32 = Clus32+0.0549670760145 * (DEPT20 - 0.02956413835892)/0.31025698407933;
20667  +Clus33 = Clus33+1 * (DEPT21 - 0.01821002016441)/0.24509272697267;
20668  +Clus32 = Clus32+0.23307614189926 * (DEPT22 - 2.12771831859779)/3.55134640550257;
20669  +Clus32 = Clus32+0.20251555040293 * (DEPT23 - 2.14223669923995)/3.81941288304535;
20670  +Clus32 = Clus32+0.17413334206296 * (DEPT24 - 0.64039087947882)/1.70711269742472;
20671  +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
20672  +Clus9 = Clus9+0.18580207423567 * (DEPT26 - 0.19075539010392)/0.91270742425277;
20673  +Clus32 = Clus32+0.16412176293701 * (DEPT27 - 0.58712579494338)/1.55259848403997;
20674  +Clus4 = Clus4+0.41745197007519 * (DOLINDEA - 47.8585866898046)/37.591191668842;
20675  +Clus1 = Clus1+0.22176651741164 * (DOLINDET - 197.869031487513)/314.244548218948;
20676  +Clus3 = Clus3+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
20677  +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969907)/18.9572343997303;
20678  +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
20679  +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
20680  +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
20681  +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
20682  +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
20683  +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
20684  +Clus27 = Clus27+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
20685  +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
20686  +Clus10 = Clus10+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
20687  +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974562)/20.8177653006881;
20688  +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
20689  +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
20690  +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
20691  +Clus8 = Clus8+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
20692  +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166278)/31.0104071776129;
20693  +Clus3 = Clus3+0.44436827521592 * (DOLLARQ17 - 5.57017403443461)/26.1415799982751;
20694  +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
20695  +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
20696  +Clus9 = Clus9+0.37631589198989 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
20697  +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.74636513106872)/24.2680885720031;
20698  +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
20699  +Clus4 = Clus4+0.41538876032442 * (DOLNETDA - 45.411597554134)/36.1502695431938;
20700  +Clus1 = Clus1+0.22085514615169 * (DOLNETDT - 189.18095548317)/303.615750735173;
20701  +Clus1 = Clus1+0.19970567328905 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
20702  +Clus7 = Clus7+0.36779707552659 * (MONLAST - 38.7579959671164)/40.2783526824403;
20703  +Clus35 = Clus35+1 * (TENURE - 83.4682798200713)/60.0499642836247;
20704  +Clus24 = Clus24+0.53431022831305 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
20705  +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
20706  +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
20707  +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
20708  +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
20709  +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
20710  +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
20711  +Clus27 = Clus27+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
20712  +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
20713  +Clus10 = Clus10+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
20714  +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
20715  +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
20716  +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
20717  +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
20718  +Clus8 = Clus8+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
20719  +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
20720  +Clus3 = Clus3+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
20721  +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
20722  +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
20723  +Clus9 = Clus9+0.40129080124664 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
20724  +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
20725  +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
20726  +Clus1 = Clus1+0.21191459192951 * (UNITSIDD - 10.9602916085)/17.1055734908767;
20727  +Clus4 = Clus4+0.30018376965081 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
20728  +Clus30 = Clus30+1 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
20729  +Clus5 = Clus5+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
20730  +Clus5 = Clus5+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
20731  +Clus2 = Clus2+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
20732  +Clus2 = Clus2+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
20733  +Clus28 = Clus28+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
20734  +Clus28 = Clus28+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
20735  +Clus2 = Clus2+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
20736  +Clus28 = Clus28+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
20737  +Clus7 = Clus7+0.32661485207285 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
20738  +Clus5 = Clus5+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
NOTE: %INCLUDE (level 1) ending.
20739   run;
 
NOTE: DATA STEP view saved on file EMWS4.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20740   quit;
20741   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20743   *------------------------------------------------------------*;
20744   * VarClus: Computing metadata for TRAIN data;
20745   *------------------------------------------------------------*;
 
NOTE: View EMWS4.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 13, 2022
Time:                19:29:36
*------------------------------------------------------------*
21148   %let EMEXCEPTIONSTRING=;
21149   *------------------------------------------------------------*;
21150   * REPORT: VarClus;
21151   *------------------------------------------------------------*;
21152   %let EM_ACTION = REPORT;
21153   %let syscc = 0;
21154
21155   %macro main;
21156
21157      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
21158      %include temp;
21159      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
21160      %include temp;
21161      filename temp;
21162
21163     %SetProperties;
21164
21165      %if %upcase(&EM_ACTION) = CREATE %then %do;
21166          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
21167          %include temp;
21168          filename temp;
21169          %create;
21170      %end;
21171      %else
21172      %if %upcase(&EM_ACTION) = TRAIN %then %do;
21173           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
21174              %include temp;
21175              filename temp;
21176              %train;
21177      %end;
21178      %else
21179      %if %upcase(&EM_ACTION) = SCORE %then %do;
21180              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
21181              %include temp;
21182              filename temp;
21183              %score;
21184      %end;
21185      %else
21186      %if %upcase(&EM_ACTION) = REPORT %then %do;
21187              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
21188              %include temp;
21189              filename temp;
21190              %report;
21191      %end;
21192      /*
21193      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
21194          %put 'OPENING TABLE';
21195      %end;
21196      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
21197          %put 'CLOSE TABLE';
21198      %end;
21199      */
21200   %mend main;
21201   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
21202  +
21203  +/* Initialize property macro variables */
21204  +%macro SetProperties;
21205  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
21206  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
21207  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
21208  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
21209  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
21210  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
21211  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
21212  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
21213  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
21214  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
21215  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
21216  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
21217  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
21218  +
21219  +%mend SetProperties;
21220  +
21221  +%Macro MakeDummyVariables(indata=,
21222  +                          outvar=,
21223  +                          outdata=,
21224  +                          fileref=,
21225  +                          recreatecmeta=N, /* optional */
21226  +                          incmeta=,     /* optional */
21227  +                          outcmeta=,    /* optional */
21228  +                          ndummyvars=_ndummyvars
21229  +                          );
21230  +    %global &ndummyvars;
21231  +
21232  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
21233  +       class
21234  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21235  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21236  +    ;
21237  +    run;
21238  +    %let &ndummyvars = 0;
21239  +    data _null_;
21240  +    %let dsid = %sysfunc(open(work._classout));
21241  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
21242  +    %let dsid = %sysfunc(close(&dsid));
21243  +    run;
21244  +
21245  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
21246  +       input
21247  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21248  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21249  +        / level=nominal stdize=no;
21250  +       make outvar = &outvar;
21251  +       score data = &indata out =&outdata;
21252  +       code  file=  "&fileref";
21253  +    run;
21254  +    %if &recreatecmeta eq Y %then %do;
21255  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
21256  +    data _tmpds;
21257  +        set _tmpds;
21258  +           ROLE = 'INPUT';
21259  +           LEVEL = 'INTERVAL';
21260  +           CREATOR='DMZIP';
21261  +           if NAME = '_TYPE_' then delete;
21262  +    run;
21263  +    data &outcmeta;
21264  +         set &incmeta _tmpds;
21265  +    run;
21266  +    %end;
21267  +    proc datasets lib=work nolist;
21268  +      delete  _dmdbdat _dmdbcat _classout
21269  +    %if &recreatecmeta eq Y %then %do;
21270  +    _tmpds
21271  +    %end;
21272  +    ;
21273  +    quit;
21274  +%Mend MakeDummyVariables;
21275  +
21276  +/*--- Determine Optimal Number of Cluster ----
21277  +%macro FindClusNum(statds=, groupds=, minvariation=);
21278  +   %global optnclus;
21279  +   data varclus_tmp(drop=_NAME_);
21280  +      set &statDs;
21281  +      where _type_ ='PROPOR';
21282  +   run;
21283  +   proc sort data=varclus_tmp;
21284  +      by _NCL_;
21285  +   run;
21286  +   proc transpose data=varclus_tmp out=varclus_tmp;
21287  +      by _NCL_;
21288  +      var %EM_INTERVAL_INPUT
21289  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21290  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21291  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
21292  +          %do i = 2 %to &nvar;
21293  +          %let varname = %sysfunc(varname(&dsid, &i));
21294  +          &varname
21295  +          %end;
21296  +      %end;
21297  +   ;
21298  +   run;
21299  +
21300  +   %if &minVariation eq %then %do;
21301  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
21302  +   %end;
21303  +   %if ^(0<&minVariation<100) %then %do;
21304  +       %let minVariation = 90;
21305  +   %end;
21306  +
21307  +   data _null_;
21308  +      set varclus_tmp end=eof;
21309  +      by _NCL_;
21310  +      retain flag 0;
21311  +      if first._ncl_ then flag=0;
21312  +      if .<col1 < &minVariation then flag=1;
21313  +      if last._ncl_ and ^flag then do;
21314  +         call symput('OPTNCL', _ncl_);
21315  +         stop;
21316  +      end;
21317  +     if eof then call symput('OPTNCL', _ncl_);
21318  +   run;
21319  +
21320  +   %let optnclus = &OPTNCL;
21321  +
21322  +   data varclus_tmp(drop=_NCL_ _NAME_);
21323  +      set &statDs;
21324  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
21325  +   run;
21326  +   proc sort data=varclus_tmp;
21327  +      by _TYPE_;
21328  +   run;
21329  +   proc transpose data=varclus_tmp out=varclus_tmp;
21330  +      by _TYPE_;
21331  +   run;
21332  +   proc sort data=varclus_tmp;
21333  +      by _name_ _type_;
21334  +   run;
21335  +
21336  +  proc transpose data=varclus_tmp out=&groupds;
21337  +      by _NAME_;
21338  +   run;
21339  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
21340  +      by Cluster descending Rsquare;
21341  +      where Cluster ne 0;
21342  +   run;
21343  +   proc datasets lib=work nolist mt=(DATA VIEW);
21344  +      delete varclus_tmp;
21345  +   run;
21346  +   quit;
21347  +%mend findClusNum;
21348  +*/
21349  +
21350  +%macro getNclusfromTrain(inoutstat=, nc=);
21351  +%global &nc;
21352  +data _null_;
21353  +    set &inoutstat end=eof;
21354  +    if eof then do;
21355  +    call symput("&nc", _ncl_);
21356  +    end;
21357  +run;
21358  +%mend  getNclusfromTrain;
21359  +
21360  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
21361  +
21362  +     *--- Build Code to Modify Metadata ---*;
21363  +     filename X "&deltacodefile";
21364  +     data _null_;
21365  +        FILE X;
21366  +        set &groupds end=eof;
21367  +        /*by Cluster;*/
21368  +         if _N_=1 then do;
21369  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21370  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21371  +           %end;
21372  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21373  +           put "if upcase(strip(NAME)) in (";
21374  +        end;
21375  +        if Strip(upcase(Selected)) eq 'YES' then do;
21376  +           string = '"'!!trim(left(VARIABLE))!!'"';
21377  +           put string;
21378  +        end;
21379  +        if eof then do;
21380  +           put ') then ROLE="INPUT";';
21381  +           put 'else ROLE="REJECTED";';
21382  +           put 'end;';
21383  +
21384  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21385  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21386  +           %end;
21387  +        end;
21388  +     run;
21389  +     quit;
21390  +
21391  +     filename X;
21392  +
21393  +     quit;
21394  +%mend MakeDeltaCode;
21395  +
21396  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
21397  +    %if ^%sysfunc(exist(&statds)) %then %do;
21398  +         %goto doendc;
21399  +    %end;
21400  +
21401  +    data &corrds(drop=_TYPE_ _NCL_) ;
21402  +       set &statds;
21403  +       where _type_ eq 'CORR' ;
21404  +    run ;
21405  +    proc sort data=&corrds;
21406  +       by _NAME_ ;
21407  +    run ;
21408  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
21409  +      BY _NAME_ ;
21410  +    run ;
21411  +    data &corrplotds;
21412  +       length _Y_ $100;
21413  +       set &corrplotDs;
21414  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
21415  +    run ;
21416  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
21417  +       set &corrplotds;
21418  +       where _LABEL_ ne '' ;
21419  +       keep _TMP_ _LABEL_ ;
21420  +    run ;
21421  +    data _null_;
21422  +       nobs=0;
21423  +       dsid = open('varclus_match');
21424  +       if dsid then do;
21425  +          nobs = attrn(dsid, 'NOBS');
21426  +          dsid = close(dsid);
21427  +       end;
21428  +       call symput ('CORR_NOBS', nobs);
21429  +    run;
21430  +    %if &corr_nobs %then %do;
21431  +        proc sort data=varclus_match;
21432  +           by _name_;
21433  +        run ;
21434  +        proc sort data=&corrplotds;
21435  +           by _name_;
21436  +        run ;
21437  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
21438  +           merge varclus_match &corrplotds;
21439  +           by _NAME_ ;
21440  +           if _X_ eq '' then _X_=_NAME_ ;
21441  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21442  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21443  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21444  +
21445  +       run ;
21446  +    %end;
21447  +    %else %do;
21448  +        proc sort data=&corrplotds;
21449  +           by _name_;
21450  +        run ;
21451  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
21452  +           set &corrplotds;
21453  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21454  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21455  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21456  +
21457  +        run ;
21458  +    %end;
21459  +    proc sort data=&corrplotds;
21460  +       by _X_ _Y_;
21461  +    run ;
21462  +    proc datasets lib=work nolist mt=(DATA VIEW);
21463  +       delete varclus_match;
21464  +    run;
21465  +    quit;
21466  +
21467  +%doendc:
21468  +
21469  +%mend MakeVarClusCorrData;
21470  +
21471  +%macro MakeStatPlotData(statds= , outstatplotds=);
21472  +   %if %sysfunc(exist(&statds)) %then %do;
21473  +
21474  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
21475  +          set &statDs;
21476  +          where _type_ in('MEAN', 'STD', 'N');
21477  +       run ;
21478  +       proc transpose data=varclus_tmp out=&outstatplotds;
21479  +          id _TYPE_ ;
21480  +       run ;
21481  +       data &outstatplotds;
21482  +          set &outstatplotds(obs=1000);
21483  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
21484  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21485  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
21486  +          else SCALEDSTD= STD ;
21487  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
21488  +       run ;
21489  +       proc sort data=&outstatplotds;
21490  +          by descending SCALEDSTD ;
21491  +       run ;
21492  +       proc datasets lib=work nolist mt=(DATA VIEW);
21493  +          delete varclus_tmp;
21494  +       run;
21495  +       quit;
21496  +    %end;
21497  +
21498  +%mend MakeStatPlotData;
21499  +
21500  +
21501  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
21502  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
21503  +    data &EM_USER_OUTSTATSCORE;
21504  +          set &indata;
21505  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21506  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21507  +          if _TYPE_ = 'STD' then _NAME_='STD';
21508  +          DROP _TYPE_ _NCL_;
21509  +     run;
21510  +
21511  +     filename _file_  "&fileRef";
21512  +
21513  +     data _null_;
21514  +        FILE _file_ MOD;
21515  +        put ' ';
21516  +        put '/*-------------------------------------------------*/';
21517  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
21518  +        put '/*-------------------------------------------------*/';
21519  +        put ' ';
21520  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
21521  +
21522  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21523  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21524  +
21525  +        %let k = 1;
21526  +        %do %while(^%sysfunc(fetch(&dsid)));
21527  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21528  +                %if &k > 2 %then %do;
21529  +                 %let cn = %eval(&k-2);
21530  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
21531  +                %end;
21532  +                %let k = %eval(&k+1);
21533  +        %end;
21534  +
21535  +        %let rc = %sysfunc(rewind(&dsid));
21536  +
21537  +        %do i= 2 %to &nvar;
21538  +            %let _varname =  %sysfunc(varname(&dsid, &i));
21539  +            %do %while(^%sysfunc(fetch(&dsid)));
21540  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21541  +                %if &_name = MEAN %then
21542  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21543  +                %else %if &_name = STD %then
21544  +                %let _std = %sysfunc(getvarn(&dsid, &i));
21545  +                %else %do;
21546  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21547  +                      %let abscoeff = %sysfunc(abs(&coeff));
21548  +                          %if &abscoeff >  0 %then %do;
21549  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21550  +                           %end;
21551  +                 %end;
21552  +             %end;
21553  +             %let rc = %sysfunc(rewind(&dsid));
21554  +         %end;
21555  +
21556  +        %let dsid= %sysfunc(close(&dsid));
21557  +       run;
21558  +%mend CreateScoreCode;
21559  +
21560  +
21561  +
21562  +/*----------------------------------------------------------
21563  +    Instead of using %MakeRSquareData,
21564  +    %MakeVarClusResultTable at macro2.source is used
21565  + +----------------------------------------------------------*/
21566  +
21567  +
21568  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
21569  +
21570  +/* modifying  from ods rsquare = data */
21571  +
21572  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
21573  +    Length Cluster $16;
21574  +    length Variable $32;
21575  +    Length VariableLabel $64;
21576  +    set &indata; retain CurrentCluster;
21577  +    if NumberOfClusters ^= &ncluster then delete;
21578  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
21579  +    CurrentCluster = Cluster;
21580  +   run;
21581  +proc sort data =&outdata ;
21582  +     by Cluster RsquareRatio;
21583  +run;
21584  +data _tmprsq(drop=index);
21585  +     set &outdata; by Cluster;
21586  +     if first.Cluster then do;
21587  +     index = strip(scan(Cluster,2 ));
21588  +     Variable = "Clus"||index;
21589  +     VariableLabel = "Cluster Component "||index;
21590  +     OwnCluster = 1;
21591  +     NextClosest = .;
21592  +     RsquareRatio = 0;
21593  +     output;
21594  +     end;
21595  +run;
21596  +
21597  +proc sort data = _tmprsq ;
21598  +     by Cluster RsquareRatio;
21599  +run;
21600  +data &outdata;
21601  +     set &outdata _tmprsq;
21602  +by Cluster;
21603  +run;
21604  +
21605  +
21606  +/* Just create the Selected variable with all YES */
21607  +
21608  +data &outdata;
21609  +    set &outdata; by cluster;
21610  +    length Selected $8;
21611  +    Selected = 'YES';
21612  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21613  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21614  +    rename OwnCluster = RSqWithClusterComp;
21615  +    rename NextClosest = RSqWithNextClusComp;
21616  +run;
21617  +
21618  +
21619  +/* Selected = Y/N will be done %score section -----
21620  +
21621  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
21622  +data &outdata;
21623  +    set &outdata; by cluster;
21624  +    length Selected $8;
21625  +    if first.Cluster then Selected = 'YES';
21626  +    else Selected = 'NO';
21627  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21628  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21629  +    rename OwnCluster = RSqWithClusterComp;
21630  +    rename NextClosest = RSqWithNextClusComp;
21631  +run;
21632  +%end;
21633  +%else %do;
21634  +data &outdata;
21635  +    set &outdata; by cluster;
21636  +    if last.Cluster then Selected = 'YES';
21637  +    else Selected = 'NO';
21638  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21639  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21640  +    rename OwnCluster = RSqWithClusterComp;
21641  +    rename NextClosest = RSqWithNextClusComp;
21642  +run;
21643  +%end;
21644  +---------------------------------------------------------------*/
21645  +
21646  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
21647  +/* to calculate NextClosestClusRsq */
21648  +proc transpose data = &inClusRSquare  out=_clusRsq;
21649  +      by cluster;
21650  +      run;
21651  +data _clusRsq;
21652  +     set _clusRsq;
21653  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
21654  +run;
21655  +
21656  +proc sort data=_clusRsq;
21657  +    by cluster col1;
21658  +    run;
21659  +data _clusRsq(drop=_NAME_ _LABEL_);
21660  +     set _clusRsq; by cluster;
21661  +     if last.Cluster then output;
21662  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
21663  +     rename COL1 = RSqWithNextClusComp;
21664  +     rename Cluster = Variable;
21665  +     label  Cluster = "Variable";
21666  +run;
21667  +
21668  +proc sort data =&outdata;
21669  +     by Variable;
21670  +run;
21671  +data &outdata;
21672  +    merge &outdata _clusRsq;
21673  +    by Variable;
21674  +run;
21675  +proc sort data =&outdata;
21676  +by Cluster  RsquareRatio;
21677  +run;
21678  +quit;
21679  +%end;
21680  +
21681  +proc datasets lib = work nolist;
21682  +     delete _tmprsq _clusRsq;
21683  +     run;
21684  +quit;
21685  +
21686  +%mend MakeRSquareData;
21687  +
21688  +
21689  +/*-------------------------------------------------------------------------*/
21690  +
21691  +
21692  +
21693  +%macro ModifyCorr(indata=,
21694  +                  outdata=,
21695  +                  rsquare = Y
21696  +                  );
21697  +    data corr_tmp;
21698  +        set &indata;
21699  +    run;
21700  +     proc sql;
21701  +           update &indata
21702  +           set
21703  +     %let dsid = %sysfunc(open(work.corr_tmp));
21704  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21705  +          %do i = 4 %to &nvar;
21706  +          %let _name = %sysfunc(varname(&dsid, &i));
21707  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21708  +            %else  %let _name_md = &_name;
21709  +            %if &i < &nvar %then %do;
21710  +               &_name = 1- &_name_md ,
21711  +            %end;
21712  +            %else %do;
21713  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
21714  +            %end;
21715  +          %end;
21716  +      %let dsid= %sysfunc(close(&dsid));
21717  +
21718  +      select * from &indata;
21719  +      run;
21720  +      proc datasets lib = work nolist;
21721  +           delete corr_tmp;
21722  +      run;
21723  +      quit;
21724  +
21725  + %mend ModifyCorr;
21726  +
21727  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
21728  +    data &outdata(drop= _NCL_  _TYPE_);
21729  +       set &indata;
21730  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21731  +       rename _NAME_ = Cluster;
21732  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21733  +    run;
21734  +    %if &RSquare eq Y %then %do;
21735  +     data corr_tmp;
21736  +        set &outdata;
21737  +     run;
21738  +
21739  +     data &outdata(drop=i);
21740  +          set &outdata;
21741  +          %let dsid = %sysfunc(open(work.corr_tmp));
21742  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21743  +          %do i = 2 %to &nvar;
21744  +            %let _name = %sysfunc(varname(&dsid, &i));
21745  +            %let _name_md = &_name.**2;
21746  +                &_name = &_name_md;
21747  +          %end;
21748  +      %let dsid= %sysfunc(close(&dsid));
21749  +      run;
21750  +      proc datasets lib = work nolist;
21751  +           delete corr_tmp;
21752  +      run;
21753  +
21754  +    %end;
21755  +     quit;
21756  +%mend MakeClusStructCorrData;
21757  +
21758  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
21759  +    data &outdata(drop= _NCL_  _TYPE_);
21760  +       set &indata;
21761  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21762  +       rename _NAME_ = Cluster;
21763  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21764  +    run;
21765  +    data corr_tmp;
21766  +        set &outdata;
21767  +    run;
21768  +
21769  +    %let dsid = %sysfunc(open(work.corr_tmp));
21770  +    %let nclus2= %eval(&ncluster+1);
21771  +    data &outdata;
21772  +         set &outdata;
21773  +          %do i = 2 %to &nclus2;
21774  +          %let i_1 = %eval(&i-1);
21775  +            %let _name = %sysfunc(varname(&dsid, &i));
21776  +            %let _newName = Clus&i_1;
21777  +                rename &_name = &_newName; ;
21778  +                *label &_name ="Cluster &i_1";
21779  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21780  +          %end;
21781  +          keep Cluster
21782  +          %do i = 2 %to &nclus2;
21783  +                %let _name = %sysfunc(varname(&dsid, &i));
21784  +                &_name
21785  +          %end;
21786  +          ;
21787  +    %let dsid= %sysfunc(close(&dsid));
21788  +     run;
21789  +     quit;
21790  +
21791  +    %if &RSquare eq Y %then %do;
21792  +
21793  +       data corr_tmp;
21794  +        set &outdata;
21795  +     run;
21796  +
21797  +     data &outdata(drop=i);
21798  +          set &outdata;
21799  +          %let dsid = %sysfunc(open(work.corr_tmp));
21800  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21801  +          %do i = 2 %to &nvar;
21802  +            %let _name = %sysfunc(varname(&dsid, &i));
21803  +            %let _name_md = &_name.**2;
21804  +                &_name = &_name_md;
21805  +          %end;
21806  +      %let dsid= %sysfunc(close(&dsid));
21807  +      run;
21808  +    %end;
21809  +
21810  +    %if &makeplotds eq Y %then %do;
21811  +     proc transpose data = &outdata
21812  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21813  +          by cluster;
21814  +     run;
21815  +     data &plotds;
21816  +          set  &plotds;
21817  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21818  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21819  +     run;
21820  +     %end;
21821  +     proc datasets lib = work nolist;
21822  +           delete corr_tmp;
21823  +     run;
21824  +     quit;
21825  +%mend MakeInterClusCorrData;
21826  +
21827  +
21828  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21829  +
21830  +data &outlink(drop = Selected);
21831  +     set &indata;
21832  +     LINKID = _N_;
21833  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21834  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21835  +run;
21836  +data &outnode(keep=NODEID TYPE LABEL);
21837  +    set &indata;
21838  +    length TYPE $16;
21839  +    rename Variable = NODEID;
21840  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21841  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21842  +    then  TYPE = "CLUSTER";
21843  +    else  TYPE="VARIABLE";
21844  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21845  +run;
21846  +quit;
21847  +%mend MakeClusConstellData;
21848  +
21849  +
21850  +
21851  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21852  +
21853  +data &outlink(drop = Selected);
21854  +     set &indata;
21855  +     LINKID = _N_;
21856  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21857  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21858  +run;
21859  +data &outnode(keep=NODEID TYPE LABEL);
21860  +    set &indata;
21861  +    length TYPE $16;
21862  +    rename Variable = NODEID;
21863  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21864  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21865  +    then  TYPE = "CLUSTER";
21866  +    else  TYPE="VARIABLE";
21867  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21868  +run;
21869  +quit;
21870  +%mend MakeClusConstellData;
21871  +
21872  +
21873  +/*--- This will work only when inds is not a view data -------
21874  +
21875  +%macro getNVarNObs(inds=, nvar=, nobs=);
21876  +
21877  +    %global &nvar;
21878  +    %global &nobs;
21879  +    data _null_;
21880  +         dsid = open("&inds");
21881  +         nv = attrn(dsid, 'NVAR');
21882  +         no = attrn(dsid, 'NOBS');
21883  +         dsid = close(dsid);
21884  +         call symput("&nvar", nv);
21885  +         call symput("&nobs", no);
21886  +    run;
21887  +    quit;
21888  +%mend  getNVarNObs;
21889  +
21890  ++---------------------------------------------------------------*/
21891  +
21892  +
21893  +%macro getNVar(inds=, nvar=);
21894  +    %global &nvar;
21895  +    data _null_;
21896  +         dsid = open("&inds");
21897  +         nv = attrn(dsid, 'NVAR');
21898  +         dsid = close(dsid);
21899  +         call symput("&nvar", nv);
21900  +    run;
21901  +    quit;
21902  +%mend  getNVar;
21903  +
21904  +
21905  +
21906  +%macro getNObs(inds=, nobs=);
21907  +    %global &nobs;
21908  +    data _null_;
21909  +        set &inds end=eof;
21910  +        if eof then call symput("&nobs", _N_);
21911  +    run;
21912  +    quit;
21913  +%mend  getNObs;
21914  +
21915  +%Macro CreateVarclusMeta(trainnum=);
21916  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21917  +    data &EM_USER_VARCLUSMETA;
21918  +         length TrainNum 8.;
21919  +         length NewTrain $8;
21920  +         length NGCluster 8.;
21921  +         length ExportedComp $16;
21922  +         length HideVariable $8;
21923  +         TrainNum = &trainnum;
21924  +         NewTrain = "Y";
21925  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
21926  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
21927  +         NGCluster = 0; /* zero means no twostage */
21928  +   run;
21929  +   quit;
21930  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
21931  +
21932  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
21933  +    data &outdata(drop= _NCL_  _TYPE_);
21934  +       set &indata;
21935  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21936  +       %if &globalclusid ne %then %do;
21937  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21938  +       rename _NAME_ = Cluster;
21939  +       %end;
21940  +       %else %do;
21941  +        _NAME_ = upcase(_NAME_);
21942  +       rename _NAME_ = Cluster;
21943  +       %end;
21944  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21945  +    run;
21946  +    data corr_tmp;
21947  +        set &outdata;
21948  +    run;
21949  +
21950  +    %let dsid = %sysfunc(open(work.corr_tmp));
21951  +    %let nclus2= %eval(&ncluster+1);
21952  +    data &outdata;
21953  +         set &outdata;
21954  +          %do i = 2 %to &nclus2;
21955  +          %let i_1 = %eval(&i-1);
21956  +            %let _name = %sysfunc(varname(&dsid, &i));
21957  +            %if &globalclusid ne %then
21958  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
21959  +                     rename &_name = &_newName;
21960  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
21961  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
21962  +                %end;
21963  +            %else
21964  +                %do; %let _newName = CLUS&i_1;
21965  +                     rename &_name = &_newName;
21966  +                     *label &_name ="Cluster &i_1";
21967  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21968  +                %end;
21969  +          %end;
21970  +          keep Cluster
21971  +          %do i = 2 %to &nclus2;
21972  +                %let _name = %sysfunc(varname(&dsid, &i));
21973  +                &_name
21974  +          %end;
21975  +          ;
21976  +    %let dsid= %sysfunc(close(&dsid));
21977  +     run;
21978  +     quit;
21979  +
21980  +    %if &RSquare eq Y %then %do;
21981  +
21982  +       data corr_tmp;
21983  +        set &outdata;
21984  +     run;
21985  +
21986  +     data &outdata;
21987  +          set &outdata;
21988  +          %let dsid = %sysfunc(open(work.corr_tmp));
21989  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21990  +          %do i = 2 %to &nvar;
21991  +            %let _name = %sysfunc(varname(&dsid, &i));
21992  +            %let _name_md = &_name.**2;
21993  +                &_name = &_name_md;
21994  +          %end;
21995  +      %let dsid= %sysfunc(close(&dsid));
21996  +      run;
21997  +    %end;
21998  +
21999  +    %if &makeplotds eq Y %then %do;
22000  +     proc transpose data = &outdata
22001  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
22002  +          by cluster;
22003  +     run;
22004  +     data &plotds;
22005  +          set  &plotds;
22006  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
22007  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
22008  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
22009  +     run;
22010  +     %end;
22011  +     proc datasets lib = work nolist;
22012  +           delete corr_tmp;
22013  +     run;
22014  +     quit;
22015  +%mend MakeInterClusCorrData;
22016  +
22017  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
22018  +    data _tmpds(drop= _NCL_);
22019  +       set &indata;
22020  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
22021  +       %if &globalclusid ne %then %do;
22022  +           _NAME_ = "GC&globalclusid.";
22023  +       rename _NAME_ = Cluster;
22024  +       %end;
22025  +       %else %do;
22026  +        _NAME_ = "CLUS";
22027  +        rename _NAME_ = Cluster;
22028  +       %end;
22029  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
22030  +    run;
22031  +    proc transpose data =_tmpds out =&outdata;
22032  +    run;
22033  +
22034  +    data &outdata(drop=COL1);
22035  +        %if &globalclusid ne %then %do;
22036  +        length GCluster $16;
22037  +        %end;
22038  +        length Cluster $32;
22039  +        length _NAME_ $32;
22040  +         set &outdata;
22041  +         _NAME_ = upcase(_NAME_);
22042  +         rename _NAME_=Variable;
22043  +         *label _NAME_="Variable";
22044  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22045  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22046  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22047  +
22048  +         %if &globalclusid ne %then %do;
22049  +          GCluster = "GC&globalclusid";
22050  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
22051  +         %end;
22052  +         %else %do;
22053  +         Cluster = "CLUS"||strip(COL1);
22054  +        %end;
22055  +         rename COL2 = RSqWithOwnClusComp;
22056  +         *label COL2 = "R-Square With Own Cluster Component";
22057  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
22058  +
22059  +   run;
22060  +   proc sort data =&outdata;
22061  +        by Cluster RSqWithOwnClusComp;
22062  +   run;
22063  +   proc datasets lib = work nolist;
22064  +           delete _tmpds;
22065  +   run;
22066  +   quit;
22067  +%mend MakeOwnRSquare;
22068  +
22069  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
22070  +    data &outdata(drop= _NCL_  _TYPE_);
22071  +       %if &globalclusid ne %then %do;
22072  +        length GCluster $16;
22073  +        %end;
22074  +       set &indata;
22075  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
22076  +       %if &globalclusid ne %then %do;
22077  +         GCluster = "GC&globalclusid";
22078  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
22079  +         rename _NAME_ = Cluster;
22080  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22081  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22082  +
22083  +       %end;
22084  +       %else %do;
22085  +         _NAME_ = upcase(_NAME_);
22086  +         rename _NAME_ = Cluster;
22087  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22088  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22089  +
22090  +       %end;
22091  +     run;
22092  +    %if &RSquare eq Y %then %do;
22093  +     data corr_tmp;
22094  +          set &outdata;
22095  +     run;
22096  +     %let istart = 2;
22097  +     %if &globalclusid ne %then %let istart = 3;
22098  +     data &outdata;
22099  +          set &outdata;
22100  +          %let dsid = %sysfunc(open(work.corr_tmp));
22101  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
22102  +          %do i =&istart %to &nvar;
22103  +            %let _name = %sysfunc(varname(&dsid, &i));
22104  +            %let _name_md = &_name.**2;
22105  +                &_name = &_name_md;
22106  +          %end;
22107  +      %let dsid= %sysfunc(close(&dsid));
22108  +      run;
22109  +      proc datasets lib = work nolist;
22110  +           delete corr_tmp;
22111  +      run;
22112  +    %end;
22113  +     quit;
22114  +%mend MakeClusStructCorrData;
22115  +
22116  +/*
22117  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
22118  +*/
22119  +
22120  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
22121  +
22122  +     /* The indata should be the outdata
22123  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
22124  +
22125  +     proc sort data =&indata out=_tmpclusRsq;
22126  +     by cluster;
22127  +     run;
22128  +
22129  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
22130  +      by cluster;
22131  +     run;
22132  +
22133  +     proc sort data=_tmpclusRsq;
22134  +        by _NAME_ COL1;
22135  +     run;
22136  +
22137  +     data _tmpclusRsq;
22138  +         length _NAME_ $32;
22139  +         set _tmpclusRsq; by _NAME_;
22140  +          _NAME_ = upcase(_NAME_);
22141  +          %if &ncluster ne 1 %then %do;
22142  +             if last._NAME_ then delete;
22143  +          %end;
22144  +          %else %do;
22145  +             COL1 = 0;
22146  +          %end;
22147  +     run;
22148  +     /* need to sort again */
22149  +     proc sort data=_tmpclusRsq;
22150  +        by _NAME_ COL1;
22151  +     run;
22152  +
22153  +     data &outdata;
22154  +         set _tmpclusRsq; by _NAME_;
22155  +         Cluster = upcase(Cluster);
22156  +         if last._NAME_ then output;
22157  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
22158  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
22159  +         rename COL1 = RSqWithNextClusComp;
22160  +         Cluster = upcase(Cluster);
22161  +         rename Cluster = ClosestCluster;
22162  +         *label  Cluster = "Next Closest Cluster";
22163  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
22164  +         rename _NAME_ = Variable;
22165  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22166  +    run;
22167  +
22168  +
22169  +    %if &globalclusid ne %then %do;
22170  +    data &outdata;
22171  +       length GCluster $16;
22172  +       set &outdata;
22173  +       GCluster = "GC&globalclusid";
22174  +       run;
22175  +    %end;
22176  +    proc datasets lib = work nolist;
22177  +           delete _tmpclusRsq;
22178  +    run;
22179  +    quit;
22180  +%mend FindNextClosestClusByVar;
22181  +
22182  +
22183  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
22184  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
22185  +     proc sort data =&indata out=_tmpclusRsq;
22186  +     by cluster;
22187  +     run;
22188  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
22189  +     by cluster;
22190  +     run;
22191  +     proc sort data=_tmpclusRsq;
22192  +        by _NAME_ col1;
22193  +     run;
22194  +     data _tmpclusRsq;
22195  +         length _NAME_ $32;
22196  +         set _tmpclusRsq; by _NAME_;
22197  +          _NAME_ = upcase(_NAME_);
22198  +          %if &ncluster ne 1 %then %do;
22199  +             if last._NAME_ then delete;
22200  +          %end;
22201  +          %else %do;
22202  +             COL1 = 0;
22203  +          %end;
22204  +     run;
22205  +     data &outdata;
22206  +         set _tmpclusRsq; by _NAME_;
22207  +         Cluster = upcase(Cluster);
22208  +         if last._NAME_ then output;
22209  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
22210  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
22211  +         rename COL1 = RSqWithNextClusComp;
22212  +         Cluster = upcase(Cluster);
22213  +         rename Cluster = ClosestCluster;
22214  +         *label  Cluster = "Next Closest Cluster";
22215  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
22216  +         rename _NAME_ = Variable;
22217  +         *label  _NAME_ = "Variable";
22218  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22219  +
22220  +    run;
22221  +    %if &globalclusid ne %then %do;
22222  +    data &outdata;
22223  +       length GCluster $16;
22224  +       set &outdata;
22225  +       GCluster = "GC&globalclusid";
22226  +       run;
22227  +    %end;
22228  +
22229  +    proc datasets lib = work nolist;
22230  +           delete _tmpclusRsq;
22231  +    run;
22232  +
22233  +    quit;
22234  +%mend FindNextClosestClusByCluster;
22235  +
22236  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
22237  +/*----
22238  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
22239  +-----------*/
22240  +
22241  +proc sort data =&indata1;
22242  +    by Variable;
22243  +run;
22244  +proc sort data =&indata2;
22245  +    by Variable;
22246  +run;
22247  +data &outdata;
22248  +    merge &indata1 &indata2;
22249  +    by Variable;
22250  +    length Type $16;
22251  +    Type = 'Variable';
22252  +    *label Type ='Type';
22253  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
22254  +run;
22255  +
22256  +
22257  +data &indata3;
22258  +    set  &indata3 ;
22259  +    length RSqWithOwnClusComp 8.;
22260  +    Cluster = Variable;
22261  +    RSqWithOwnClusComp = 1;
22262  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
22263  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
22264  +    length Type $16;
22265  +    Type = 'ClusterComp';
22266  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
22267  +
22268  +;
22269  +run;
22270  +
22271  +proc sort data=&outdata;
22272  +    by Cluster;
22273  +run;
22274  +proc sort data =&indata3;
22275  +    by Cluster;
22276  +run;
22277  +
22278  +data &outdata;
22279  +     set &outdata &indata3;
22280  +     by Cluster;
22281  +run;
22282  +
22283  +
22284  +/* Create the Selected variable with all YES */
22285  +
22286  +data &outdata;
22287  +     set &outdata;
22288  +     length RsqRatio 8.;
22289  +     length Selected $8;
22290  +     *label RSqRatio = "1-R**2 Ratio";
22291  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
22292  +     *label Selected = "Variable Selected";
22293  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
22294  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
22295  +     Selected ='YES';
22296  +     rename _LABEL_ = Label;
22297  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22298  +run;
22299  +
22300  +
22301  +/*----  Selected = Y/N will be assigened at the %score                   -------+
22302  +        Just create the Selected variable with all YES at the step above
22303  + +------------------------------------------------------------------------------+
22304  +
22305  +proc sort data=&outdata;
22306  +    by Cluster RsqRatio;
22307  +run;
22308  +
22309  +%if &selectedcomp eq CLUSTERCOMP %then %do;
22310  +data &outdata;
22311  +     set &outdata; by Cluster;
22312  +     length Selected $8;
22313  +     label Selected = "Variable Selected";
22314  +     if  first.Cluster then Selected ='Yes';
22315  +     else Selected = 'No';
22316  +    run;
22317  +%end;
22318  +%else %do;
22319  +data &outdata(drop = _var _varchange);
22320  +     set &outdata; retain _var 0; by Cluster;
22321  +     length Selected $8;
22322  +     label Selected = "Variable Selected";
22323  +     if first.Cluster then  _varchange = 0;
22324  +     else _varchange =1;
22325  +     if _var ne _varchange then  Selected  = 'Yes';
22326  +     else Selected = 'No';
22327  +     if last.cluster then  _var = 0;
22328  +     else _var = _varchange;
22329  +run;
22330  +%end;
22331  +
22332  +--------------------------------------------------------------*/
22333  +
22334  +quit;
22335  +%mend MakeVarClusResultTable;
22336  +
22337  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
22338  +     proc sort data =&indata;
22339  +        by cluster;
22340  +     run;
22341  +     proc transpose data =&indata
22342  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
22343  +          by cluster;
22344  +     run;
22345  +     data &outdata;
22346  +          set  &outdata;
22347  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22348  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22349  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
22350  +     run;
22351  +     %if &globalclusid ne %then %do;
22352  +     data &outdata;
22353  +          Length GCluster $16;
22354  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22355  +          set  &outdata;
22356  +          GCluster ="GC&globalclusid.";
22357  +          run;
22358  +     %end;
22359  +
22360  +%Mend MakePlotDataFromCorrTable;
22361  +
22362  +
22363  +%macro MakeCorrelation(indata=,
22364  +                       outstat=_tmpoutstat,
22365  +                       corrmatrix=N,
22366  +                       outcorr=_tmpoutcorr,
22367  +                       includeclassvar=N,
22368  +                       target=,
22369  +                       freq=,
22370  +                       weight=);
22371  +   %if &target eq  %then %do;
22372  +
22373  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
22374  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
22375  +       %if &includeclassvar eq Y %then %do;
22376  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
22377  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
22378  +          %do i = 2 %to &nvar;
22379  +          %let varname = %sysfunc(varname(&dsid, &i));
22380  +          &varname
22381  +          %end;
22382  +       %end;
22383  +       ;
22384  +      %if &freq ne  %then %do;
22385  +          freq &freq;
22386  +      %end;
22387  +      %if &weight ne  %then %do;
22388  +          weight &weight;
22389  +      %end;
22390  +
22391  +      run;
22392  +      %if &corrmatrix eq Y %then %do;
22393  +      data  &outcorr (drop = _NCL_ _TYPE_);
22394  +           set  &outstat ;
22395  +           if _TYPE_ ='CORR' then output;
22396  +      run;
22397  +      %end;
22398  +    %end;
22399  +    %else %do;
22400  +       proc corr data=&indata outp=&outstat noprint;
22401  +            var
22402  +       %let dsid = %sysfunc(open(&indata));
22403  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
22404  +          %do i = 1 %to &nvar;
22405  +              %let _name = %sysfunc(varname(&dsid, &i));
22406  +              %if &_name ne &target %then;
22407  +              &_name
22408  +           %end;
22409  +        %let dsid= %sysfunc(close(&dsid));
22410  +        ;
22411  +        with &target;
22412  +        run;
22413  +    %end;
22414  +    quit;
22415  +%mend MakeCorrelation;
22416  +
22417  +
22418  +%macro MakeCorrelationDistance(indata=,
22419  +                               outdata=,
22420  +                               rsquare = N
22421  +                               );
22422  +    data corr_tmp;
22423  +        set &indata;
22424  +        if _N_ = 1 then do;
22425  +           output;
22426  +           stop;
22427  +         end;
22428  +    run;
22429  +    %if &outdata ne  %then %let  _outdata = &outdata;
22430  +    %else %let _outdata = &indata;
22431  +
22432  +    data &_outdata;
22433  +         set &indata;
22434  +
22435  +         %let dsid = %sysfunc(open(work.corr_tmp));
22436  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
22437  +          %do i = 2 %to &nvar;
22438  +              %let _name = %sysfunc(varname(&dsid, &i));
22439  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
22440  +              %else  %let _name_md = &_name;
22441  +              &_name = 1- &_name_md;
22442  +          %end;
22443  +      %let dsid= %sysfunc(close(&dsid));
22444  +      run;
22445  +      proc datasets lib = work nolist;
22446  +           delete corr_tmp;
22447  +      run;
22448  +      quit;
22449  +  %mend MakeCorrelationDistance;
22450  +
22451  +
22452  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
22453  +                                   rsquare = N
22454  +                                   );
22455  +    data corr_tmp;
22456  +        set &indata;
22457  +    run;
22458  +    proc sql noprint;
22459  +           update &indata
22460  +           set
22461  +     %let dsid = %sysfunc(open(work.corr_tmp));
22462  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
22463  +          %do i = 4 %to &nvar;
22464  +          %let _name = %sysfunc(varname(&dsid, &i));
22465  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
22466  +            %else  %let _name_md = &_name;
22467  +            %if &i < &nvar %then %do;
22468  +               &_name = 1- &_name_md ,
22469  +            %end;
22470  +            %else %do;
22471  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
22472  +            %end;
22473  +          %end;
22474  +      %let dsid= %sysfunc(close(&dsid));
22475  +
22476  +      select * from &indata;
22477  +      run;
22478  +     data &indata( drop = _NCL_);
22479  +           set &indata;
22480  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
22481  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
22482  +     run;
22483  +     data &indata(DROP = _NCL_);
22484  +           set &indata;
22485  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
22486  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
22487  +           rename _NAME_ = _VAR_;
22488  +     run;
22489  +     proc datasets lib = work nolist;
22490  +           delete corr_tmp;
22491  +     run;
22492  +     quit;
22493  + %mend UpdateOutStatCorrToDistance;
22494  +
22495  +
22496  +%macro HierClusWithCorr(indata= ,
22497  +                        ncluster=,
22498  +                        method = Ward,
22499  +                        outtree = _outtree,
22500  +                        idvar =_VAR_,
22501  +                        outdata=,
22502  +                        rescore = N,
22503  +                        newncluster=
22504  +                        );
22505  +      %global &newncluster;
22506  +      %if &rescore ne Y %then %do;
22507  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
22508  +                   method=&method outtree=&outtree noprint;
22509  +           id &idvar;
22510  +      run;
22511  +      %end;
22512  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
22513  +      run;
22514  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
22515  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
22516  +      run;
22517  +      data _outcontent;
22518  +          set _outcontent;
22519  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
22520  +          index = 1;
22521  +          rename NAME = _NAME_;
22522  +      run;
22523  +      proc sort data=_outcontent;
22524  +          by _NAME_;
22525  +      run;
22526  +      proc sort data =&outdata;
22527  +           by _NAME_;
22528  +      run;
22529  +      data &outdata(drop=index);
22530  +          merge &outdata _outcontent;
22531  +          by _NAME_;
22532  +          if index = . then delete;
22533  +      run;
22534  +      /*-----------------------------------------------------------*/
22535  +      data &outdata;
22536  +           length CLUSNAME $16;
22537  +           set &outdata;
22538  +           if CLUSTER > &ncluster then delete;
22539  +           CLUSNAME='GC'||strip(CLUSTER);
22540  +           *label CLUSNAME = "Cluster Name";
22541  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
22542  +           rename _NAME_ = VARIABLE ;
22543  +           *label _NAME_ = "Variable";
22544  +           *label CLUSTER = "Cluster";
22545  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22546  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22547  +      run;
22548  +      proc sort data=&outdata out=&outdata;
22549  +           by CLUSTER;
22550  +      run;
22551  +      proc means data =&outdata noprint;
22552  +           output out=_meanout;
22553  +      run;
22554  +      data _null_;
22555  +            set _meanout;
22556  +            if strip(_STAT_) eq 'MAX' then do;
22557  +            call symput("&newncluster", CLUSTER);
22558  +            stop;
22559  +            end;
22560  +      run;
22561  +
22562  +      proc datasets lib = work nolist;
22563  +           delete _outcontent _meanout;
22564  +      run;
22565  +      quit;
22566  +%mend  HierClusWithCorr;
22567  +
22568  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
22569  +
22570  +     data _tmpindata;
22571  +          set &indata;
22572  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
22573  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22574  +          if _TYPE_ = 'STD' then _NAME_='STD';
22575  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
22576  +          DROP _TYPE_ _NCL_;
22577  +     run;
22578  +
22579  +     filename _file_  "&fileRef";
22580  +
22581  +     data _null_;
22582  +        FILE _file_ MOD;
22583  +        put ' ';
22584  +        put "/*-------------------------------------------------*/";
22585  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
22586  +        put "/*-------------------------------------------------*/";
22587  +        put ' ';
22588  +        %let dsid = %sysfunc(open(work._tmpindata));
22589  +
22590  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22591  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22592  +        %let k = 1;
22593  +        %do %while(^%sysfunc(fetch(&dsid)));
22594  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22595  +               %if &k > 2 %then %do;
22596  +                %let cn = %eval(&k-2);
22597  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
22598  +                %end;
22599  +                %let k = %eval(&k+1);
22600  +
22601  +        %end;
22602  +        %let rc = %sysfunc(rewind(&dsid));
22603  +
22604  +        %do j= 2 %to &nvar;
22605  +            %let _varname = %sysfunc(varname(&dsid, &j));
22606  +            %do %while(^%sysfunc(fetch(&dsid)));
22607  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22608  +                %if &_name = MEAN %then
22609  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
22610  +                %else %if &_name = STD %then
22611  +                %let _std = %sysfunc(getvarn(&dsid, &j));
22612  +                %else %do;
22613  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
22614  +                      %let abscoeff = %sysfunc(abs(&coeff));
22615  +                          %if &abscoeff >  0 %then %do;
22616  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22617  +                           %end;
22618  +                 %end;
22619  +             %end;
22620  +             %let rc = %sysfunc(rewind(&dsid));
22621  +         %end;
22622  +
22623  +        %let dsid= %sysfunc(close(&dsid));
22624  +
22625  +     run;
22626  +
22627  +     filename _file_;
22628  +     proc datasets lib = work nolist;
22629  +           delete _tmpindata;
22630  +     run;
22631  +     quit;
22632  +%mend CreateScoreCode2;
22633  +
22634  +
22635  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
22636  +
22637  +     /*--- Build Code to Modify Metadata ---*/
22638  +     filename X "&deltacodefile";
22639  +     data _null_;
22640  +        FILE X;
22641  +        set &groupds end=eof;
22642  +        if _N_=1 then do;
22643  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
22644  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
22645  +           %end;
22646  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
22647  +           put "if upcase(strip(NAME)) in (";
22648  +        end;
22649  +        if Strip(upcase(Selected)) eq 'YES' then do;
22650  +           string = '"'!!trim(left(VARIABLE))!!'"';
22651  +           put string;
22652  +        end;
22653  +        if eof then do;
22654  +           put ') then ROLE="INPUT";';
22655  +           put 'else ROLE="REJECTED";';
22656  +           put 'end;';
22657  +
22658  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
22659  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
22660  +           %end;
22661  +        end;
22662  +     run;
22663  +     quit;
22664  +
22665  +     filename X;
22666  +     quit;
22667  +%mend MakeDeltaCode2;
22668  +
22669  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
22670  +  %global &ngc;
22671  +  data _null_;
22672  +  %if &indata ne %then %do;
22673  +      %let dsid = %sysfunc(open(&indata));
22674  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
22675  +      %let dsid = %sysfunc(close(&dsid));
22676  +  %end;
22677  +  %else %do;
22678  +       %let nvar = %eval(&ninput+&ndummy); ;
22679  +  %end;
22680  +  %let numgc = %eval(&nvar/&div+2);
22681  +  %let &ngc = &numgc;
22682  +   run;
22683  +  quit;
22684  +%mend getInitialGClusterNumber;
22685  +
22686  +
22687  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
22688  +data &outlink(drop = Selected);
22689  +     set &indata;
22690  +     LINKID = _N_;
22691  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
22692  +run;
22693  +data &outnode(keep=NODEID TYPE LABEL);
22694  +    set &indata;
22695  +    length TYPE $16;
22696  +    rename VARIABLE = NODEID;
22697  +    *label  CLUSNAME="Node ID";
22698  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22699  +    TYPE = "VARIABLE";
22700  +    *label TYPE = "Node Type";
22701  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22702  +    run;
22703  +data _tmp(keep=NODEID TYPE LABEL);
22704  +    set &indata;
22705  +    length TYPE $16;
22706  +    rename CLUSNAME = NODEID;
22707  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22708  +    TYPE = "GCLUSTER";
22709  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22710  +    run;
22711  +proc sort data=_tmp;
22712  +    by NODEID;
22713  +run;
22714  +data _tmp;
22715  +    set _tmp; by NODEID;
22716  +    if first.NODEID then output;
22717  +run;
22718  +proc sort data=&outnode;
22719  +    by NODEID;
22720  +run;
22721  +data  &outnode;
22722  +    set _tmp &outnode;
22723  +run;
22724  +proc datasets lib = work nolist;
22725  +     delete _tmp;
22726  +run;
22727  +quit;
22728  +%mend MakeGobalConstellData;
22729  +
22730  +/* Make contellation plot data among GCLUSTERS */
22731  +
22732  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
22733  +
22734  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
22735  +     set &indata;
22736  +     LINKID = _N_;
22737  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
22738  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
22739  +     end;
22740  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
22741  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
22742  +     end;
22743  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
22744  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
22745  +    end;
22746  +run;
22747  +
22748  +data _tmp_outrsquare;
22749  +        set &inoutrsq;
22750  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22751  +run;
22752  +
22753  +proc freq data =_tmp_outrsquare noprint;
22754  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
22755  +run;
22756  +
22757  +data &outnode(keep=_NAME_ TYPE LABEL);
22758  +    set &outlink;
22759  +    length TYPE $16;
22760  +    length LABEL $100;
22761  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
22762  +
22763  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22764  +    TYPE = "GCLUSTER";
22765  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22766  +    end;
22767  +    else do;
22768  +    TYPE= "ROOT";
22769  +    LABEL= _NAME_;
22770  +    end;
22771  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22772  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22773  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22774  +    run;
22775  +
22776  +proc sort data=&outnode;
22777  +     by _NAME_;
22778  +proc sort data=_tmp_GCLUSFREQ;
22779  +     by _NAME_;
22780  +run;
22781  +
22782  +data  &outnode;
22783  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
22784  +     if COUNT=. then COUNT=1;
22785  +run;
22786  +
22787  +proc datasets lib = work nolist;
22788  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
22789  +run;
22790  +
22791  +quit;
22792  +%Mend MakeGClusterConstData;
22793  +
22794  +
22795  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
22796  +
22797  +    data _gscoretmpds;
22798  +          set &indata;
22799  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
22800  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22801  +          if _TYPE_ = 'STD' then _NAME_='STD';
22802  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
22803  +          DROP _TYPE_ _NCL_;
22804  +     run;
22805  +
22806  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
22807  +        GCluster Component &globalclusid ------ */
22808  +
22809  +    filename _file_  "&fileref";
22810  +
22811  +    data _null_;
22812  +        %if &globalclusid eq 1 %then %do;
22813  +          FILE _file_;
22814  +        %end;
22815  +        %else %do;
22816  +          FILE _file_ MOD;
22817  +        %end;
22818  +
22819  +        %let dsid = %sysfunc(open(work._gscoretmpds));
22820  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22821  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22822  +
22823  +        %let k = 1;
22824  +        %do %while(^%sysfunc(fetch(&dsid)));
22825  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22826  +                %if &k > 2 %then %do;
22827  +                put "&_name = 0 ; ";
22828  +                %end;
22829  +                %let k = %eval(&k+1);
22830  +        %end;
22831  +
22832  +        %let rc = %sysfunc(rewind(&dsid));
22833  +        %do i= 2 %to &nvar;
22834  +            %let _varname =  %sysfunc(varname(&dsid, &i));
22835  +            %do %while(^%sysfunc(fetch(&dsid)));
22836  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22837  +                %if &_name = MEAN %then
22838  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
22839  +                %else %if &_name = STD %then
22840  +                %let _std = %sysfunc(getvarn(&dsid, &i));
22841  +                %else %do;
22842  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
22843  +                      %let abscoeff = %sysfunc(abs(&coeff));
22844  +                          %if &abscoeff >  0 %then %do;
22845  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22846  +                           %end;
22847  +                 %end;
22848  +             %end;
22849  +             %let rc = %sysfunc(rewind(&dsid));
22850  +
22851  +         %end;
22852  +
22853  +        %let dsid= %sysfunc(close(&dsid));
22854  +       run;
22855  +
22856  +
22857  +       proc datasets lib=work nolist;
22858  +            delete _gscoretmpds;
22859  +       run;
22860  +      quit;
22861  +
22862  +%mend CreateGClusterScoreCode;
22863  +
22864  +
22865  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
22866  +
22867  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
22868  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
22869  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
22870  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
22871  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
22872  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
22873  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
22874  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
22875  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
22876  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
22877  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
22878  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
22879  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
22880  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
22881  +
22882  +   filename gsfile "&gscorecode";
22883  +
22884  +   data &EM_USER_GSCORE;
22885  +             set &indata;
22886  +             %include  gsfile;
22887  +        keep
22888  +        %do i=1 %to &ngcluster;
22889  +         %let gcvarname = GC&i;
22890  +         &gcvarname
22891  +        %end;
22892  +     ;
22893  +   run;
22894  +
22895  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
22896  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
22897  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
22898  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
22899  +    noprint  ;
22900  +     var
22901  +       %do i=1 %to &ngcluster;
22902  +         %let gcvarname = GC&i;
22903  +         &gcvarname
22904  +        %end;
22905  +   ;
22906  +   run;
22907  +
22908  +
22909  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
22910  +   data &EM_USER_GSCORECORRPLOT ;
22911  +        set &EM_USER_GSCORECORRPLOT;
22912  +        rename _X_ = X;
22913  +        rename _Y_ = Y;
22914  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22915  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22916  +   run;
22917  +
22918  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
22919  +
22920  +   data &EM_USER_GSCORETREE;
22921  +        length _NAME_ $32;
22922  +        length _LABEL_ $100;
22923  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
22924  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22925  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22926  +        end;else do;
22927  +         _LABEL_ = _NAME_;
22928  +        end;
22929  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
22930  +
22931  +   run;
22932  +
22933  +   quit;
22934  +
22935  +%mend MakeGClusterCorrelation;
22936  +
22937  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
22938  +%macro report;
22939  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
22940  +
22941  +    data _null_;
22942  +         set &EM_USER_VARCLUSMETA;
22943  +         if _N_=1 then
22944  +         call symput('_trainnum', TrainNum);
22945  +    run;
22946  +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
22947  +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
22948  +           %include temp;
22949  +           filename temp;
22950  +           %report1;
22951  +       %end;
22952  +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
22953  +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
22954  +           %include temp;
22955  +           filename temp;
22956  +           %report2;
22957  +    %end;
22958  +
22959  +   /* End of all runs, change the flag of newtrain to N */
22960  +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
22961  +    data &EM_USER_VARCLUSMETA;
22962  +         set &EM_USER_VARCLUSMETA;
22963  +         NewTrain = "N";
22964  +    run;
22965  +    quit;
22966  +%mend report;
22967  +
22968  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      107148:166
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
22969  +%macro report1;
22971  +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
22972  +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
22973  +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
22975  +   data &EM_USER_OUTVARSEL;
22976  +        set &EM_USER_OUTRSQUARE;
22977  +        if upcase(strip(SELECTED)) = 'YES' then output;
22978  +   run;
22980  +   data _tmp_outrsquare;
22981  +        set &EM_USER_OUTRSQUARE;
22982  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22983  +   run;
22985  +   proc freq data =_tmp_outrsquare noprint;
22986  +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
22987  +   run;
22989  +   proc datasets lib = work nolist;
22990  +     delete _tmp_outrsquare;
22991  +   run;
22993  +   data &EM_USER_CLUSFREQ;
22994  +       set &EM_USER_CLUSFREQ;
22995  +       label
22996  +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
22997  +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
22998  +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
22999  +       ;
23000  +   run;
23002  +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
23003  +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
23004  +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
23006  +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
23007  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
23008  +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
23009  +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
23010  +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
23011  +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
23012  +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
23013  +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
23015  +   /*
23016  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
23017  +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
23018  +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
23021  +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTVARSEL has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 96 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS4.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23024   *------------------------------------------------------------*;
23025   * End REPORT: VarClus;
23026   *------------------------------------------------------------*;
23027
 
23028   /* Reset EM Options */
23029   options formchar="|----|+|---+=|-/\<>*";
23030   options nocenter ls=256 ps=10000;
23031   goptions reset=all device=GIF NODISPLAY;
 
23032   proc sort data=WORK.EM_USER_REPORT;
23033   by ID VIEW;
23034   run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
