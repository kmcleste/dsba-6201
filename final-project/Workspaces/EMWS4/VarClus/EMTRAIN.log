*------------------------------------------------------------*
* Training Log
Date:                April 13, 2022
Time:                19:29:31
*------------------------------------------------------------*
15225  proc freq data=EMWS4.VarClus_VariableSet noprint;
15226  table ROLE*LEVEL/out=WORK.VarClusMETA;
15227  run;

NOTE: There were 99 observations read from the data set EMWS4.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

15228  proc print data=WORK.VarClusMETA label noobs;
15229  var ROLE LEVEL COUNT;
15230  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15231  title9 ' ';
15232  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15233  run;

NOTE: There were 7 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15234  title10;

15235  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15629  *------------------------------------------------------------*;
15630  * VarClus: Generation of macros and macro variables;
15631  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15632  *------------------------------------------------------------*;

15633  %let EMEXCEPTIONSTRING=;
15634  *------------------------------------------------------------*;
15635  * TRAIN: VarClus;
15636  *------------------------------------------------------------*;
15637  %let EM_ACTION = TRAIN;
15638  %let syscc = 0;
15639  
15640  %macro main;
15641  
15642     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15643     %include temp;
15644     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15645     %include temp;
15646     filename temp;
15647  
15648    %SetProperties;
15649  
15650     %if %upcase(&EM_ACTION) = CREATE %then %do;
15651         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15652         %include temp;
15653         filename temp;
15654         %create;
15655     %end;
15656     %else
15657     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15658          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15659             %include temp;
15660             filename temp;
15661             %train;
15662     %end;
15663     %else
15664     %if %upcase(&EM_ACTION) = SCORE %then %do;
15665             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15666             %include temp;
15667             filename temp;
15668             %score;
15669     %end;
15670     %else
15671     %if %upcase(&EM_ACTION) = REPORT %then %do;
15672             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15673             %include temp;
15674             filename temp;
15675             %report;
15676     %end;
15677     /*
15678     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15679         %put 'OPENING TABLE';
15680     %end;
15681     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15682         %put 'CLOSE TABLE';
15683     %end;
15684     */
15685  %mend main;
15686  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15687 +
15688 +/* Initialize property macro variables */
15689 +%macro SetProperties;
15690 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15691 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15692 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15693 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15694 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15695 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15696 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15697 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15698 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15699 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15700 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15701 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15702 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15703 +
15704 +%mend SetProperties;
15705 +
15706 +%Macro MakeDummyVariables(indata=,
15707 +                          outvar=,
15708 +                          outdata=,
15709 +                          fileref=,
15710 +                          recreatecmeta=N, /* optional */
15711 +                          incmeta=,     /* optional */
15712 +                          outcmeta=,    /* optional */
15713 +                          ndummyvars=_ndummyvars
15714 +                          );
15715 +    %global &ndummyvars;
15716 +
15717 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15718 +       class
15719 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15720 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15721 +    ;
15722 +    run;
15723 +    %let &ndummyvars = 0;
15724 +    data _null_;
15725 +    %let dsid = %sysfunc(open(work._classout));
15726 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15727 +    %let dsid = %sysfunc(close(&dsid));
15728 +    run;
15729 +
15730 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15731 +       input
15732 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15733 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15734 +        / level=nominal stdize=no;
15735 +       make outvar = &outvar;
15736 +       score data = &indata out =&outdata;
15737 +       code  file=  "&fileref";
15738 +    run;
15739 +    %if &recreatecmeta eq Y %then %do;
15740 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15741 +    data _tmpds;
15742 +        set _tmpds;
15743 +           ROLE = 'INPUT';
15744 +           LEVEL = 'INTERVAL';
15745 +           CREATOR='DMZIP';
15746 +           if NAME = '_TYPE_' then delete;
15747 +    run;
15748 +    data &outcmeta;
15749 +         set &incmeta _tmpds;
15750 +    run;
15751 +    %end;
15752 +    proc datasets lib=work nolist;
15753 +      delete  _dmdbdat _dmdbcat _classout
15754 +    %if &recreatecmeta eq Y %then %do;
15755 +    _tmpds
15756 +    %end;
15757 +    ;
15758 +    quit;
15759 +%Mend MakeDummyVariables;
15760 +
15761 +/*--- Determine Optimal Number of Cluster ----
15762 +%macro FindClusNum(statds=, groupds=, minvariation=);
15763 +   %global optnclus;
15764 +   data varclus_tmp(drop=_NAME_);
15765 +      set &statDs;
15766 +      where _type_ ='PROPOR';
15767 +   run;
15768 +   proc sort data=varclus_tmp;
15769 +      by _NCL_;
15770 +   run;
15771 +   proc transpose data=varclus_tmp out=varclus_tmp;
15772 +      by _NCL_;
15773 +      var %EM_INTERVAL_INPUT
15774 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15775 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15776 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15777 +          %do i = 2 %to &nvar;
15778 +          %let varname = %sysfunc(varname(&dsid, &i));
15779 +          &varname
15780 +          %end;
15781 +      %end;
15782 +   ;
15783 +   run;
15784 +
15785 +   %if &minVariation eq %then %do;
15786 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15787 +   %end;
15788 +   %if ^(0<&minVariation<100) %then %do;
15789 +       %let minVariation = 90;
15790 +   %end;
15791 +
15792 +   data _null_;
15793 +      set varclus_tmp end=eof;
15794 +      by _NCL_;
15795 +      retain flag 0;
15796 +      if first._ncl_ then flag=0;
15797 +      if .<col1 < &minVariation then flag=1;
15798 +      if last._ncl_ and ^flag then do;
15799 +         call symput('OPTNCL', _ncl_);
15800 +         stop;
15801 +      end;
15802 +     if eof then call symput('OPTNCL', _ncl_);
15803 +   run;
15804 +
15805 +   %let optnclus = &OPTNCL;
15806 +
15807 +   data varclus_tmp(drop=_NCL_ _NAME_);
15808 +      set &statDs;
15809 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15810 +   run;
15811 +   proc sort data=varclus_tmp;
15812 +      by _TYPE_;
15813 +   run;
15814 +   proc transpose data=varclus_tmp out=varclus_tmp;
15815 +      by _TYPE_;
15816 +   run;
15817 +   proc sort data=varclus_tmp;
15818 +      by _name_ _type_;
15819 +   run;
15820 +
15821 +  proc transpose data=varclus_tmp out=&groupds;
15822 +      by _NAME_;
15823 +   run;
15824 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15825 +      by Cluster descending Rsquare;
15826 +      where Cluster ne 0;
15827 +   run;
15828 +   proc datasets lib=work nolist mt=(DATA VIEW);
15829 +      delete varclus_tmp;
15830 +   run;
15831 +   quit;
15832 +%mend findClusNum;
15833 +*/
15834 +
15835 +%macro getNclusfromTrain(inoutstat=, nc=);
15836 +%global &nc;
15837 +data _null_;
15838 +    set &inoutstat end=eof;
15839 +    if eof then do;
15840 +    call symput("&nc", _ncl_);
15841 +    end;
15842 +run;
15843 +%mend  getNclusfromTrain;
15844 +
15845 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15846 +
15847 +     *--- Build Code to Modify Metadata ---*;
15848 +     filename X "&deltacodefile";
15849 +     data _null_;
15850 +        FILE X;
15851 +        set &groupds end=eof;
15852 +        /*by Cluster;*/
15853 +         if _N_=1 then do;
15854 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15855 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15856 +           %end;
15857 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15858 +           put "if upcase(strip(NAME)) in (";
15859 +        end;
15860 +        if Strip(upcase(Selected)) eq 'YES' then do;
15861 +           string = '"'!!trim(left(VARIABLE))!!'"';
15862 +           put string;
15863 +        end;
15864 +        if eof then do;
15865 +           put ') then ROLE="INPUT";';
15866 +           put 'else ROLE="REJECTED";';
15867 +           put 'end;';
15868 +
15869 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15870 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15871 +           %end;
15872 +        end;
15873 +     run;
15874 +     quit;
15875 +
15876 +     filename X;
15877 +
15878 +     quit;
15879 +%mend MakeDeltaCode;
15880 +
15881 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15882 +    %if ^%sysfunc(exist(&statds)) %then %do;
15883 +         %goto doendc;
15884 +    %end;
15885 +
15886 +    data &corrds(drop=_TYPE_ _NCL_) ;
15887 +       set &statds;
15888 +       where _type_ eq 'CORR' ;
15889 +    run ;
15890 +    proc sort data=&corrds;
15891 +       by _NAME_ ;
15892 +    run ;
15893 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15894 +      BY _NAME_ ;
15895 +    run ;
15896 +    data &corrplotds;
15897 +       length _Y_ $100;
15898 +       set &corrplotDs;
15899 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15900 +    run ;
15901 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15902 +       set &corrplotds;
15903 +       where _LABEL_ ne '' ;
15904 +       keep _TMP_ _LABEL_ ;
15905 +    run ;
15906 +    data _null_;
15907 +       nobs=0;
15908 +       dsid = open('varclus_match');
15909 +       if dsid then do;
15910 +          nobs = attrn(dsid, 'NOBS');
15911 +          dsid = close(dsid);
15912 +       end;
15913 +       call symput ('CORR_NOBS', nobs);
15914 +    run;
15915 +    %if &corr_nobs %then %do;
15916 +        proc sort data=varclus_match;
15917 +           by _name_;
15918 +        run ;
15919 +        proc sort data=&corrplotds;
15920 +           by _name_;
15921 +        run ;
15922 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15923 +           merge varclus_match &corrplotds;
15924 +           by _NAME_ ;
15925 +           if _X_ eq '' then _X_=_NAME_ ;
15926 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15927 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15928 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15929 +
15930 +       run ;
15931 +    %end;
15932 +    %else %do;
15933 +        proc sort data=&corrplotds;
15934 +           by _name_;
15935 +        run ;
15936 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15937 +           set &corrplotds;
15938 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15939 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15940 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15941 +
15942 +        run ;
15943 +    %end;
15944 +    proc sort data=&corrplotds;
15945 +       by _X_ _Y_;
15946 +    run ;
15947 +    proc datasets lib=work nolist mt=(DATA VIEW);
15948 +       delete varclus_match;
15949 +    run;
15950 +    quit;
15951 +
15952 +%doendc:
15953 +
15954 +%mend MakeVarClusCorrData;
15955 +
15956 +%macro MakeStatPlotData(statds= , outstatplotds=);
15957 +   %if %sysfunc(exist(&statds)) %then %do;
15958 +
15959 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15960 +          set &statDs;
15961 +          where _type_ in('MEAN', 'STD', 'N');
15962 +       run ;
15963 +       proc transpose data=varclus_tmp out=&outstatplotds;
15964 +          id _TYPE_ ;
15965 +       run ;
15966 +       data &outstatplotds;
15967 +          set &outstatplotds(obs=1000);
15968 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15969 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15970 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15971 +          else SCALEDSTD= STD ;
15972 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15973 +       run ;
15974 +       proc sort data=&outstatplotds;
15975 +          by descending SCALEDSTD ;
15976 +       run ;
15977 +       proc datasets lib=work nolist mt=(DATA VIEW);
15978 +          delete varclus_tmp;
15979 +       run;
15980 +       quit;
15981 +    %end;
15982 +
15983 +%mend MakeStatPlotData;
15984 +
15985 +
15986 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15987 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15988 +    data &EM_USER_OUTSTATSCORE;
15989 +          set &indata;
15990 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15991 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15992 +          if _TYPE_ = 'STD' then _NAME_='STD';
15993 +          DROP _TYPE_ _NCL_;
15994 +     run;
15995 +
15996 +     filename _file_  "&fileRef";
15997 +
15998 +     data _null_;
15999 +        FILE _file_ MOD;
16000 +        put ' ';
16001 +        put '/*-------------------------------------------------*/';
16002 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
16003 +        put '/*-------------------------------------------------*/';
16004 +        put ' ';
16005 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
16006 +
16007 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16008 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16009 +
16010 +        %let k = 1;
16011 +        %do %while(^%sysfunc(fetch(&dsid)));
16012 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16013 +                %if &k > 2 %then %do;
16014 +                 %let cn = %eval(&k-2);
16015 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
16016 +                %end;
16017 +                %let k = %eval(&k+1);
16018 +        %end;
16019 +
16020 +        %let rc = %sysfunc(rewind(&dsid));
16021 +
16022 +        %do i= 2 %to &nvar;
16023 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16024 +            %do %while(^%sysfunc(fetch(&dsid)));
16025 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16026 +                %if &_name = MEAN %then
16027 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16028 +                %else %if &_name = STD %then
16029 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16030 +                %else %do;
16031 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16032 +                      %let abscoeff = %sysfunc(abs(&coeff));
16033 +                          %if &abscoeff >  0 %then %do;
16034 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16035 +                           %end;
16036 +                 %end;
16037 +             %end;
16038 +             %let rc = %sysfunc(rewind(&dsid));
16039 +         %end;
16040 +
16041 +        %let dsid= %sysfunc(close(&dsid));
16042 +       run;
16043 +%mend CreateScoreCode;
16044 +
16045 +
16046 +
16047 +/*----------------------------------------------------------
16048 +    Instead of using %MakeRSquareData,
16049 +    %MakeVarClusResultTable at macro2.source is used
16050 + +----------------------------------------------------------*/
16051 +
16052 +
16053 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
16054 +
16055 +/* modifying  from ods rsquare = data */
16056 +
16057 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
16058 +    Length Cluster $16;
16059 +    length Variable $32;
16060 +    Length VariableLabel $64;
16061 +    set &indata; retain CurrentCluster;
16062 +    if NumberOfClusters ^= &ncluster then delete;
16063 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
16064 +    CurrentCluster = Cluster;
16065 +   run;
16066 +proc sort data =&outdata ;
16067 +     by Cluster RsquareRatio;
16068 +run;
16069 +data _tmprsq(drop=index);
16070 +     set &outdata; by Cluster;
16071 +     if first.Cluster then do;
16072 +     index = strip(scan(Cluster,2 ));
16073 +     Variable = "Clus"||index;
16074 +     VariableLabel = "Cluster Component "||index;
16075 +     OwnCluster = 1;
16076 +     NextClosest = .;
16077 +     RsquareRatio = 0;
16078 +     output;
16079 +     end;
16080 +run;
16081 +
16082 +proc sort data = _tmprsq ;
16083 +     by Cluster RsquareRatio;
16084 +run;
16085 +data &outdata;
16086 +     set &outdata _tmprsq;
16087 +by Cluster;
16088 +run;
16089 +
16090 +
16091 +/* Just create the Selected variable with all YES */
16092 +
16093 +data &outdata;
16094 +    set &outdata; by cluster;
16095 +    length Selected $8;
16096 +    Selected = 'YES';
16097 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16098 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16099 +    rename OwnCluster = RSqWithClusterComp;
16100 +    rename NextClosest = RSqWithNextClusComp;
16101 +run;
16102 +
16103 +
16104 +/* Selected = Y/N will be done %score section -----
16105 +
16106 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
16107 +data &outdata;
16108 +    set &outdata; by cluster;
16109 +    length Selected $8;
16110 +    if first.Cluster then Selected = 'YES';
16111 +    else Selected = 'NO';
16112 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16113 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16114 +    rename OwnCluster = RSqWithClusterComp;
16115 +    rename NextClosest = RSqWithNextClusComp;
16116 +run;
16117 +%end;
16118 +%else %do;
16119 +data &outdata;
16120 +    set &outdata; by cluster;
16121 +    if last.Cluster then Selected = 'YES';
16122 +    else Selected = 'NO';
16123 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16124 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16125 +    rename OwnCluster = RSqWithClusterComp;
16126 +    rename NextClosest = RSqWithNextClusComp;
16127 +run;
16128 +%end;
16129 +---------------------------------------------------------------*/
16130 +
16131 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
16132 +/* to calculate NextClosestClusRsq */
16133 +proc transpose data = &inClusRSquare  out=_clusRsq;
16134 +      by cluster;
16135 +      run;
16136 +data _clusRsq;
16137 +     set _clusRsq;
16138 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
16139 +run;
16140 +
16141 +proc sort data=_clusRsq;
16142 +    by cluster col1;
16143 +    run;
16144 +data _clusRsq(drop=_NAME_ _LABEL_);
16145 +     set _clusRsq; by cluster;
16146 +     if last.Cluster then output;
16147 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
16148 +     rename COL1 = RSqWithNextClusComp;
16149 +     rename Cluster = Variable;
16150 +     label  Cluster = "Variable";
16151 +run;
16152 +
16153 +proc sort data =&outdata;
16154 +     by Variable;
16155 +run;
16156 +data &outdata;
16157 +    merge &outdata _clusRsq;
16158 +    by Variable;
16159 +run;
16160 +proc sort data =&outdata;
16161 +by Cluster  RsquareRatio;
16162 +run;
16163 +quit;
16164 +%end;
16165 +
16166 +proc datasets lib = work nolist;
16167 +     delete _tmprsq _clusRsq;
16168 +     run;
16169 +quit;
16170 +
16171 +%mend MakeRSquareData;
16172 +
16173 +
16174 +/*-------------------------------------------------------------------------*/
16175 +
16176 +
16177 +
16178 +%macro ModifyCorr(indata=,
16179 +                  outdata=,
16180 +                  rsquare = Y
16181 +                  );
16182 +    data corr_tmp;
16183 +        set &indata;
16184 +    run;
16185 +     proc sql;
16186 +           update &indata
16187 +           set
16188 +     %let dsid = %sysfunc(open(work.corr_tmp));
16189 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16190 +          %do i = 4 %to &nvar;
16191 +          %let _name = %sysfunc(varname(&dsid, &i));
16192 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16193 +            %else  %let _name_md = &_name;
16194 +            %if &i < &nvar %then %do;
16195 +               &_name = 1- &_name_md ,
16196 +            %end;
16197 +            %else %do;
16198 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
16199 +            %end;
16200 +          %end;
16201 +      %let dsid= %sysfunc(close(&dsid));
16202 +
16203 +      select * from &indata;
16204 +      run;
16205 +      proc datasets lib = work nolist;
16206 +           delete corr_tmp;
16207 +      run;
16208 +      quit;
16209 +
16210 + %mend ModifyCorr;
16211 +
16212 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
16213 +    data &outdata(drop= _NCL_  _TYPE_);
16214 +       set &indata;
16215 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16216 +       rename _NAME_ = Cluster;
16217 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16218 +    run;
16219 +    %if &RSquare eq Y %then %do;
16220 +     data corr_tmp;
16221 +        set &outdata;
16222 +     run;
16223 +
16224 +     data &outdata(drop=i);
16225 +          set &outdata;
16226 +          %let dsid = %sysfunc(open(work.corr_tmp));
16227 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16228 +          %do i = 2 %to &nvar;
16229 +            %let _name = %sysfunc(varname(&dsid, &i));
16230 +            %let _name_md = &_name.**2;
16231 +                &_name = &_name_md;
16232 +          %end;
16233 +      %let dsid= %sysfunc(close(&dsid));
16234 +      run;
16235 +      proc datasets lib = work nolist;
16236 +           delete corr_tmp;
16237 +      run;
16238 +
16239 +    %end;
16240 +     quit;
16241 +%mend MakeClusStructCorrData;
16242 +
16243 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
16244 +    data &outdata(drop= _NCL_  _TYPE_);
16245 +       set &indata;
16246 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16247 +       rename _NAME_ = Cluster;
16248 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16249 +    run;
16250 +    data corr_tmp;
16251 +        set &outdata;
16252 +    run;
16253 +
16254 +    %let dsid = %sysfunc(open(work.corr_tmp));
16255 +    %let nclus2= %eval(&ncluster+1);
16256 +    data &outdata;
16257 +         set &outdata;
16258 +          %do i = 2 %to &nclus2;
16259 +          %let i_1 = %eval(&i-1);
16260 +            %let _name = %sysfunc(varname(&dsid, &i));
16261 +            %let _newName = Clus&i_1;
16262 +                rename &_name = &_newName; ;
16263 +                *label &_name ="Cluster &i_1";
16264 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16265 +          %end;
16266 +          keep Cluster
16267 +          %do i = 2 %to &nclus2;
16268 +                %let _name = %sysfunc(varname(&dsid, &i));
16269 +                &_name
16270 +          %end;
16271 +          ;
16272 +    %let dsid= %sysfunc(close(&dsid));
16273 +     run;
16274 +     quit;
16275 +
16276 +    %if &RSquare eq Y %then %do;
16277 +
16278 +       data corr_tmp;
16279 +        set &outdata;
16280 +     run;
16281 +
16282 +     data &outdata(drop=i);
16283 +          set &outdata;
16284 +          %let dsid = %sysfunc(open(work.corr_tmp));
16285 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16286 +          %do i = 2 %to &nvar;
16287 +            %let _name = %sysfunc(varname(&dsid, &i));
16288 +            %let _name_md = &_name.**2;
16289 +                &_name = &_name_md;
16290 +          %end;
16291 +      %let dsid= %sysfunc(close(&dsid));
16292 +      run;
16293 +    %end;
16294 +
16295 +    %if &makeplotds eq Y %then %do;
16296 +     proc transpose data = &outdata
16297 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16298 +          by cluster;
16299 +     run;
16300 +     data &plotds;
16301 +          set  &plotds;
16302 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16303 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16304 +     run;
16305 +     %end;
16306 +     proc datasets lib = work nolist;
16307 +           delete corr_tmp;
16308 +     run;
16309 +     quit;
16310 +%mend MakeInterClusCorrData;
16311 +
16312 +
16313 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16314 +
16315 +data &outlink(drop = Selected);
16316 +     set &indata;
16317 +     LINKID = _N_;
16318 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16319 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16320 +run;
16321 +data &outnode(keep=NODEID TYPE LABEL);
16322 +    set &indata;
16323 +    length TYPE $16;
16324 +    rename Variable = NODEID;
16325 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16326 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16327 +    then  TYPE = "CLUSTER";
16328 +    else  TYPE="VARIABLE";
16329 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16330 +run;
16331 +quit;
16332 +%mend MakeClusConstellData;
16333 +
16334 +
16335 +
16336 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16337 +
16338 +data &outlink(drop = Selected);
16339 +     set &indata;
16340 +     LINKID = _N_;
16341 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16342 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16343 +run;
16344 +data &outnode(keep=NODEID TYPE LABEL);
16345 +    set &indata;
16346 +    length TYPE $16;
16347 +    rename Variable = NODEID;
16348 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16349 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16350 +    then  TYPE = "CLUSTER";
16351 +    else  TYPE="VARIABLE";
16352 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16353 +run;
16354 +quit;
16355 +%mend MakeClusConstellData;
16356 +
16357 +
16358 +/*--- This will work only when inds is not a view data -------
16359 +
16360 +%macro getNVarNObs(inds=, nvar=, nobs=);
16361 +
16362 +    %global &nvar;
16363 +    %global &nobs;
16364 +    data _null_;
16365 +         dsid = open("&inds");
16366 +         nv = attrn(dsid, 'NVAR');
16367 +         no = attrn(dsid, 'NOBS');
16368 +         dsid = close(dsid);
16369 +         call symput("&nvar", nv);
16370 +         call symput("&nobs", no);
16371 +    run;
16372 +    quit;
16373 +%mend  getNVarNObs;
16374 +
16375 ++---------------------------------------------------------------*/
16376 +
16377 +
16378 +%macro getNVar(inds=, nvar=);
16379 +    %global &nvar;
16380 +    data _null_;
16381 +         dsid = open("&inds");
16382 +         nv = attrn(dsid, 'NVAR');
16383 +         dsid = close(dsid);
16384 +         call symput("&nvar", nv);
16385 +    run;
16386 +    quit;
16387 +%mend  getNVar;
16388 +
16389 +
16390 +
16391 +%macro getNObs(inds=, nobs=);
16392 +    %global &nobs;
16393 +    data _null_;
16394 +        set &inds end=eof;
16395 +        if eof then call symput("&nobs", _N_);
16396 +    run;
16397 +    quit;
16398 +%mend  getNObs;
16399 +
16400 +%Macro CreateVarclusMeta(trainnum=);
16401 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
16402 +    data &EM_USER_VARCLUSMETA;
16403 +         length TrainNum 8.;
16404 +         length NewTrain $8;
16405 +         length NGCluster 8.;
16406 +         length ExportedComp $16;
16407 +         length HideVariable $8;
16408 +         TrainNum = &trainnum;
16409 +         NewTrain = "Y";
16410 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
16411 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
16412 +         NGCluster = 0; /* zero means no twostage */
16413 +   run;
16414 +   quit;
16415 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
16416 +
16417 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
16418 +    data &outdata(drop= _NCL_  _TYPE_);
16419 +       set &indata;
16420 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16421 +       %if &globalclusid ne %then %do;
16422 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16423 +       rename _NAME_ = Cluster;
16424 +       %end;
16425 +       %else %do;
16426 +        _NAME_ = upcase(_NAME_);
16427 +       rename _NAME_ = Cluster;
16428 +       %end;
16429 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16430 +    run;
16431 +    data corr_tmp;
16432 +        set &outdata;
16433 +    run;
16434 +
16435 +    %let dsid = %sysfunc(open(work.corr_tmp));
16436 +    %let nclus2= %eval(&ncluster+1);
16437 +    data &outdata;
16438 +         set &outdata;
16439 +          %do i = 2 %to &nclus2;
16440 +          %let i_1 = %eval(&i-1);
16441 +            %let _name = %sysfunc(varname(&dsid, &i));
16442 +            %if &globalclusid ne %then
16443 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
16444 +                     rename &_name = &_newName;
16445 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
16446 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
16447 +                %end;
16448 +            %else
16449 +                %do; %let _newName = CLUS&i_1;
16450 +                     rename &_name = &_newName;
16451 +                     *label &_name ="Cluster &i_1";
16452 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16453 +                %end;
16454 +          %end;
16455 +          keep Cluster
16456 +          %do i = 2 %to &nclus2;
16457 +                %let _name = %sysfunc(varname(&dsid, &i));
16458 +                &_name
16459 +          %end;
16460 +          ;
16461 +    %let dsid= %sysfunc(close(&dsid));
16462 +     run;
16463 +     quit;
16464 +
16465 +    %if &RSquare eq Y %then %do;
16466 +
16467 +       data corr_tmp;
16468 +        set &outdata;
16469 +     run;
16470 +
16471 +     data &outdata;
16472 +          set &outdata;
16473 +          %let dsid = %sysfunc(open(work.corr_tmp));
16474 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16475 +          %do i = 2 %to &nvar;
16476 +            %let _name = %sysfunc(varname(&dsid, &i));
16477 +            %let _name_md = &_name.**2;
16478 +                &_name = &_name_md;
16479 +          %end;
16480 +      %let dsid= %sysfunc(close(&dsid));
16481 +      run;
16482 +    %end;
16483 +
16484 +    %if &makeplotds eq Y %then %do;
16485 +     proc transpose data = &outdata
16486 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16487 +          by cluster;
16488 +     run;
16489 +     data &plotds;
16490 +          set  &plotds;
16491 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16492 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16493 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16494 +     run;
16495 +     %end;
16496 +     proc datasets lib = work nolist;
16497 +           delete corr_tmp;
16498 +     run;
16499 +     quit;
16500 +%mend MakeInterClusCorrData;
16501 +
16502 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
16503 +    data _tmpds(drop= _NCL_);
16504 +       set &indata;
16505 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
16506 +       %if &globalclusid ne %then %do;
16507 +           _NAME_ = "GC&globalclusid.";
16508 +       rename _NAME_ = Cluster;
16509 +       %end;
16510 +       %else %do;
16511 +        _NAME_ = "CLUS";
16512 +        rename _NAME_ = Cluster;
16513 +       %end;
16514 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16515 +    run;
16516 +    proc transpose data =_tmpds out =&outdata;
16517 +    run;
16518 +
16519 +    data &outdata(drop=COL1);
16520 +        %if &globalclusid ne %then %do;
16521 +        length GCluster $16;
16522 +        %end;
16523 +        length Cluster $32;
16524 +        length _NAME_ $32;
16525 +         set &outdata;
16526 +         _NAME_ = upcase(_NAME_);
16527 +         rename _NAME_=Variable;
16528 +         *label _NAME_="Variable";
16529 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16530 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16531 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16532 +
16533 +         %if &globalclusid ne %then %do;
16534 +          GCluster = "GC&globalclusid";
16535 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16536 +         %end;
16537 +         %else %do;
16538 +         Cluster = "CLUS"||strip(COL1);
16539 +        %end;
16540 +         rename COL2 = RSqWithOwnClusComp;
16541 +         *label COL2 = "R-Square With Own Cluster Component";
16542 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16543 +
16544 +   run;
16545 +   proc sort data =&outdata;
16546 +        by Cluster RSqWithOwnClusComp;
16547 +   run;
16548 +   proc datasets lib = work nolist;
16549 +           delete _tmpds;
16550 +   run;
16551 +   quit;
16552 +%mend MakeOwnRSquare;
16553 +
16554 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16555 +    data &outdata(drop= _NCL_  _TYPE_);
16556 +       %if &globalclusid ne %then %do;
16557 +        length GCluster $16;
16558 +        %end;
16559 +       set &indata;
16560 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16561 +       %if &globalclusid ne %then %do;
16562 +         GCluster = "GC&globalclusid";
16563 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16564 +         rename _NAME_ = Cluster;
16565 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16566 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16567 +
16568 +       %end;
16569 +       %else %do;
16570 +         _NAME_ = upcase(_NAME_);
16571 +         rename _NAME_ = Cluster;
16572 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16573 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16574 +
16575 +       %end;
16576 +     run;
16577 +    %if &RSquare eq Y %then %do;
16578 +     data corr_tmp;
16579 +          set &outdata;
16580 +     run;
16581 +     %let istart = 2;
16582 +     %if &globalclusid ne %then %let istart = 3;
16583 +     data &outdata;
16584 +          set &outdata;
16585 +          %let dsid = %sysfunc(open(work.corr_tmp));
16586 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16587 +          %do i =&istart %to &nvar;
16588 +            %let _name = %sysfunc(varname(&dsid, &i));
16589 +            %let _name_md = &_name.**2;
16590 +                &_name = &_name_md;
16591 +          %end;
16592 +      %let dsid= %sysfunc(close(&dsid));
16593 +      run;
16594 +      proc datasets lib = work nolist;
16595 +           delete corr_tmp;
16596 +      run;
16597 +    %end;
16598 +     quit;
16599 +%mend MakeClusStructCorrData;
16600 +
16601 +/*
16602 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16603 +*/
16604 +
16605 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16606 +
16607 +     /* The indata should be the outdata
16608 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16609 +
16610 +     proc sort data =&indata out=_tmpclusRsq;
16611 +     by cluster;
16612 +     run;
16613 +
16614 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16615 +      by cluster;
16616 +     run;
16617 +
16618 +     proc sort data=_tmpclusRsq;
16619 +        by _NAME_ COL1;
16620 +     run;
16621 +
16622 +     data _tmpclusRsq;
16623 +         length _NAME_ $32;
16624 +         set _tmpclusRsq; by _NAME_;
16625 +          _NAME_ = upcase(_NAME_);
16626 +          %if &ncluster ne 1 %then %do;
16627 +             if last._NAME_ then delete;
16628 +          %end;
16629 +          %else %do;
16630 +             COL1 = 0;
16631 +          %end;
16632 +     run;
16633 +     /* need to sort again */
16634 +     proc sort data=_tmpclusRsq;
16635 +        by _NAME_ COL1;
16636 +     run;
16637 +
16638 +     data &outdata;
16639 +         set _tmpclusRsq; by _NAME_;
16640 +         Cluster = upcase(Cluster);
16641 +         if last._NAME_ then output;
16642 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16643 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16644 +         rename COL1 = RSqWithNextClusComp;
16645 +         Cluster = upcase(Cluster);
16646 +         rename Cluster = ClosestCluster;
16647 +         *label  Cluster = "Next Closest Cluster";
16648 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16649 +         rename _NAME_ = Variable;
16650 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16651 +    run;
16652 +
16653 +
16654 +    %if &globalclusid ne %then %do;
16655 +    data &outdata;
16656 +       length GCluster $16;
16657 +       set &outdata;
16658 +       GCluster = "GC&globalclusid";
16659 +       run;
16660 +    %end;
16661 +    proc datasets lib = work nolist;
16662 +           delete _tmpclusRsq;
16663 +    run;
16664 +    quit;
16665 +%mend FindNextClosestClusByVar;
16666 +
16667 +
16668 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16669 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16670 +     proc sort data =&indata out=_tmpclusRsq;
16671 +     by cluster;
16672 +     run;
16673 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16674 +     by cluster;
16675 +     run;
16676 +     proc sort data=_tmpclusRsq;
16677 +        by _NAME_ col1;
16678 +     run;
16679 +     data _tmpclusRsq;
16680 +         length _NAME_ $32;
16681 +         set _tmpclusRsq; by _NAME_;
16682 +          _NAME_ = upcase(_NAME_);
16683 +          %if &ncluster ne 1 %then %do;
16684 +             if last._NAME_ then delete;
16685 +          %end;
16686 +          %else %do;
16687 +             COL1 = 0;
16688 +          %end;
16689 +     run;
16690 +     data &outdata;
16691 +         set _tmpclusRsq; by _NAME_;
16692 +         Cluster = upcase(Cluster);
16693 +         if last._NAME_ then output;
16694 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16695 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16696 +         rename COL1 = RSqWithNextClusComp;
16697 +         Cluster = upcase(Cluster);
16698 +         rename Cluster = ClosestCluster;
16699 +         *label  Cluster = "Next Closest Cluster";
16700 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16701 +         rename _NAME_ = Variable;
16702 +         *label  _NAME_ = "Variable";
16703 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16704 +
16705 +    run;
16706 +    %if &globalclusid ne %then %do;
16707 +    data &outdata;
16708 +       length GCluster $16;
16709 +       set &outdata;
16710 +       GCluster = "GC&globalclusid";
16711 +       run;
16712 +    %end;
16713 +
16714 +    proc datasets lib = work nolist;
16715 +           delete _tmpclusRsq;
16716 +    run;
16717 +
16718 +    quit;
16719 +%mend FindNextClosestClusByCluster;
16720 +
16721 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16722 +/*----
16723 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16724 +-----------*/
16725 +
16726 +proc sort data =&indata1;
16727 +    by Variable;
16728 +run;
16729 +proc sort data =&indata2;
16730 +    by Variable;
16731 +run;
16732 +data &outdata;
16733 +    merge &indata1 &indata2;
16734 +    by Variable;
16735 +    length Type $16;
16736 +    Type = 'Variable';
16737 +    *label Type ='Type';
16738 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16739 +run;
16740 +
16741 +
16742 +data &indata3;
16743 +    set  &indata3 ;
16744 +    length RSqWithOwnClusComp 8.;
16745 +    Cluster = Variable;
16746 +    RSqWithOwnClusComp = 1;
16747 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16748 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16749 +    length Type $16;
16750 +    Type = 'ClusterComp';
16751 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16752 +
16753 +;
16754 +run;
16755 +
16756 +proc sort data=&outdata;
16757 +    by Cluster;
16758 +run;
16759 +proc sort data =&indata3;
16760 +    by Cluster;
16761 +run;
16762 +
16763 +data &outdata;
16764 +     set &outdata &indata3;
16765 +     by Cluster;
16766 +run;
16767 +
16768 +
16769 +/* Create the Selected variable with all YES */
16770 +
16771 +data &outdata;
16772 +     set &outdata;
16773 +     length RsqRatio 8.;
16774 +     length Selected $8;
16775 +     *label RSqRatio = "1-R**2 Ratio";
16776 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16777 +     *label Selected = "Variable Selected";
16778 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16779 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16780 +     Selected ='YES';
16781 +     rename _LABEL_ = Label;
16782 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16783 +run;
16784 +
16785 +
16786 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16787 +        Just create the Selected variable with all YES at the step above
16788 + +------------------------------------------------------------------------------+
16789 +
16790 +proc sort data=&outdata;
16791 +    by Cluster RsqRatio;
16792 +run;
16793 +
16794 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16795 +data &outdata;
16796 +     set &outdata; by Cluster;
16797 +     length Selected $8;
16798 +     label Selected = "Variable Selected";
16799 +     if  first.Cluster then Selected ='Yes';
16800 +     else Selected = 'No';
16801 +    run;
16802 +%end;
16803 +%else %do;
16804 +data &outdata(drop = _var _varchange);
16805 +     set &outdata; retain _var 0; by Cluster;
16806 +     length Selected $8;
16807 +     label Selected = "Variable Selected";
16808 +     if first.Cluster then  _varchange = 0;
16809 +     else _varchange =1;
16810 +     if _var ne _varchange then  Selected  = 'Yes';
16811 +     else Selected = 'No';
16812 +     if last.cluster then  _var = 0;
16813 +     else _var = _varchange;
16814 +run;
16815 +%end;
16816 +
16817 +--------------------------------------------------------------*/
16818 +
16819 +quit;
16820 +%mend MakeVarClusResultTable;
16821 +
16822 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16823 +     proc sort data =&indata;
16824 +        by cluster;
16825 +     run;
16826 +     proc transpose data =&indata
16827 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16828 +          by cluster;
16829 +     run;
16830 +     data &outdata;
16831 +          set  &outdata;
16832 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16833 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16834 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16835 +     run;
16836 +     %if &globalclusid ne %then %do;
16837 +     data &outdata;
16838 +          Length GCluster $16;
16839 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16840 +          set  &outdata;
16841 +          GCluster ="GC&globalclusid.";
16842 +          run;
16843 +     %end;
16844 +
16845 +%Mend MakePlotDataFromCorrTable;
16846 +
16847 +
16848 +%macro MakeCorrelation(indata=,
16849 +                       outstat=_tmpoutstat,
16850 +                       corrmatrix=N,
16851 +                       outcorr=_tmpoutcorr,
16852 +                       includeclassvar=N,
16853 +                       target=,
16854 +                       freq=,
16855 +                       weight=);
16856 +   %if &target eq  %then %do;
16857 +
16858 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16859 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16860 +       %if &includeclassvar eq Y %then %do;
16861 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16862 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16863 +          %do i = 2 %to &nvar;
16864 +          %let varname = %sysfunc(varname(&dsid, &i));
16865 +          &varname
16866 +          %end;
16867 +       %end;
16868 +       ;
16869 +      %if &freq ne  %then %do;
16870 +          freq &freq;
16871 +      %end;
16872 +      %if &weight ne  %then %do;
16873 +          weight &weight;
16874 +      %end;
16875 +
16876 +      run;
16877 +      %if &corrmatrix eq Y %then %do;
16878 +      data  &outcorr (drop = _NCL_ _TYPE_);
16879 +           set  &outstat ;
16880 +           if _TYPE_ ='CORR' then output;
16881 +      run;
16882 +      %end;
16883 +    %end;
16884 +    %else %do;
16885 +       proc corr data=&indata outp=&outstat noprint;
16886 +            var
16887 +       %let dsid = %sysfunc(open(&indata));
16888 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16889 +          %do i = 1 %to &nvar;
16890 +              %let _name = %sysfunc(varname(&dsid, &i));
16891 +              %if &_name ne &target %then;
16892 +              &_name
16893 +           %end;
16894 +        %let dsid= %sysfunc(close(&dsid));
16895 +        ;
16896 +        with &target;
16897 +        run;
16898 +    %end;
16899 +    quit;
16900 +%mend MakeCorrelation;
16901 +
16902 +
16903 +%macro MakeCorrelationDistance(indata=,
16904 +                               outdata=,
16905 +                               rsquare = N
16906 +                               );
16907 +    data corr_tmp;
16908 +        set &indata;
16909 +        if _N_ = 1 then do;
16910 +           output;
16911 +           stop;
16912 +         end;
16913 +    run;
16914 +    %if &outdata ne  %then %let  _outdata = &outdata;
16915 +    %else %let _outdata = &indata;
16916 +
16917 +    data &_outdata;
16918 +         set &indata;
16919 +
16920 +         %let dsid = %sysfunc(open(work.corr_tmp));
16921 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16922 +          %do i = 2 %to &nvar;
16923 +              %let _name = %sysfunc(varname(&dsid, &i));
16924 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16925 +              %else  %let _name_md = &_name;
16926 +              &_name = 1- &_name_md;
16927 +          %end;
16928 +      %let dsid= %sysfunc(close(&dsid));
16929 +      run;
16930 +      proc datasets lib = work nolist;
16931 +           delete corr_tmp;
16932 +      run;
16933 +      quit;
16934 +  %mend MakeCorrelationDistance;
16935 +
16936 +
16937 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16938 +                                   rsquare = N
16939 +                                   );
16940 +    data corr_tmp;
16941 +        set &indata;
16942 +    run;
16943 +    proc sql noprint;
16944 +           update &indata
16945 +           set
16946 +     %let dsid = %sysfunc(open(work.corr_tmp));
16947 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16948 +          %do i = 4 %to &nvar;
16949 +          %let _name = %sysfunc(varname(&dsid, &i));
16950 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16951 +            %else  %let _name_md = &_name;
16952 +            %if &i < &nvar %then %do;
16953 +               &_name = 1- &_name_md ,
16954 +            %end;
16955 +            %else %do;
16956 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16957 +            %end;
16958 +          %end;
16959 +      %let dsid= %sysfunc(close(&dsid));
16960 +
16961 +      select * from &indata;
16962 +      run;
16963 +     data &indata( drop = _NCL_);
16964 +           set &indata;
16965 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16966 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16967 +     run;
16968 +     data &indata(DROP = _NCL_);
16969 +           set &indata;
16970 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16971 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16972 +           rename _NAME_ = _VAR_;
16973 +     run;
16974 +     proc datasets lib = work nolist;
16975 +           delete corr_tmp;
16976 +     run;
16977 +     quit;
16978 + %mend UpdateOutStatCorrToDistance;
16979 +
16980 +
16981 +%macro HierClusWithCorr(indata= ,
16982 +                        ncluster=,
16983 +                        method = Ward,
16984 +                        outtree = _outtree,
16985 +                        idvar =_VAR_,
16986 +                        outdata=,
16987 +                        rescore = N,
16988 +                        newncluster=
16989 +                        );
16990 +      %global &newncluster;
16991 +      %if &rescore ne Y %then %do;
16992 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16993 +                   method=&method outtree=&outtree noprint;
16994 +           id &idvar;
16995 +      run;
16996 +      %end;
16997 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16998 +      run;
16999 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
17000 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
17001 +      run;
17002 +      data _outcontent;
17003 +          set _outcontent;
17004 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
17005 +          index = 1;
17006 +          rename NAME = _NAME_;
17007 +      run;
17008 +      proc sort data=_outcontent;
17009 +          by _NAME_;
17010 +      run;
17011 +      proc sort data =&outdata;
17012 +           by _NAME_;
17013 +      run;
17014 +      data &outdata(drop=index);
17015 +          merge &outdata _outcontent;
17016 +          by _NAME_;
17017 +          if index = . then delete;
17018 +      run;
17019 +      /*-----------------------------------------------------------*/
17020 +      data &outdata;
17021 +           length CLUSNAME $16;
17022 +           set &outdata;
17023 +           if CLUSTER > &ncluster then delete;
17024 +           CLUSNAME='GC'||strip(CLUSTER);
17025 +           *label CLUSNAME = "Cluster Name";
17026 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
17027 +           rename _NAME_ = VARIABLE ;
17028 +           *label _NAME_ = "Variable";
17029 +           *label CLUSTER = "Cluster";
17030 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17031 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17032 +      run;
17033 +      proc sort data=&outdata out=&outdata;
17034 +           by CLUSTER;
17035 +      run;
17036 +      proc means data =&outdata noprint;
17037 +           output out=_meanout;
17038 +      run;
17039 +      data _null_;
17040 +            set _meanout;
17041 +            if strip(_STAT_) eq 'MAX' then do;
17042 +            call symput("&newncluster", CLUSTER);
17043 +            stop;
17044 +            end;
17045 +      run;
17046 +
17047 +      proc datasets lib = work nolist;
17048 +           delete _outcontent _meanout;
17049 +      run;
17050 +      quit;
17051 +%mend  HierClusWithCorr;
17052 +
17053 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
17054 +
17055 +     data _tmpindata;
17056 +          set &indata;
17057 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
17058 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17059 +          if _TYPE_ = 'STD' then _NAME_='STD';
17060 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
17061 +          DROP _TYPE_ _NCL_;
17062 +     run;
17063 +
17064 +     filename _file_  "&fileRef";
17065 +
17066 +     data _null_;
17067 +        FILE _file_ MOD;
17068 +        put ' ';
17069 +        put "/*-------------------------------------------------*/";
17070 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
17071 +        put "/*-------------------------------------------------*/";
17072 +        put ' ';
17073 +        %let dsid = %sysfunc(open(work._tmpindata));
17074 +
17075 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17076 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17077 +        %let k = 1;
17078 +        %do %while(^%sysfunc(fetch(&dsid)));
17079 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17080 +               %if &k > 2 %then %do;
17081 +                %let cn = %eval(&k-2);
17082 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
17083 +                %end;
17084 +                %let k = %eval(&k+1);
17085 +
17086 +        %end;
17087 +        %let rc = %sysfunc(rewind(&dsid));
17088 +
17089 +        %do j= 2 %to &nvar;
17090 +            %let _varname = %sysfunc(varname(&dsid, &j));
17091 +            %do %while(^%sysfunc(fetch(&dsid)));
17092 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17093 +                %if &_name = MEAN %then
17094 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
17095 +                %else %if &_name = STD %then
17096 +                %let _std = %sysfunc(getvarn(&dsid, &j));
17097 +                %else %do;
17098 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
17099 +                      %let abscoeff = %sysfunc(abs(&coeff));
17100 +                          %if &abscoeff >  0 %then %do;
17101 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17102 +                           %end;
17103 +                 %end;
17104 +             %end;
17105 +             %let rc = %sysfunc(rewind(&dsid));
17106 +         %end;
17107 +
17108 +        %let dsid= %sysfunc(close(&dsid));
17109 +
17110 +     run;
17111 +
17112 +     filename _file_;
17113 +     proc datasets lib = work nolist;
17114 +           delete _tmpindata;
17115 +     run;
17116 +     quit;
17117 +%mend CreateScoreCode2;
17118 +
17119 +
17120 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
17121 +
17122 +     /*--- Build Code to Modify Metadata ---*/
17123 +     filename X "&deltacodefile";
17124 +     data _null_;
17125 +        FILE X;
17126 +        set &groupds end=eof;
17127 +        if _N_=1 then do;
17128 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17129 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17130 +           %end;
17131 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17132 +           put "if upcase(strip(NAME)) in (";
17133 +        end;
17134 +        if Strip(upcase(Selected)) eq 'YES' then do;
17135 +           string = '"'!!trim(left(VARIABLE))!!'"';
17136 +           put string;
17137 +        end;
17138 +        if eof then do;
17139 +           put ') then ROLE="INPUT";';
17140 +           put 'else ROLE="REJECTED";';
17141 +           put 'end;';
17142 +
17143 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17144 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17145 +           %end;
17146 +        end;
17147 +     run;
17148 +     quit;
17149 +
17150 +     filename X;
17151 +     quit;
17152 +%mend MakeDeltaCode2;
17153 +
17154 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
17155 +  %global &ngc;
17156 +  data _null_;
17157 +  %if &indata ne %then %do;
17158 +      %let dsid = %sysfunc(open(&indata));
17159 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
17160 +      %let dsid = %sysfunc(close(&dsid));
17161 +  %end;
17162 +  %else %do;
17163 +       %let nvar = %eval(&ninput+&ndummy); ;
17164 +  %end;
17165 +  %let numgc = %eval(&nvar/&div+2);
17166 +  %let &ngc = &numgc;
17167 +   run;
17168 +  quit;
17169 +%mend getInitialGClusterNumber;
17170 +
17171 +
17172 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
17173 +data &outlink(drop = Selected);
17174 +     set &indata;
17175 +     LINKID = _N_;
17176 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
17177 +run;
17178 +data &outnode(keep=NODEID TYPE LABEL);
17179 +    set &indata;
17180 +    length TYPE $16;
17181 +    rename VARIABLE = NODEID;
17182 +    *label  CLUSNAME="Node ID";
17183 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17184 +    TYPE = "VARIABLE";
17185 +    *label TYPE = "Node Type";
17186 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17187 +    run;
17188 +data _tmp(keep=NODEID TYPE LABEL);
17189 +    set &indata;
17190 +    length TYPE $16;
17191 +    rename CLUSNAME = NODEID;
17192 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17193 +    TYPE = "GCLUSTER";
17194 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17195 +    run;
17196 +proc sort data=_tmp;
17197 +    by NODEID;
17198 +run;
17199 +data _tmp;
17200 +    set _tmp; by NODEID;
17201 +    if first.NODEID then output;
17202 +run;
17203 +proc sort data=&outnode;
17204 +    by NODEID;
17205 +run;
17206 +data  &outnode;
17207 +    set _tmp &outnode;
17208 +run;
17209 +proc datasets lib = work nolist;
17210 +     delete _tmp;
17211 +run;
17212 +quit;
17213 +%mend MakeGobalConstellData;
17214 +
17215 +/* Make contellation plot data among GCLUSTERS */
17216 +
17217 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
17218 +
17219 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
17220 +     set &indata;
17221 +     LINKID = _N_;
17222 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
17223 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
17224 +     end;
17225 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
17226 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
17227 +     end;
17228 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
17229 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
17230 +    end;
17231 +run;
17232 +
17233 +data _tmp_outrsquare;
17234 +        set &inoutrsq;
17235 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
17236 +run;
17237 +
17238 +proc freq data =_tmp_outrsquare noprint;
17239 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
17240 +run;
17241 +
17242 +data &outnode(keep=_NAME_ TYPE LABEL);
17243 +    set &outlink;
17244 +    length TYPE $16;
17245 +    length LABEL $100;
17246 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
17247 +
17248 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17249 +    TYPE = "GCLUSTER";
17250 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17251 +    end;
17252 +    else do;
17253 +    TYPE= "ROOT";
17254 +    LABEL= _NAME_;
17255 +    end;
17256 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17257 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17258 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17259 +    run;
17260 +
17261 +proc sort data=&outnode;
17262 +     by _NAME_;
17263 +proc sort data=_tmp_GCLUSFREQ;
17264 +     by _NAME_;
17265 +run;
17266 +
17267 +data  &outnode;
17268 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
17269 +     if COUNT=. then COUNT=1;
17270 +run;
17271 +
17272 +proc datasets lib = work nolist;
17273 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
17274 +run;
17275 +
17276 +quit;
17277 +%Mend MakeGClusterConstData;
17278 +
17279 +
17280 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
17281 +
17282 +    data _gscoretmpds;
17283 +          set &indata;
17284 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
17285 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17286 +          if _TYPE_ = 'STD' then _NAME_='STD';
17287 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
17288 +          DROP _TYPE_ _NCL_;
17289 +     run;
17290 +
17291 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17292 +        GCluster Component &globalclusid ------ */
17293 +
17294 +    filename _file_  "&fileref";
17295 +
17296 +    data _null_;
17297 +        %if &globalclusid eq 1 %then %do;
17298 +          FILE _file_;
17299 +        %end;
17300 +        %else %do;
17301 +          FILE _file_ MOD;
17302 +        %end;
17303 +
17304 +        %let dsid = %sysfunc(open(work._gscoretmpds));
17305 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17306 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17307 +
17308 +        %let k = 1;
17309 +        %do %while(^%sysfunc(fetch(&dsid)));
17310 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17311 +                %if &k > 2 %then %do;
17312 +                put "&_name = 0 ; ";
17313 +                %end;
17314 +                %let k = %eval(&k+1);
17315 +        %end;
17316 +
17317 +        %let rc = %sysfunc(rewind(&dsid));
17318 +        %do i= 2 %to &nvar;
17319 +            %let _varname =  %sysfunc(varname(&dsid, &i));
17320 +            %do %while(^%sysfunc(fetch(&dsid)));
17321 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17322 +                %if &_name = MEAN %then
17323 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
17324 +                %else %if &_name = STD %then
17325 +                %let _std = %sysfunc(getvarn(&dsid, &i));
17326 +                %else %do;
17327 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
17328 +                      %let abscoeff = %sysfunc(abs(&coeff));
17329 +                          %if &abscoeff >  0 %then %do;
17330 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17331 +                           %end;
17332 +                 %end;
17333 +             %end;
17334 +             %let rc = %sysfunc(rewind(&dsid));
17335 +
17336 +         %end;
17337 +
17338 +        %let dsid= %sysfunc(close(&dsid));
17339 +       run;
17340 +
17341 +
17342 +       proc datasets lib=work nolist;
17343 +            delete _gscoretmpds;
17344 +       run;
17345 +      quit;
17346 +
17347 +%mend CreateGClusterScoreCode;
17348 +
17349 +
17350 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
17351 +
17352 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
17353 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
17354 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
17355 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
17356 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
17357 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
17358 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
17359 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
17360 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
17361 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
17362 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
17363 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
17364 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
17365 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
17366 +
17367 +   filename gsfile "&gscorecode";
17368 +
17369 +   data &EM_USER_GSCORE;
17370 +             set &indata;
17371 +             %include  gsfile;
17372 +        keep
17373 +        %do i=1 %to &ngcluster;
17374 +         %let gcvarname = GC&i;
17375 +         &gcvarname
17376 +        %end;
17377 +     ;
17378 +   run;
17379 +
17380 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
17381 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17382 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17383 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17384 +    noprint  ;
17385 +     var
17386 +       %do i=1 %to &ngcluster;
17387 +         %let gcvarname = GC&i;
17388 +         &gcvarname
17389 +        %end;
17390 +   ;
17391 +   run;
17392 +
17393 +
17394 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
17395 +   data &EM_USER_GSCORECORRPLOT ;
17396 +        set &EM_USER_GSCORECORRPLOT;
17397 +        rename _X_ = X;
17398 +        rename _Y_ = Y;
17399 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17400 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17401 +   run;
17402 +
17403 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
17404 +
17405 +   data &EM_USER_GSCORETREE;
17406 +        length _NAME_ $32;
17407 +        length _LABEL_ $100;
17408 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
17409 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17410 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17411 +        end;else do;
17412 +         _LABEL_ = _NAME_;
17413 +        end;
17414 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
17415 +
17416 +   run;
17417 +
17418 +   quit;
17419 +
17420 +%mend MakeGClusterCorrelation;
17421 +
17422 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
17425 +%macro train;
17427 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
17428 +   %include temp;
17429 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
17430 +   %include temp;
17431 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
17432 +   %include temp;
17433 +   filename temp;
17435 +   %let VARCLUS_MAXNUMOBS = 100000;
17436 +   %let VARCLUS_MAXNUMVAR = 200;
17437 +   %let trainnum = 0;
17438 +   %let error = 0;
17440 +   %if &EM_IMPORT_DATA eq %then %do;
17441 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17442 +       %let  error = 1;
17443 +       %goto endtrain;
17444 +   %end;
17446 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
17447 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17448 +        %let  error = 1;
17449 +        %goto endline;
17450 +    %end;
17452 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17453 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
17454 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
17455 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
17456 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
17457 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
17459 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
17460 +        %if  &_num_input_total < 2 %then %do;
17461 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17462 +            %let error = 2;
17463 +            %goto endtrain;
17464 +        %end;
17465 +   %end;
17466 +   %else %do;
17467 +         %if  &_num_input_interval < 2 %then %do;
17468 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17469 +         %let error = 2;
17470 +         %goto endtrain;
17471 +         %end;
17472 +   %end;
17474 +   %em_checkerror();
17476 +   %if &EMEXCEPTIONSTRING ne %then %do;
17477 +       %goto endtrain;
17478 +   %end;
17480 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
17482 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17483 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17484 +                             outvar=&EM_USER_OUTDUMMY,
17485 +                             outdata=_newtrainds,
17486 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17488 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17489 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
17490 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17491 +                proc datasets lib=work nolist;
17492 +                delete  _newtrainds;
17493 +                run;
17494 +                quit;
17495 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17496 +                %let error = 3;
17497 +               %goto endtrain;
17498 +            %end;
17499 +        %end;
17501 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17502 +             %getNVar(inds=_newtrainds, nvar=_nvar);
17504 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
17505 +                %let trainnum = 2;
17506 +            %end;
17507 +            %else %do;
17508 +                %let trainnum = 1;
17509 +            %end;
17510 +        %end;
17511 +    %end;
17512 +    %else %do;
17514 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17516 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
17518 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17520 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17521 +                  %let error = 3;
17522 +                 %goto endtrain;
17523 +            %end;
17524 +        %end;
17527 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17528 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17529 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17530 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17531 +                %let trainnum = 2;
17532 +            %end;
17533 +            %else %do;
17534 +                %let trainnum = 1;
17535 +            %end;
17536 +        %end;
17538 +   %end;
17540 +    %em_checkerror();
17542 +    %if &EMEXCEPTIONSTRING ne %then %do;
17543 +       %let error = 4;
17544 +       %goto endtrain;
17545 +    %end;
17547 +    %CreateVarclusMeta(trainnum=&trainnum);
17549 +    %if &error > 0 %then  %goto endtrain;
17551 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17553 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17554 +           %train1;
17555 +       %end;
17556 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17557 +           %train2;
17558 +       %end;
17560 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17561 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17562 +      data _null_;
17563 +         length line $20000;
17564 +         file _out lrecl=20000;
17565 +         fid=fopen("_in",'i',20000,'v');
17566 +         if fid > 0  then do;
17567 +            do while(^fread(fid));
17568 +               rlen = frlen(fid);
17569 +               rc= fget(fid,line,20000);
17570 +               start = length(line)-length(left(line))+1;
17571 +               line=strip(line);
17572 +               if line ne 'delete;' then do;
17573 +                  put @start line;
17574 +               end;
17575 +            end;
17576 +            if fid > 0  then rc=fclose(fid);
17577 +         end;
17578 +      run;
17579 +      filename _in;
17580 +      filename _out;
17582 +   %endtrain:
17585 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17587 +%macro VarClus(indata=,
17588 +               outstat=,
17589 +               outtree=,
17590 +               vars=,
17591 +               freq=,
17592 +               weight=,
17593 +               includeclassvar=
17594 +               );
17596 +   %if &vars eq %then
17597 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17599 +        /*Add by ruzhan, May 28, 2013*/
17600 +        ods graphics on;
17601 +        %let odspath =;
17602 +        data _null_;
17603 +            path = pathname('WORK');
17604 +            call symput('odspath', path);
17605 +        run;
17606 +        ods listing gpath="&odspath";
17607 +        ods output DENDROGRAM=&outtree;
17608 +       proc varclus data = &indata outstat= &outstat
17609 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17610 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17611 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17612 +        /*-----------------------
17613 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17614 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17615 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17616 +       %end;
17617 +       -------------------------*/
17618 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17619 +            maxc = &EM_PROPERTY_MAXCLUS
17620 +       %end;
17622 +       /*------------------------------------------------------------------------------------------------------
17623 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17624 +        ------------------------------------------------------------------------------------------------------*/
17626 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17627 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17628 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17629 +       %end;
17631 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17632 +            proportion = &EM_PROPERTY_PROPORTION
17633 +       %end;
17634 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17635 +               summary
17636 +       %end;
17638 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17639 +           short
17640 +       %end;
17641 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17642 +           corr trace simple
17643 +       %end;
17644 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17645 +          noprint
17646 +       %end;
17647 +        /*Comment out by ruzhan, May 28, 2013*/
17648 +       /*       outtree=&outtree*/
17649 +       ;
17650 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17652 +      %if &includeclassvar eq Y %then %do;
17653 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17654 +          %if &dsid > 0 %then %do;
17655 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17656 +              %do i = 2 %to &nvar;
17657 +                  %let varname = %sysfunc(varname(&dsid, &i));
17658 +                   &varname
17659 +              %end;
17661 +          %end;
17662 +      %end;
17664 +      ;
17665 +      /*------------------------
17666 +      %if &freq ne  %then %do;
17667 +          freq &freq;
17668 +      %end;
17669 +      %if &weight ne  %then %do;
17670 +          weight &weight;
17671 +      %end;
17672 +      ----------------------------*/
17673 +      %if %EM_FREQ ne %then %do;
17674 +           Freq %EM_FREQ;
17675 +      %end;
17676 +      ;
17677 +    run;
17678 +    ods graphics off;
17679 +    %endline:
17680 +    quit;
17681 +%mend VarClus;
17683 +%macro Train1;
17685 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17686 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17687 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17688 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17689 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17690 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17691 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17692 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17693 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17694 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17695 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17696 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17697 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17699 +   /*
17700 +     %let VARCLUS_MAXNUMOBS = 100;
17701 +     %let VARCLUS_MAXNUMVAR = 200;
17702 +   */
17704 +   /* Train
17706 +   %if &EM_IMPORT_DATA eq %then %do;
17707 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17708 +       %goto endtrain1;
17709 +   %end;
17711 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17712 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17713 +        %goto endtrain1;
17714 +   %end;
17715 +   */
17716 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17717 +       /* moved this to pretrain ------------
17719 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17720 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17721 +                             outvar=&EM_USER_OUTDUMMY,
17722 +                             outdata=_newtrainds,
17723 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17725 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17726 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17727 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17728 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17729 +                %goto endtrain;
17730 +            %end;
17731 +        %end;
17733 +        +-------------------------------------*/
17735 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17736 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17737 +          There is no _newtrainds */
17738 +         %VarClus( indata=&EM_IMPORT_DATA,
17739 +                  outstat=&EM_USER_OUTSTAT,
17740 +                  outtree = &EM_USER_OUTTREE,
17741 +                  includeclassvar=N
17742 +                 );
17743 +        %end;
17744 +        %else %do;
17745 +        %VarClus( indata=_newtrainds,
17746 +                  outstat=&EM_USER_OUTSTAT,
17747 +                  outtree = &EM_USER_OUTTREE,
17748 +                  includeclassvar=Y
17749 +                 );
17750 +         proc datasets lib=work nolist;
17751 +              delete  _newtrainds;
17752 +         run;
17753 +         %end;
17754 +    %end;
17755 +    %else %do;
17757 +        /*----- moved this to pretrain ------------
17758 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17759 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17760 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17761 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17762 +                 %goto endtrain;
17763 +            %end;
17764 +        %end;
17765 +        +-------------------------------------*/
17767 +        %VarClus(indata=&EM_IMPORT_DATA,
17768 +                  outstat=&EM_USER_OUTSTAT,
17769 +                  outtree =&EM_USER_OUTTREE,
17770 +                  includeclassvar=N
17771 +               );
17773 +   %end;
17775 +   %em_checkerror();
17777 +   %if &EMEXCEPTIONSTRING ne %then %do;
17778 +       %goto endtrain1;
17779 +   %end;
17780 +    /*
17781 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17782 +    */
17784 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17786 +    %let gid=;
17788 +    /*--- To make the main result table ----------------------*/
17790 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17791 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17792 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17793 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17794 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17795 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17797 +   /* Inter Cluster Correlation Plot ------------------------*/
17799 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17800 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17802 +   /* Create some other data sets for results ----*/
17804 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17805 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17806 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17808 +  /*---- move this to Score action ------------
17809 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17810 +   */
17812 +   /* create score code at training time */
17813 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17814 +   %endtrain1:
17815 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17818 +%macro VarClus2( indata=,
17819 +                 outdata=,
17820 +                 outstat =outstat,
17821 +                 outrsquare=outrsquare,
17822 +                 outtree = outtree,
17823 +                 outclusstruct = outclusstruct,
17824 +                 outcluscorr =outcluscorr,
17825 +                 outcluscorrplot =outcluscorrplot,
17826 +                 outclusrsquare =outclusrsquare,
17827 +                 outstatplot = outstatplot,
17828 +                 outcorr = outcorr,
17829 +                 outcorrplot = outcorrplot,
17830 +                 clusdata=,
17831 +                 outnode=outnode,
17832 +                 outlink=outlink,
17833 +                 ngroup =1  );
17834 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17835 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17836 +              %goto endline;
17837 +         %end;
17839 +        %global numglobalcluster;
17840 +        %let  numglobalcluster = &ngroup;
17841 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17842 +        %do vci =1 %to &ngroup;
17843 +           data tmp_clusdata;
17844 +                set &clusdata;
17845 +                if CLUSTER ne &vci then delete;
17846 +           run;
17847 +           %let outstatds = &outstat.&vci;
17848 +           %let outrsquareds = &outrsquare.&vci;
17849 +           %let outtreeds = &outtree.&vci;
17850 +           %let outclusstuctds = &outclusstruct.&vci;
17851 +           %let outcluscorrds = &outcluscorr.&vci;
17852 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17853 +           %let outclusrsquareds = &outclussquare.&vci;
17854 +           %let outstatplotds = &outstatplot.&vci;
17855 +           %let outcorrds = &outcorr.&vci;
17856 +           %let outcorrplotds = &outcorrplot.&vci;
17857 +           %let outnodeds = &outnode.&vci;
17858 +           %let outlinkds = &outlink.&vci;
17860 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17861 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17862 +           %let emuseroutstat = &EM_USER_&outstatds;
17864 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17865 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17866 +           %let emuserouttree = &EM_USER_&outtreeds;
17868 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17869 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17870 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17872 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17873 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17874 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17876 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17877 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17878 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17880 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17881 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17882 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17884 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17885 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17886 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17888 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17889 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17890 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17892 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17893 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17894 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17896 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17897 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17898 +           %let emuseroutnode = &EM_USER_&outnodeds;
17900 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17901 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17902 +           %let emuseroutlink = &EM_USER_&outlinkds;
17904 +           /*Add by ruzhan, May 28, 2013*/
17905 +           ods graphics on;
17906 +            %let odspath =;
17907 +            data _null_;
17908 +                path = pathname('WORK');
17909 +                call symput('odspath', path);
17910 +            run;
17911 +            ods listing gpath="&odspath";
17913 +           ods output DENDROGRAM=&emuserouttree;
17915 +           proc varclus data=&indata outstat=&emuseroutstat
17916 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17917 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17918 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17919 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17920 +                  maxc=&EM_PROPERTY_MAXCLUS
17921 +           %end;
17923 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17924 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17925 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17926 +            %end;
17928 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17929 +                proportion = &EM_PROPERTY_PROPORTION
17930 +           %end;
17931 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17932 +               summary
17933 +           %end;
17934 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17935 +               short
17936 +           %end;
17937 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17938 +               corr trace simple
17939 +           %end;
17940 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17941 +               noprint
17942 +           %end;
17943 +            /*Comment out by ruzhan, May 28, 2013*/
17944 +              /*outtree=&emuserouttree*/
17945 +           ;
17946 +           var
17947 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17948 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17949 +                %do %while(^%sysfunc(fetch(&dsid)));
17950 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17951 +                    &_varname
17952 +                %end;
17953 +            %let dsid = %sysfunc(close(&dsid));
17954 +           ;
17955 +           %if %EM_FREQ ne %then %do;
17956 +           Freq %EM_FREQ;
17957 +           %end;
17958 +           run;
17959 +            ods graphics off;
17960 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17962 +            %let gid=&vci;
17963 +            /*--- To make the main result table ----------------------*/
17964 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17965 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17966 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17967 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17968 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17969 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17971 +            /* Inter Cluster Correlation Plot ------------------------*/
17973 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17974 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17976 +           /* Create some other data sets for results ---------------*/
17978 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17979 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17980 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17982 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17984 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17986 +           %if &vci = 1 %then %do;
17987 +           data &EM_USER_OUTRSQUARE;
17988 +                set &emuseroutrsquare;
17989 +           run;
17990 +           %end;
17991 +           %else %do;
17992 +           data &EM_USER_OUTRSQUARE;
17993 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17994 +           run;
17995 +           %end;
17996 +           quit;
17997 +       %end;
17999 +       /*---- move this to Score action ------------
18000 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
18001 +       */
18003 +       /* Make Score Gcluster component & correlation  */
18004 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
18006 +       quit;
18007 +       %endline:
18008 +%mend VarClus2;
18011 +%macro Train2;
18013 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
18014 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
18015 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
18016 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
18017 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
18018 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
18019 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
18020 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
18021 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
18022 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
18023 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
18024 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
18025 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
18026 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
18027 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
18028 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
18029 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
18030 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
18034 +    /* Train */
18036 +   /* moved to pretrain ------------
18038 +   %if &EM_IMPORT_DATA eq %then %do;
18039 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
18040 +       %goto endtrain2;
18041 +   %end;
18043 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
18044 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
18045 +        %goto endtrain2;
18046 +   %end;
18047 +   +-------------------------------------------*/
18049 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
18052 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18054 +        /*----- moved to pretrain ------------
18056 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
18057 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
18058 +                             outvar=&EM_USER_OUTDUMMY,
18059 +                             outdata=_newtrainds,
18060 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
18061 +                              ndummyvars=_ndummyvars
18062 +                            );
18064 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
18065 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
18066 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
18067 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
18068 +                %goto endtrain;
18069 +            %end;
18070 +        %end;
18072 +        +---------------------------------------*/
18073 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
18074 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
18075 +          There is no _newtrainds */
18076 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
18077 +                             outstat=&EM_USER_GOUTSTAT,
18078 +                             corrmatrix=Y,
18079 +                             outcorr=&EM_USER_GOUTCORR,
18080 +                             includeclassvar=N,
18081 +                             freq =%EM_FREQ
18082 +                          );
18083 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
18085 +        %end;
18086 +        %else %do;
18087 +         %MakeCorrelation(   indata=_newtrainds,
18088 +                             outstat=&EM_USER_GOUTSTAT,
18089 +                             corrmatrix=Y,
18090 +                             outcorr=&EM_USER_GOUTCORR,
18091 +                             includeclassvar=Y,
18092 +                             freq =%EM_FREQ
18093 +                          );
18094 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
18096 +        %end;
18098 +    %end;
18099 +    %else %do;
18101 +        /* moved to pretrain -------------------
18103 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
18104 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
18105 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
18106 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
18107 +                %goto endtrain;
18108 +            %end;
18109 +        %end;
18110 +         +------------------------------------------*/
18112 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
18113 +                          outstat=&EM_USER_GOUTSTAT,
18114 +                          corrmatrix=Y,
18115 +                          outcorr=&EM_USER_GOUTCORR,
18116 +                          includeclassvar=N,
18117 +                          freq =%EM_FREQ
18118 +                          );
18119 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
18120 +    %end;
18122 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
18123 +                                rsquare = N
18124 +                                );
18125 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
18126 +                      ncluster=&_ngc,
18127 +                      method = Ward,
18128 +                      outtree =&EM_USER_GOUTTREE,
18129 +                      idvar = _VAR_,
18130 +                      outdata=&EM_USER_GOUTGROUP,
18131 +                      rescore = N,
18132 +                      newncluster=_newnclus
18133 +                        );
18135 +   /* store the number of global cluster */
18137 +   data &EM_USER_VARCLUSMETA;
18138 +        set &EM_USER_VARCLUSMETA;
18139 +        NGCluster = &_newnclus;
18140 +   run;
18142 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
18144 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18145 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
18146 +            %VarClus2(indata=&EM_IMPORT_DATA,
18147 +                 clusdata=&EM_USER_GOUTGROUP,
18148 +                 ngroup=&_newnclus);
18149 +         %end;
18150 +         %else %do;
18151 +             %VarClus2(indata=_newtrainds,
18152 +                 clusdata=&EM_USER_GOUTGROUP,
18153 +                 ngroup=&_newnclus);
18155 +         %end;
18157 +   %end;
18158 +   %else %do;
18159 +       %VarClus2(indata=&EM_IMPORT_DATA,
18160 +                 clusdata=&EM_USER_GOUTGROUP,
18161 +                 ngroup=&_newnclus);
18162 +   %end;
18164 +   %em_checkerror();
18165 +   %if &EMEXCEPTIONSTRING ne %then %do;
18166 +       %put &em_codebar;
18167 +       %put Error: Variable clustering failed.;
18168 +       %put &em_codebar;
18169 +       %goto endtrain2;
18170 +   %end;
18171 +   /*
18172 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
18173 +   */
18174 +   %endtrain2:
18175 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
18177 +%macro em_copyfile(infref=, outfref=, append=N);
18178 +
18179 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
18180 +
18181 +       %let omode =;
18182 +       %if &append=Y %then
18183 +           %let omode = MOD;
18184 +       data _null_;
18185 +          length line $20000;
18186 +          file &outfref &omode lrecl=20000;
18187 +          fid=fopen("&infref",'i',20000,'v');
18188 +          if fid > 0  then do;
18189 +             do while(^fread(fid));
18190 +                rlen = frlen(fid);
18191 +                rc= fget(fid,line,20000);
18192 +                start = length(line)-length(left(line))+1;
18193 +                line=strip(line);
18194 +                put @start line;
18195 +             end;
18196 +             if fid > 0  then rc=fclose(fid);
18197 +          end;
18198 +       run;
18199 +
18200 +   %end;
18201 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

18202  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 32235 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.

NOTE: 4 input variable(s).
NOTE: Number of cases=32235
NOTE: Sum of frequencies=32235
NOTE: Sum of weights=32235
NOTE: VARDEF=DF      
NOTE: Maximum number of categories=4
NOTE: The total number of variables is 4 with dimensionality 10.
NOTE: The data set EMWS4.VARCLUS_OUTDUMMY has 3 observations and 11 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 32235 observations and 109 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.


NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      


NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:167   
NOTE: There were 32235 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:226   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


18203  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS4.VARCLUS_OUTTREE has 162 observations and 3 variables.
NOTE: The data set EMWS4.VARCLUS_OUTSTAT has 2164 observations and 99 variables.
NOTE: The PROCEDURE VARCLUS printed pages 2-7.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           2.07 seconds
      cpu time            0.50 seconds
      


NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


18204  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214   
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9   
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.CORR_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1190 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1190 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71   
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 98 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._TMPDS (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.CORR_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      50463:90   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      50463:84   
NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      


NOTE: Deleting WORK.CORR_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1225 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 96 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS4.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set EMWS4.VARCLUS_OUTCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9216 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTLINK has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTNODE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2164 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATSCORE has 37 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The file _FILE_ is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2403,
      Last Modified=13Apr2022:19:29:31,
      Create Time=13Apr2022:19:29:10

NOTE: 136 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
      


NOTE: The file _OUT is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:19:29:35,
      Create Time=13Apr2022:19:29:10

NOTE: 245 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
18205  *------------------------------------------------------------*;
18206  * End TRAIN: VarClus;
18207  *------------------------------------------------------------*;
18208  

18209  *------------------------------------------------------------*;
18210  * Close any missing semi colons;
18211  *------------------------------------------------------------*;
18212  ;
18213  ;
18214  ;
18215  ;
18216  quit;
18217  *------------------------------------------------------------*;
18218  * Close any unbalanced quotes;
18219  *------------------------------------------------------------*;
18220  /*; *"; *'; */
18221  ;
18222  run;
18223  quit;
18224  /* Reset EM Options */
18225  options formchar="|----|+|---+=|-/\<>*";
18226  options nocenter ls=256 ps=10000;
18227  goptions reset=all device=GIF NODISPLAY;

