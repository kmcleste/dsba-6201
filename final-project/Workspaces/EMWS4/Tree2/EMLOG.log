*------------------------------------------------------------*
User:                Kyle McLester
Date:                April 13, 2022
Time:                18:05:33
Site:                70080897
Platform:            X64_10HOME
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 13, 2022
Time:                18:05:25
*------------------------------------------------------------*
15226  proc freq data=EMWS4.Tree2_VariableSet noprint;
15227  table ROLE*LEVEL/out=WORK.Tree2META;
15228  run;
 
NOTE: There were 99 observations read from the data set EMWS4.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
15229  proc print data=WORK.Tree2META label noobs;
15230  var ROLE LEVEL COUNT;
15231  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15232  title9 ' ';
15233  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15234  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15235  title10;
 
15236  %let EMNORLEN = %DMNORLEN;
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15265  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15266  length ORDER $20;
15267  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15268     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15269  set EMWS4.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
15270  NumLevels=2;
15271  select(upcase(ORDER));
15272  when('DESC') ORDER = 'Descending';
15273  when('ASC') ORDER = 'Ascending';
15274  when('FMTDESC') ORDER = 'Formatted Descending';
15275  when('FMTASC') ORDER = 'Formatted Ascending';
15276  otherwise ORDER = 'Descending';
15277  end;
15278  output;
15279  run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15280  title9 ' ';
15281  proc print data=WORK.Tree2_EVENT noobs label;
15282  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15283  title9 ' ';
15284  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15285  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15286  title10;
 
"No decisions defined for target "RESPOND"."
15287  proc print data = EMWS4.Ids_RESPOND_DM noobs label;
15288  var _type_ variable label;
15289  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15290  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15291  title9 ' ';
15292  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15293  run;
 
NOTE: There were 7 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15294  title10;
 
15295  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15841  *------------------------------------------------------------*;
15842  * Tree2: Generation of macros and macro variables;
15843  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15844  *------------------------------------------------------------*;
 
15845  %let EMEXCEPTIONSTRING=;
15846  *------------------------------------------------------------*;
15847  * TRAIN: Tree2;
15848  *------------------------------------------------------------*;
15849  %let EM_ACTION = TRAIN;
15850  %let syscc = 0;
15851  %macro main;
15852
15853    %if %upcase(&EM_ACTION) = CREATE %then %do;
15854      filename temp catalog 'sashelp.emmodl.tree_create.source';
15855      %include temp;
15856      filename temp;
15857
15858      %em_tree_create;
15859    %end;
15860
15861     %else
15862     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15863
15864         filename temp catalog 'sashelp.emmodl.tree_train.source';
15865         %include temp;
15866         filename temp;
15867         %em_tree_train;
15868     %end;
15869
15870    %else
15871    %if %upcase(&EM_ACTION) = SCORE %then %do;
15872      filename temp catalog 'sashelp.emmodl.tree_score.source';
15873      %include temp;
15874      filename temp;
15875
15876      %em_tree_score;
15877
15878    %end;
15879
15880    %else
15881    %if %upcase(&EM_ACTION) = REPORT %then %do;
15882
15883         filename temp catalog 'sashelp.emmodl.tree_report.source';
15884         %include temp;
15885         filename temp;
15886
15887         %em_tree_report;
15888     %end;
15889
15890    %else
15891    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15892
15893         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15894         %include temp;
15895         filename temp;
15896         %EM_TREE_OPENTREEVIEWER;
15897
15898     %end;
15899
15900    %else
15901    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15902
15903         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15904         %include temp;
15905         filename temp;
15906         %EM_TREE_CLOSETREEVIEWER;
15907
15908     %end;
15909
15910
15911     %doendm:
15912  %mend main;
15913
15914  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15916 +%macro em_tree_train;
15918 +   %if &EM_IMPORT_DATA eq %then %do;
15919 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15920 +       %put &em_codebar;
15921 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15922 +       %put &errormsg;
15923 +       %put &em_codebar;
15924 +       %goto doendm;
15925 +   %end;
15926 +   %else
15927 +       %let EMEXCEPTIONSTRING =;
15929 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15930 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15931 +        %put &em_codebar;
15932 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15933 +        %put &errormsg;
15934 +        %put &em_codebar;
15935 +        %goto doendm;
15936 +   %end;
15938 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15939 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15940 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15941 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15942 +        %put &em_codebar;
15943 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15944 +        %put &errormsg;
15945 +        %put &em_codebar;
15946 +        %goto doendm;
15947 +   %end;
15949 +   /* Initialize property macro variables */
15950 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15951 +   %include temp;
15952 +   filename temp;
15954 +   %EM_SetProperties;
15956 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15957 +   %EM_GETNAME(key=EMTREE, type=DATA);
15958 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15959 +     /* if import eq Y and no importtable defined, throw an exception */
15960 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15961 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15962 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15963 +         %put &em_codebar;
15964 +         %put &errmsg;
15965 +         %put &em_codebar;
15966 +         %goto doendm;
15967 +      %end;
15968 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15969 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15970 +         %put &em_codebar;
15971 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15972 +         %put &errormsg;
15973 +         %put &em_codebar;
15974 +         %goto doendm;
15975 +      %end;
15976 +      %else %do;
15977 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15978 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15979 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15980 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15981 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15982 +         %let dsid = %sysfunc(close(&dsid));
15983 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15984 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15985 +            %put &em_codebar;
15986 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15987 +            %put &errormsg;
15988 +            %put &em_codebar;
15989 +            %goto doendm;
15990 +         %end;
15991 +      %end;
15992 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15993 +         proc delete data=&EM_USER_EMTREE;
15994 +         run;
15995 +      %end;
15996 +   %end;
15997 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15998 +      proc delete data=&EM_USER_EMTREE;
15999 +      run;
16000 +   %end;
16002 +   /* load tree macros */
16003 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16004 +   %include temp;
16005 +   filename temp;
16007 +   /* data sets */
16008 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16009 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16010 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16012 +   /* files */
16013 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16015 +   /* check actual num of target levels */
16016 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16017 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16018 +                              nLevel=_nTargetLevel );
16019 +      %if &_nTargetLevel  > 2 %then %do;
16020 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16021 +        %put &em_codebar;
16022 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16023 +        %put &errormsg;
16024 +        %put &em_codebar;
16025 +        %goto doendm;
16026 +      %end;
16027 +   %end;
16029 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16030 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16031 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16032 +        %let costflag=0;
16033 +        data _null_;
16034 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16035 +          if eof then call symput("costflag", _N_);
16036 +        run;
16037 +        %if &costflag gt 0 %then %do;
16038 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16039 +          %put &em_codebar;
16040 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16041 +          %put &errormsg;
16042 +          %put &em_codebar;
16043 +          %goto doendm;
16044 +       %end;
16045 +     %end;
16046 +   %end;
16048 +   /* determine if multiple targets will be processed */
16049 +   %let em_tree_multipleTargets=N;
16050 +   %let em_tree_numTarget = 1;
16051 +   %let em_tree_targetVars=;
16053 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16054 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16055 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16056 +         %let em_tree_multipleTargets=N;
16057 +      %end;
16058 +      %else %do;
16059 +         /* create macro array of targets  */
16060 +         data _null_;
16061 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16062 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16063 +           if eof then
16064 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16065 +        run;
16067 +        %if &em_tree_numTarget gt 1 %then %do;
16068 +           %let em_tree_multipleTargets=Y;
16069 +        %end;
16070 +      %end;
16071 +   %end;
16073 +   /* create view of only necessary variable for performance reasons */
16074 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16075 +   data &tempData / view=&tempData;
16076 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16077 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16078 +       %EM_TARGET
16079 +     %end;
16080 +     %else %do;
16081 +       %if &em_tree_numTarget ne 0 %then %do;
16082 +         %do i=1 %to &em_tree_numTarget;
16083 +            &&em_tree_targetVars&i
16084 +         %end;
16085 +       %end;
16086 +     %end;
16087 +     );
16088 +   run;
16090 +   /* run Tree procedure */
16091 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16093 +   /* Check return code and throw exception if error is detected */
16094 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16095 +   %if &syserr %then %do;
16096 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16097 +     %goto doendm;
16098 +   %end;
16100 +   /* add decision score code if multiple targets are processed */
16101 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16102 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16103 +   %end;
16105 +   /* create outfit dataset if multiple score statements have been executed */
16106 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16108 +   /* create English Rules */
16109 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16110 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16111 +       %em_tree_makeEnglishRules;
16113 +       /* English Rules */
16114 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16116 +     %end;
16117 +   filename x;
16119 +   %doendm:
16120 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16121 +%macro EM_SetProperties;
16123 +   /* train properties */
16124 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16166 +   /* properties for interactive sample */
16167 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16172 +   /* report properties */
16173 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16187 +   /* score properties */
16188 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16191 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16193 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16194 +  %global &nLevel;
16195 +  proc dmdb batch data=&indata
16196 +    classout=_tmp_dmdbout;
16197 +    class &target;
16198 +  run;
16199 +  data _tmp_dmdbout;
16200 +    set _tmp_dmdbout;
16201 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16202 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16203 +  run;
16204 +  data _null_;
16205 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16206 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16207 +    %let dsid = %sysfunc(close(&dsid));
16208 +     call symput("&nLevel", put(&_obs, Best12.));
16209 +  run;
16211 +  proc datasets lib=work nolist;
16212 +     delete _tmp_dmdbout;
16213 +  run;
16214 +  quit;
16215 +%Mend EM_CheckBinaryTargetLevel;
16218 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16220 +  /* determine the number of obs in training data */
16221 +  proc sql;
16222 +    reset noprint;
16223 +    select count(*) into :em_nobs from &indata;
16224 +  quit;
16226 +  /* determine the number of input variables */
16227 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16228 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16230 +  /* retrieve targetEvent from decmeta */
16231 +  %let targetEvent=;
16232 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16233 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16234 +      data _null_;
16235 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16236 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16237 +      run;
16238 +    %end;
16239 +  %end;
16241 +  /* create targetTable if multipleTar eq Y */
16242 +  data temptarget;
16243 +    set &EM_DATA_VARIABLESET;
16244 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16245 +  run;
16247 + /* data sets */
16248 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16249 + %EM_GETNAME(key=EMTREE,        type=DATA);
16250 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16251 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16252 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16253 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16254 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16255 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16256 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16257 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16259 + /* files */
16260 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16261 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16263 + /* turn on pmml if requested */
16264 + %let nnpmml=0;
16265 + %if %symexist(EM_PMML) %then %do;
16266 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16267 +       %let nnpmml=1;
16269 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16270 +   %end;
16271 +%end;
16273 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16275 +%if &nnpmml or &numClassTarget %then %do;
16277 +    /* create dmdb needed for pmml generation */
16278 +    %let tree_maxlevel = 512;
16279 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16280 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16281 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16282 +      %end;
16283 +    %end;
16284 +    %if &tree_maxlevel gt 0 %then %do;
16285 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16286 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16287 +    %end;
16289 +    %let targetOrderString =;
16290 +    %let targetString = ;
16291 +    data _null_;
16292 +       length orderString nameString $10000;
16293 +       retain orderString nameString;
16294 +       set &em_data_variableset end=eof;
16295 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16296 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16297 +       %end;
16298 +       %else %do;
16299 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16300 +       %end;          select(order);
16301 +         when('')        order ='DESC';
16302 +         when('FMTASC')  order='ASCFMT';
16303 +         when('FMTDESC') order='DESFMT';
16304 +         otherwise;
16305 +       end;
16306 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16307 +       nameString = trim(nameString)!!' '!!trim(NAME);
16309 +       if eof then do;
16310 +          call symput('targetOrderString', trim(orderString));
16311 +          call symput('targetString', trim(nameString));
16312 +       end;
16313 +    run;
16315 +    %let arborkluge= "work._treeDMDB";
16317 +    proc dmdb batch data=&indata
16318 +    %if &nnpmml %then %do;
16319 +        PMML
16320 +    %end;
16321 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16323 +      %if &nnpmml %then %do;
16324 +           %if "%EM_ID" ne "" %then %do;
16325 +             id %EM_ID;
16326 +           %end;
16327 +           %if &EM_NUM_CLASS gt 0 %then %do;
16328 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16329 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16330 +                  &targetOrderString;
16331 +           %end;
16332 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16333 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16334 +           %end;
16335 +           target &targetString %EM_INTERVAL_TARGET;
16336 +           %if "%EM_FREQ" ne "" %then %do;
16337 +             freq %EM_FREQ;
16338 +           %end;
16339 +      %end;
16340 +      %else %do;
16341 +         class  &targetOrderString;
16342 +         target &targetString %EM_INTERVAL_TARGET;
16343 +      %end;
16344 +    run;
16345 +    quit;
16347 +    proc datasets lib=work nolist;
16348 +       delete classout varout;
16349 +    run;
16350 +    quit;
16352 + %end;
16355 + /* run Arbor procedure */
16356 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16357 +  proc arbor data=&INDATA
16359 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16360 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16361 +  %end;
16363 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16364 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16365 +  %end;
16367 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16368 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16369 +  %end;
16371 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16372 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16373 +  %end;
16375 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16376 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16377 +  %end;
16379 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16380 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16381 +  %end;
16382 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16383 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16384 +  %end;
16385 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16386 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16387 +  %end;
16389 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16390 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16391 +      alpha = &EM_PROPERTY_SIGLEVEL
16392 +    %end;
16393 +  %end;
16395 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16396 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16397 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16398 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16399 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16401 +        padjust =
16402 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16403 +          &chaid
16404 +        %end;
16405 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16406 +          DEPTH
16407 +        %end;
16408 +      %end;
16409 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16410 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16411 +         pvars = &num_inputs
16412 +      %end;
16413 +    %end;
16414 +  %end;
16415 +  %else %do;
16416 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16417 +         padjust = NONE
16418 +      %end;
16419 +  %end;
16421 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16422 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16423 +    Maxrules = &num_nrules
16424 +  %end;
16426 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16427 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16428 +    Maxsurrs = &num_nsurrs
16429 +  %end;
16431 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16432 +     Missing=&EM_PROPERTY_MISSINGVALUE
16433 +  %end;
16435 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16436 +     USEVARONCE
16437 +  %end;
16439 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16440 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16441 +  %end;
16444 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16445 +    event = "&targetEvent"
16446 +  %end;
16448 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16449 +     DECSEARCH
16450 +  %end;
16452 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16453 +     PRIORSSEARCH
16454 +  %end;
16456 +  %if &arbor_1 ne %then %do;
16457 +    &arbor_1
16458 +  %end;
16460 +  %if &em_arbor ne %then %do;
16461 +     &em_arbor
16462 +  %end;
16463 +  ;
16464 + %end;
16465 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16466 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +       interact;
16473 + %end;
16474 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16475 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16476 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16477 +    %put &em_codebar;
16478 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16479 +    %put &errormsg;
16480 +    %put &em_codebar;
16481 +    %goto doendm;
16482 +   %end;
16483 +   %else %do;
16484 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16485 +       Performance &EM_PROPERTY_PERFORMANCE
16486 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16487 +         nodesize=&EM_PROPERTY_NODESAMPLE
16488 +       %end;
16489 +       ;
16490 +       interact;
16491 +   %end;
16492 + %end;
16494 + %else %do;
16495 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16496 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16497 +    %put &em_codebar;
16498 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16499 +    %put &errormsg;
16500 +    %put &em_codebar;
16501 +    %goto doendm;
16502 +   %end;
16503 +   %else %do;
16504 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16505 +       Performance &EM_PROPERTY_PERFORMANCE
16506 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16507 +         nodesize=&EM_PROPERTY_NODESAMPLE
16508 +       %end;
16509 +       ;
16510 +        interact;
16511 +   %end;
16512 + %end;
16514 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16515 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16516 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16517 +    %end;
16519 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16520 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16521 +    %end;
16523 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16524 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16525 +    %end;
16527 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16528 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16529 +    %end;
16531 +    %if "%EM_FREQ" ne "" %then %do;
16532 +       freq %EM_FREQ;
16533 +    %end;
16535 +    %if "&multipleTar" eq "Y" %then %do;
16536 +       /* cycle through all target vars in variableset */
16537 +       %let tdsid = %sysfunc(open(temptarget));
16538 +       %if &tdsid %then %do;
16539 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16540 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16541 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16542 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16543 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16544 +             target &var / level = &lvl
16545 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16546 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16547 +             %end;
16548 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16549 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16550 +             %end;
16551 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16552 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16553 +             %end;
16554 +          %end;
16555 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16556 +       %end;
16557 +       useTarget variable = %EM_TARGET;
16558 +    %end;
16559 +    %else %do;
16560 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16561 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16562 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16563 +      %end;
16564 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16565 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16566 +      %end;
16567 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16568 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16569 +      %end;
16570 +    %end;
16572 +    %if "&multipleTar" eq "N" %then %do;
16573 +      &EM_DEC_STATEMENT;
16574 +    %end;
16576 +    Performance &EM_PROPERTY_PERFORMANCE
16577 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16578 +      nodesize=&EM_PROPERTY_NODESAMPLE
16579 +    %end;
16580 +    ;
16582 +    %if "&intFlag" eq "Y" %then %do;
16583 +       INTERACT Largest;
16584 +       Train maxnewdepth=0;
16585 +    %end;
16587 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16588 +         Assess
16589 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16590 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16591 +              %put &em_codebar;
16592 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16593 +              %put &errormsg;
16594 +              %put &em_codebar;
16595 +            %end;
16596 +            %else %do;
16597 +               Validata=&EM_IMPORT_VALIDATE
16598 +            %end;
16599 +         %end;
16600 +         %else %do;
16601 +           NoValidata
16602 +         %end;
16603 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16604 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16605 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16606 +               %if &dsid %then %do;
16607 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16608 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16609 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16610 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16611 +                   %else %do;
16612 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16613 +                      %else %let measure= MISC;
16614 +                   %end;
16615 +                 %end;
16616 +               %end;
16617 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16618 +            %end;
16619 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16620 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16621 +                 %let measure=ASE;
16622 +              %end;
16623 +              %else %do;
16624 +                 %let measure=MISC;
16625 +              %end;
16626 +            %end;
16627 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16628 +              %let measure=ASE;
16629 +            %end;
16630 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16631 +               %let measure = LIFT;
16632 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16633 +               %if &dsid %then %do;
16634 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16635 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16636 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16637 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16638 +                 %end;
16639 +               %end;
16640 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16641 +            %end;
16642 +            measure=&measure
16643 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16644 +               event = "&targetEvent"
16645 +            %end;
16646 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16647 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16648 +            %end;
16649 +         %end;
16650 +         %if "&multipleTar" eq "N" %then %do;
16651 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16652 +               CV
16653 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16654 +                 CVNITer = &EM_PROPERTY_CVNITER
16655 +               %end;
16656 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16657 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16658 +               %end;
16659 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16660 +                 CVSeed = &EM_PROPERTY_CVSEED
16661 +               %end;
16662 +            %end;
16663 +         %end;
16664 +       %end;
16665 +      ;
16667 +      %if "&intFlag" ne "Y" %then %do;
16668 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16669 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16670 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16671 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16673 +          SUBTREE &subtree
16674 +          %if "&subtree" eq "NLEAVES" %then %do;
16675 +            =&EM_PROPERTY_NSUBTREE
16676 +          %end;
16677 +          ;
16678 +        %end;
16680 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16681 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16682 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16683 +          %end;
16684 +       %end;
16685 +      %end;
16686 + %end;
16689 + MakeMacro nleaves = nleaves;
16690 + save
16691 + %if "&EM_USER_EMTREE" ne "" %then %do;
16692 +   MODEL=&EM_USER_EMTREE
16693 + %end;
16694 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16695 +   SEQUENCE=&EM_USER_OUTSEQ
16696 + %end;
16697 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16698 +   IMPORTANCE=&EM_USER_OUTIMPORT
16699 + %end;
16700 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16701 +   NODESTAT=&EM_USER_OUTNODES
16702 + %end;
16703 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16704 +   SUMMARY=&EM_USER_OUTSUMMARY
16705 + %end;
16706 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16707 +   STATSBYNODE=&EM_USER_OUTSTATS
16708 + %end;
16709 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16710 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16711 + %end;
16712 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16713 +   Pathlistnonmissing=&EM_USER_OUTPATH
16714 + %end;
16715 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16716 +   RULES = &EM_USER_OUTRULES
16717 + %end;
16718 + ;
16720 + %if "&intFlag" ne "Y" %then %do;
16722 +   %let lookupString = ;
16723 +   %if ^%symexist(EM_OPTION) %then
16724 +      %let EM_OPTION=;
16726 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16727 +      %let lookupString = LOOKUP=SELECT;
16728 +   %end;
16730 +   %let codetext=;
16731 +   %let norescodetxt=;
16733 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16734 +     %let codetext=&codetext DUMMY;
16735 +     %let norescodetxt=&norescodetxt DUMMY;
16736 +   %end;
16737 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16738 +     %let codetext=&codetext NOLEAFID;
16739 +     %let norescodetxt=&norescodetxt NOLEAFID;
16740 +   %end;
16741 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16742 +     %let norescodetxt=&norescodetxt NOPRED;
16743 +   %end;
16745 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16746 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16748 +   %if &nnpmml %then %do;
16749 +     code pmml;
16750 +   %end;
16752 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16753 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16754 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16755 +   %end;
16756 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16757 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16758 +   %end;
16759 + %end;
16761 + run;
16762 + quit;
16764 + /*%em_checkerror(); */
16765 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16766 +   /* Delete DMDB catalog */
16767 +   proc datasets lib=work nolist;
16768 +       delete _treeDMDB / mt=cat;
16769 +  run;
16770 +  %end;
16772 + %if &nnpmml %then %do;
16773 +    ods pmml close;
16774 + %end;
16776 +  %doendm:
16778 +%mend em_tree_runTreeProcedure;
16780 +%macro em_tree_createFitStats( multipleTar= );
16783 +  /* create targetTable is multipleTar eq Y */
16784 +  data temptarget;
16785 +    set &EM_DATA_VARIABLESET;
16786 +    where ROLE="TARGET";
16787 +  run;
16789 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16790 +   data &EM_USER_EMOUTFIT;
16791 +     length target $32;
16792 +     merge work.fit_train
16793 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16794 +       work.fit_valid
16795 +     %end;
16796 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16797 +       work.fit_test
16798 +     %end;
16799 +     ;
16800 +     %if "&multipleTar" eq "N" %then %do;
16801 +       target="%EM_TARGET";
16802 +     %end;
16803 +     %else %do;
16804 +       target = _TARGET_;
16805 +     %end;
16806 +     drop _NW_ _SUMW_
16807 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16808 +        _VSUMW_
16809 +     %end;
16810 +     ;
16811 +   run;
16813 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16814 +     proc datasets library=work nolist;
16815 +       delete fit_valid;
16816 +     run;
16817 +   %end;
16818 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16819 +     proc datasets library=work nolist;
16820 +       delete fit_test;
16821 +     run;
16822 +   %end;
16824 +%mend em_tree_createFitStats;
16827 +%macro em_tree_makeEnglishRules;
16829 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16830 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16832 +  /* verify that necessary tables exist and if not, skip processing */
16833 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16834 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16835 +    %goto doendm;
16836 +  %end;
16837 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16838 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16839 +    %goto doendm;
16840 +  %end;
16842 +  /* determine length of variable in outpath dataset */
16843 +  %let vlength= ;
16844 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16845 +  %if &dsid ne %then %do;
16846 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16847 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16848 +  %end;
16849 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16851 +  data tempoutpath;
16852 +    length varname $&vlength;
16853 +    retain varname;
16854 +    set &EM_USER_OUTPATH;
16856 +    if ^missing(variable) then varname=variable;
16857 +    else if ^missing(var_name) then varname=var_name;
16858 +    output;
16859 +  run;
16861 +  /* create an array of generated predicted variable names */
16862 +  %let tree_pred_vars = ;
16863 +  %let tree_pred_label = ;
16864 +  %let numpred= 0;
16865 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16867 +    data _null_;
16868 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16869 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16870 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16871 +     if eof then
16872 +       call symput('numpred', strip(put(_N_, BEST.)));
16873 +    run;
16874 +  %end;
16876 +  /* determine if NPRIORS exists in outnodes  */
16877 +  %local nprior_flag;
16878 +  data _null_;
16879 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16880 +    if eof then do;
16881 +      call symput('nprior_flag', strip(put(npriors, best.)));
16882 +    end;
16883 +  run;
16885 +  proc sort data=tempoutpath; by node; run;
16886 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16888 +  data tempoutpath;
16889 +    merge tempoutpath(in=_a) outnodes(keep= node
16890 +    %if "&nprior_flag" ne "." %then %do;
16891 +      NPRIORS
16892 +    %end;
16893 +    %else %do;
16894 +      N
16895 +    %end;
16896 +    %if &numpred gt 0 %then %do;
16897 +      %do i=1 %to &numpred;
16898 +        &&tree_pred_vars&i
16899 +      %end;
16900 +    %end;
16901 +    );
16902 +    by node;
16903 +    if _a;
16904 +  run;
16906 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16908 +  data _null_;
16909 +    file x;
16910 +    set tempoutpath;
16911 +    by node descending varname;
16912 +    retain origvar oldnode string;
16913 +    length origvar $32 oldnode 8 string $5000;
16915 +    if _N_ = 1 then do;
16916 +      origvar = varname;
16917 +      oldnode = node;
16918 +    end;
16920 +    if first.node then do;
16921 +       put "&EM_CODEBAR";
16922 +       put " Node = " node;
16923 +       put "&EM_CODEBAR";
16924 +    end;
16926 +      if first.varname then do;
16927 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16928 +            if MISSING(CHARACTER_VALUE) then do;
16929 +             if NUMERIC_VALUE ne .  then do;
16930 +              if ^first.node then do;
16931 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16932 +              end;
16933 +              else do;
16934 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16935 +              end;
16936 +             end;
16937 +            end;
16938 +            else do;
16939 +              if ^first.node then do;
16940 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16941 +              end;
16942 +              else do;
16943 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16944 +              end;
16945 +             end;
16946 +         end;
16947 +         else if RELATION in ("=") then do;
16948 +            if ^first.node then do;
16949 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16950 +            end;
16951 +            else do;
16952 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16953 +            end;
16954 +         end;
16955 +         else if RELATION in ("ISMISSING") then do;
16956 +            if ^first.node then do;
16957 +              string = " AND "|| strip(varname) || " equals Missing";
16958 +            end;
16959 +            else do;
16960 +              string = "if "|| strip(varname) ||" equals Missing";
16961 +            end;
16962 +         end;
16963 +         else if RELATION in ("ISNOTMISSING") then do;
16964 +            if ^first.node then do;
16965 +              string = " AND "|| strip(varname) || " equals All Values";
16966 +            end;
16967 +            else do;
16968 +              string = "if "|| strip(varname) ||" equals All Values";
16969 +            end;
16970 +         end;
16971 +         if ^missing(varname) then origvar = varname;
16972 +         oldnode=node;
16974 +      end;
16975 +      else do;
16976 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16977 +          if MISSING(CHARACTER_VALUE) then do;
16978 +           if  NUMERIC_VALUE ne .  then do;
16979 +            if ^MISSING(string) then
16980 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16981 +            else
16982 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16983 +           end;
16984 +          end;
16985 +          else do;
16986 +            if ^MISSING(string) then
16987 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16988 +            else
16989 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16990 +          end;
16992 +         end;
16993 +         else if RELATION in ("=") then do;
16994 +           string = strip(string)||", "||strip(character_value);
16995 +         end;
16996 +         else if RELATION in ("ISMISSING") then do;
16998 +         end;
16999 +         if ^missing(varname) then origvar = varname;
17000 +         oldnode=node;
17001 +      end;
17002 +      if last.varname then do;
17003 +         if RELATION in ("ISMISSING") then do;
17004 +           if ^first.varname then do;
17005 +             string = strip(string) || " or MISSING";
17006 +           end;
17007 +         end;
17008 +         put string;
17009 +         if ^missing(varname) then origvar = varname;
17010 +         oldnode=node;
17011 +      end;
17013 +      if last.node then do;
17014 +         put "then ";
17015 +         put " Tree Node Identifier   = " node;
17017 +         %if "&nprior_flag" ne "." %then %do;
17018 +           put " Number of Observations = " NPRIORS;
17019 +         %end;
17020 +         %else %do;
17021 +           put " Number of Observations = " N;
17022 +         %end;
17024 +         %if &numpred gt 0 %then %do;
17025 +           %do i=1 %to &numpred;
17026 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17027 +           %end;
17028 +         %end;
17030 +         put " ";
17031 +         if ^missing(varname) then origvar = varname;
17032 +         oldnode=node;
17033 +      end;
17035 +  run;
17037 +  proc datasets lib=work nolist;
17038 +    delete tempoutpath outnodes;
17039 +  run;
17041 +  %doendm:
17042 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS4.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596463 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633729536 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS4.TREE2_EMTREE has 2275 observations and 4 variables.
NOTE: The data set EMWS4.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS4.TREE2_OUTPATH has 55 observations and 7 variables.
NOTE: The data set EMWS4.TREE2_OUTRULES has 386 observations and 6 variables.
NOTE: The data set EMWS4.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS4.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS4.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           2.00 seconds
      cpu time            1.99 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           2.00 seconds
      cpu time            1.99 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS4.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set EMWS4.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13Apr2022:18:05:28,
      Create Time=13Apr2022:18:05:28
 
NOTE: 94 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17044
17045  *------------------------------------------------------------*;
17046  * End TRAIN: Tree2;
17047  *------------------------------------------------------------*;
 
17048  *------------------------------------------------------------*;
17049  * Close any missing semi colons;
17050  *------------------------------------------------------------*;
17051  ;
17052  ;
17053  ;
17054  ;
17055  quit;
17056  *------------------------------------------------------------*;
17057  * Close any unbalanced quotes;
17058  *------------------------------------------------------------*;
17059  /*; *"; *'; */
17060  ;
17061  run;
17062  quit;
17063  /* Reset EM Options */
17064  options formchar="|----|+|---+=|-/\<>*";
17065  options nocenter ls=256 ps=10000;
17066  goptions reset=all device=GIF NODISPLAY;
 
17067  proc sort data=WORK.EM_USER_REPORT;
17068  by ID VIEW;
17069  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 13, 2022
Time:                18:05:29
*------------------------------------------------------------*
17171  %let EMEXCEPTIONSTRING=;
17172  *------------------------------------------------------------*;
17173  * SCORE: Tree2;
17174  *------------------------------------------------------------*;
17175  %let EM_ACTION = SCORE;
17176  %let syscc = 0;
17177  %macro main;
17178
17179    %if %upcase(&EM_ACTION) = CREATE %then %do;
17180      filename temp catalog 'sashelp.emmodl.tree_create.source';
17181      %include temp;
17182      filename temp;
17183
17184      %em_tree_create;
17185    %end;
17186
17187     %else
17188     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17189
17190         filename temp catalog 'sashelp.emmodl.tree_train.source';
17191         %include temp;
17192         filename temp;
17193         %em_tree_train;
17194     %end;
17195
17196    %else
17197    %if %upcase(&EM_ACTION) = SCORE %then %do;
17198      filename temp catalog 'sashelp.emmodl.tree_score.source';
17199      %include temp;
17200      filename temp;
17201
17202      %em_tree_score;
17203
17204    %end;
17205
17206    %else
17207    %if %upcase(&EM_ACTION) = REPORT %then %do;
17208
17209         filename temp catalog 'sashelp.emmodl.tree_report.source';
17210         %include temp;
17211         filename temp;
17212
17213         %em_tree_report;
17214     %end;
17215
17216    %else
17217    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17218
17219         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17220         %include temp;
17221         filename temp;
17222         %EM_TREE_OPENTREEVIEWER;
17223
17224     %end;
17225
17226    %else
17227    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17228
17229         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17230         %include temp;
17231         filename temp;
17232         %EM_TREE_CLOSETREEVIEWER;
17233
17234     %end;
17235
17236
17237     %doendm:
17238  %mend main;
17239
17240  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17242 +%macro em_tree_score;
17244 +   /* determine if multiple targets will be processed */
17245 +   %let em_tree_multipleTargets=N;
17246 +   %let em_tree_numTarget=1;
17247 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17248 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17249 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17250 +         %let em_tree_multipleTargets=N;
17251 +      %end;
17252 +      %else %do;
17253 +         /* create macro array of targets  */
17254 +         data _null_;
17255 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17256 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17257 +           if eof then
17258 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17259 +        run;
17261 +        %if &em_tree_numTarget gt 1 %then %do;
17262 +           %let em_tree_multipleTargets=Y;
17263 +        %end;
17264 +      %end;
17265 +   %end;
17267 +   /* build flow and publish scoring code */
17268 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17269 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17271 +   filename treeflow "&EM_USER_TREEFLOW";
17272 +   filename treepub "&EM_USER_TREEPUBLISH";
17274 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17275 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17277 +   %em_copyfile(infref=treeflow, outfref=flowref);
17278 +   %em_copyfile(infref=treepub, outfref=pubref);
17280 +   filename treeflow;
17281 +   filename treepub;
17283 +   /* if priors are used, add code to generate unadjusted residuals in export */
17284 +   %let useAdjPriors = N;
17285 +   data _null_;
17286 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17287 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17288 +   run;
17289 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17290 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17291 +      %include temp;
17292 +      filename temp;
17294 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17295 +      filename adjref "&EM_USER_adjResidualCode";
17296 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17298 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17300 +      filename adjref;
17301 +   %end;
17303 +   /* LEAF */
17304 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17305 +      data _null_;
17306 +        file flowref mod;
17307 +        put 'drop _LEAF_;';
17308 +      run;
17310 +      data _null_;
17311 +        file pubref mod;
17312 +        put 'drop _LEAF_;';
17313 +      run;
17315 +   %end;
17317 +   filename flowref;
17318 +   filename pubref;
17320 +   /* em_metachange code */
17321 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17322 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17323 +   %end;
17325 +   /* variable selection based on importance stat    */
17326 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17327 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17328 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17329 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17330 +     %let obs = %sysfunc(fetch(&dsid));
17331 +     %do %while(&obs=0);
17332 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17333 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17334 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17335 +       %let obs = %sysfunc(fetch(&dsid));
17336 +     %end;
17337 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17338 +   %end;
17340 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17341 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17342 +    %let tree_pred_vars = ;
17343 +    %let tree_pred_lvl =;
17344 +    %let numpred= 0;
17346 +    data _null_;
17347 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17348 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17349 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17350 +     if eof then
17351 +       call symput('numpred', strip(put(_N_, BEST.)));
17352 +    run;
17353 +   %end;
17355 +   %if &numpred ne 0 %then %do;
17356 +    %do i=1 %to &numpred;
17357 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17358 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17359 +    %end;
17360 +   %end;
17362 +   /* determine if multiple targets will be processed */
17363 +   %let em_tree_multipleTargets=N;
17364 +   %let em_tree_numTarget=1;
17365 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17366 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17367 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17368 +         %let em_tree_multipleTargets=N;
17369 +      %end;
17370 +      %else %do;
17371 +        data _null_;
17372 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17373 +          if eof then
17374 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17375 +        run;
17377 +        %if &em_tree_numTarget gt 1 %then %do;
17378 +           %let em_tree_multipleTargets=Y;
17379 +        %end;
17380 +     %end;
17381 +   %end;
17383 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17384 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17386 +      /* variable importance */
17387 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17388 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17390 +         %let validexist=0;
17391 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17392 +           %let validexist=1;
17393 +         %end;
17395 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17396 +         /* and the columns may not be generated                                                                                 */
17397 +         %let em_tree_cvexists=;
17398 +         %let em_tree_surrexists=.;
17399 +         data _null_;
17400 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17401 +            if eof then do ;
17402 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17403 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17404 +            end;
17405 +         run;
17407 +         data &EM_USER_OUTIMPORT;
17408 +            set &EM_USER_OUTIMPORT;
17410 +            /* format columns based on Precison value specified */
17411 +            format importance 15.&EM_PROPERTY_PRECISION
17412 +                 %if &validexist %then %do;
17413 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17414 +                 %end;
17415 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17416 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17417 +                 %end;
17418 +            ;
17419 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17420 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17421 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17422 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17423 +                 %if "&em_tree_surrexists" ne "" %then %do;
17424 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17425 +                 %end;
17426 +                 %if &validexist %then %do;
17427 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17428 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17429 +                 %end;
17430 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17431 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17432 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17433 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17434 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17435 +                 %end;
17436 +            ;
17437 +         run;
17439 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17440 +      %end;
17441 +   %end;
17443 +   %doendm:
17444 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:05:28,
      Create Time=13Apr2022:18:04:31
 
NOTE: 170 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:05:28,
      Create Time=13Apr2022:18:04:31
 
NOTE: 148 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5983,
      Last Modified=13Apr2022:18:05:28,
      Create Time=13Apr2022:18:04:31
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5354,
      Last Modified=13Apr2022:18:05:28,
      Create Time=13Apr2022:18:04:31
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 90 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17445
17446  *------------------------------------------------------------*;
17447  * End SCORE: Tree2;
17448  *------------------------------------------------------------*;
 
17449  proc sort data=WORK.EM_METACHANGE;
17450  by key uname;
17451  run;
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17452  filename x "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\CDELTA_TRAIN.sas";
17453  data _null_;
17454  file x;
17455  put 'if upcase(NAME) = "BOTHPAYM" then do;';
17456  put 'ROLE = "REJECTED";';
17457  put 'end;';
17458  put 'else ';
17459  put 'if upcase(NAME) = "BUYPROP" then do;';
17460  put 'ROLE = "REJECTED";';
17461  put 'end;';
17462  put 'else ';
17463  put 'if upcase(NAME) = "CATALOGCNT" then do;';
17464  put 'ROLE = "REJECTED";';
17465  put 'end;';
17466  put 'else ';
17467  put 'if upcase(NAME) = "CCPAYM" then do;';
17468  put 'ROLE = "REJECTED";';
17469  put 'end;';
17470  put 'else ';
17471  put 'if upcase(NAME) = "DEPT01" then do;';
17472  put 'ROLE = "REJECTED";';
17473  put 'end;';
17474  put 'else ';
17475  put 'if upcase(NAME) = "DEPT02" then do;';
17476  put 'ROLE = "REJECTED";';
17477  put 'end;';
17478  put 'else ';
17479  put 'if upcase(NAME) = "DEPT03" then do;';
17480  put 'ROLE = "REJECTED";';
17481  put 'end;';
17482  put 'else ';
17483  put 'if upcase(NAME) = "DEPT04" then do;';
17484  put 'ROLE = "REJECTED";';
17485  put 'end;';
17486  put 'else ';
17487  put 'if upcase(NAME) = "DEPT05" then do;';
17488  put 'ROLE = "REJECTED";';
17489  put 'end;';
17490  put 'else ';
17491  put 'if upcase(NAME) = "DEPT06" then do;';
17492  put 'ROLE = "REJECTED";';
17493  put 'end;';
17494  put 'else ';
17495  put 'if upcase(NAME) = "DEPT07" then do;';
17496  put 'ROLE = "REJECTED";';
17497  put 'end;';
17498  put 'else ';
17499  put 'if upcase(NAME) = "DEPT08" then do;';
17500  put 'ROLE = "REJECTED";';
17501  put 'end;';
17502  put 'else ';
17503  put 'if upcase(NAME) = "DEPT09" then do;';
17504  put 'ROLE = "REJECTED";';
17505  put 'end;';
17506  put 'else ';
17507  put 'if upcase(NAME) = "DEPT10" then do;';
17508  put 'ROLE = "REJECTED";';
17509  put 'end;';
17510  put 'else ';
17511  put 'if upcase(NAME) = "DEPT11" then do;';
17512  put 'ROLE = "REJECTED";';
17513  put 'end;';
17514  put 'else ';
17515  put 'if upcase(NAME) = "DEPT12" then do;';
17516  put 'ROLE = "REJECTED";';
17517  put 'end;';
17518  put 'else ';
17519  put 'if upcase(NAME) = "DEPT13" then do;';
17520  put 'ROLE = "REJECTED";';
17521  put 'end;';
17522  put 'else ';
17523  put 'if upcase(NAME) = "DEPT14" then do;';
17524  put 'ROLE = "REJECTED";';
17525  put 'end;';
17526  put 'else ';
17527  put 'if upcase(NAME) = "DEPT15" then do;';
17528  put 'ROLE = "REJECTED";';
17529  put 'end;';
17530  put 'else ';
17531  put 'if upcase(NAME) = "DEPT16" then do;';
17532  put 'ROLE = "REJECTED";';
17533  put 'end;';
17534  put 'else ';
17535  put 'if upcase(NAME) = "DEPT17" then do;';
17536  put 'ROLE = "REJECTED";';
17537  put 'end;';
17538  put 'else ';
17539  put 'if upcase(NAME) = "DEPT18" then do;';
17540  put 'ROLE = "REJECTED";';
17541  put 'end;';
17542  put 'else ';
17543  put 'if upcase(NAME) = "DEPT19" then do;';
17544  put 'ROLE = "REJECTED";';
17545  put 'end;';
17546  put 'else ';
17547  put 'if upcase(NAME) = "DEPT20" then do;';
17548  put 'ROLE = "REJECTED";';
17549  put 'end;';
17550  put 'else ';
17551  put 'if upcase(NAME) = "DEPT21" then do;';
17552  put 'ROLE = "REJECTED";';
17553  put 'end;';
17554  put 'else ';
17555  put 'if upcase(NAME) = "DEPT22" then do;';
17556  put 'ROLE = "REJECTED";';
17557  put 'end;';
17558  put 'else ';
17559  put 'if upcase(NAME) = "DEPT23" then do;';
17560  put 'ROLE = "REJECTED";';
17561  put 'end;';
17562  put 'else ';
17563  put 'if upcase(NAME) = "DEPT24" then do;';
17564  put 'ROLE = "REJECTED";';
17565  put 'end;';
17566  put 'else ';
17567  put 'if upcase(NAME) = "DEPT26" then do;';
17568  put 'ROLE = "REJECTED";';
17569  put 'end;';
17570  put 'else ';
17571  put 'if upcase(NAME) = "DEPT27" then do;';
17572  put 'ROLE = "REJECTED";';
17573  put 'end;';
17574  put 'else ';
17575  put 'if upcase(NAME) = "DOLINDEA" then do;';
17576  put 'ROLE = "REJECTED";';
17577  put 'end;';
17578  put 'else ';
17579  put 'if upcase(NAME) = "DOLINDET" then do;';
17580  put 'ROLE = "REJECTED";';
17581  put 'end;';
17582  put 'else ';
17583  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17584  put 'ROLE = "REJECTED";';
17585  put 'end;';
17586  put 'else ';
17587  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17588  put 'ROLE = "REJECTED";';
17589  put 'end;';
17590  put 'else ';
17591  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17592  put 'ROLE = "REJECTED";';
17593  put 'end;';
17594  put 'else ';
17595  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17596  put 'ROLE = "REJECTED";';
17597  put 'end;';
17598  put 'else ';
17599  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17600  put 'ROLE = "REJECTED";';
17601  put 'end;';
17602  put 'else ';
17603  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17604  put 'ROLE = "REJECTED";';
17605  put 'end;';
17606  put 'else ';
17607  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17608  put 'ROLE = "REJECTED";';
17609  put 'end;';
17610  put 'else ';
17611  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17612  put 'ROLE = "REJECTED";';
17613  put 'end;';
17614  put 'else ';
17615  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17616  put 'ROLE = "REJECTED";';
17617  put 'end;';
17618  put 'else ';
17619  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17620  put 'ROLE = "REJECTED";';
17621  put 'end;';
17622  put 'else ';
17623  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17624  put 'ROLE = "REJECTED";';
17625  put 'end;';
17626  put 'else ';
17627  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17628  put 'ROLE = "REJECTED";';
17629  put 'end;';
17630  put 'else ';
17631  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17632  put 'ROLE = "REJECTED";';
17633  put 'end;';
17634  put 'else ';
17635  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17636  put 'ROLE = "REJECTED";';
17637  put 'end;';
17638  put 'else ';
17639  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17640  put 'ROLE = "REJECTED";';
17641  put 'end;';
17642  put 'else ';
17643  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17644  put 'ROLE = "REJECTED";';
17645  put 'end;';
17646  put 'else ';
17647  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17648  put 'ROLE = "REJECTED";';
17649  put 'end;';
17650  put 'else ';
17651  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17652  put 'ROLE = "REJECTED";';
17653  put 'end;';
17654  put 'else ';
17655  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17656  put 'ROLE = "REJECTED";';
17657  put 'end;';
17658  put 'else ';
17659  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17660  put 'ROLE = "REJECTED";';
17661  put 'end;';
17662  put 'else ';
17663  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17664  put 'ROLE = "REJECTED";';
17665  put 'end;';
17666  put 'else ';
17667  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17668  put 'ROLE = "REJECTED";';
17669  put 'end;';
17670  put 'else ';
17671  put 'if upcase(NAME) = "DOLNETDA" then do;';
17672  put 'ROLE = "REJECTED";';
17673  put 'end;';
17674  put 'else ';
17675  put 'if upcase(NAME) = "DOLNETDT" then do;';
17676  put 'ROLE = "REJECTED";';
17677  put 'end;';
17678  put 'else ';
17679  put 'if upcase(NAME) = "METHPAYM" then do;';
17680  put 'ROLE = "REJECTED";';
17681  put 'end;';
17682  put 'else ';
17683  put 'if upcase(NAME) = "MONLAST" then do;';
17684  put 'ROLE = "REJECTED";';
17685  put 'end;';
17686  put 'else ';
17687  put 'if upcase(NAME) = "PCPAYM" then do;';
17688  put 'ROLE = "REJECTED";';
17689  put 'end;';
17690  put 'else ';
17691  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17692  put 'ROLE = "ASSESS";';
17693  put 'end;';
17694  put 'else ';
17695  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17696  put 'ROLE = "ASSESS";';
17697  put 'end;';
17698  put 'else ';
17699  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17700  put 'ROLE = "REJECTED";';
17701  put 'end;';
17702  put 'else ';
17703  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17704  put 'ROLE = "REJECTED";';
17705  put 'end;';
17706  put 'else ';
17707  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17708  put 'ROLE = "REJECTED";';
17709  put 'end;';
17710  put 'else ';
17711  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17712  put 'ROLE = "REJECTED";';
17713  put 'end;';
17714  put 'else ';
17715  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17716  put 'ROLE = "REJECTED";';
17717  put 'end;';
17718  put 'else ';
17719  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17720  put 'ROLE = "REJECTED";';
17721  put 'end;';
17722  put 'else ';
17723  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17724  put 'ROLE = "REJECTED";';
17725  put 'end;';
17726  put 'else ';
17727  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17728  put 'ROLE = "REJECTED";';
17729  put 'end;';
17730  put 'else ';
17731  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17732  put 'ROLE = "REJECTED";';
17733  put 'end;';
17734  put 'else ';
17735  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17736  put 'ROLE = "REJECTED";';
17737  put 'end;';
17738  put 'else ';
17739  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17740  put 'ROLE = "REJECTED";';
17741  put 'end;';
17742  put 'else ';
17743  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17744  put 'ROLE = "REJECTED";';
17745  put 'end;';
17746  put 'else ';
17747  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17748  put 'ROLE = "REJECTED";';
17749  put 'end;';
17750  put 'else ';
17751  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17752  put 'ROLE = "REJECTED";';
17753  put 'end;';
17754  put 'else ';
17755  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17756  put 'ROLE = "REJECTED";';
17757  put 'end;';
17758  put 'else ';
17759  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17760  put 'ROLE = "REJECTED";';
17761  put 'end;';
17762  put 'else ';
17763  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17764  put 'ROLE = "REJECTED";';
17765  put 'end;';
17766  put 'else ';
17767  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17768  put 'ROLE = "REJECTED";';
17769  put 'end;';
17770  put 'else ';
17771  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17772  put 'ROLE = "REJECTED";';
17773  put 'end;';
17774  put 'else ';
17775  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17776  put 'ROLE = "REJECTED";';
17777  put 'end;';
17778  put 'else ';
17779  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17780  put 'ROLE = "REJECTED";';
17781  put 'end;';
17782  put 'else ';
17783  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17784  put 'ROLE = "REJECTED";';
17785  put 'end;';
17786  put 'else ';
17787  put 'if upcase(NAME) = "UNITSIDD" then do;';
17788  put 'ROLE = "REJECTED";';
17789  put 'end;';
17790  put 'else ';
17791  put 'if upcase(NAME) = "UNITSLAP" then do;';
17792  put 'ROLE = "REJECTED";';
17793  put 'end;';
17794  put 'else ';
17795  put 'if upcase(NAME) = "UNTLANPO" then do;';
17796  put 'ROLE = "REJECTED";';
17797  put 'end;';
17798  put 'else ';
17799  put 'if upcase(NAME) = "_NODE_" then do;';
17800  put 'ROLE = "SEGMENT";';
17801  put 'LEVEL = "NOMINAL";';
17802  put 'end;';
17803  run;
 
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13Apr2022:18:05:29,
      Create Time=13Apr2022:18:04:31
 
NOTE: 348 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17804  filename x;
NOTE: Fileref X has been deassigned.
 
17805  filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas";
17806  *------------------------------------------------------------*;
17807  * Tree2: Scoring DATA data;
17808  *------------------------------------------------------------*;
17809  data EMWS4.Tree2_TRAIN
17810  / view=EMWS4.Tree2_TRAIN
17811  ;
17812  set EMWS4.Part_TRAIN
17813  ;
17814  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas.
17815 +****************************************************************;
17816 +******             DECISION TREE SCORING CODE             ******;
17817 +****************************************************************;
17818 +
17819 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17820 +LENGTH F_RESPOND  $   12;
17821 +LENGTH I_RESPOND  $   12;
17822 +LENGTH _WARN_  $    4;
17823 +
17824 +******              LABELS FOR NEW VARIABLES              ******;
17825 +label _NODE_ = 'Node' ;
17826 +label _LEAF_ = 'Leaf' ;
17827 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17828 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17829 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17830 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17831 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17832 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17833 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17834 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17835 +label F_RESPOND = 'From: RESPOND' ;
17836 +label I_RESPOND = 'Into: RESPOND' ;
17837 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17838 +label _WARN_ = 'Warnings' ;
17839 +
17840 +
17841 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17842 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17843 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17844 +
17845 +
17846 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17847 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17848 +
17849 +******             ASSIGN OBSERVATION TO NODE             ******;
17850 +IF  NOT MISSING(DOLL24 ) AND
17851 +                 121.2 <= DOLL24  THEN DO;
17852 +  IF  NOT MISSING(DEPT25 ) AND
17853 +                    32.5 <= DEPT25  THEN DO;
17854 +    _NODE_  =                    7;
17855 +    _LEAF_  =                    8;
17856 +    P_RESPOND1  =      0.4390243902439;
17857 +    P_RESPOND0  =     0.56097560975609;
17858 +    Q_RESPOND1  =      0.4390243902439;
17859 +    Q_RESPOND0  =     0.56097560975609;
17860 +    V_RESPOND1  =      0.3076923076923;
17861 +    V_RESPOND0  =     0.69230769230769;
17862 +    I_RESPOND  = '0' ;
17863 +    U_RESPOND  =                    0;
17864 +    END;
17865 +  ELSE DO;
17866 +    IF  NOT MISSING(FREQPRCH ) AND
17867 +                       8.5 <= FREQPRCH  THEN DO;
17868 +      _NODE_  =                   13;
17869 +      _LEAF_  =                    7;
17870 +      P_RESPOND1  =     0.17607413647851;
17871 +      P_RESPOND0  =     0.82392586352148;
17872 +      Q_RESPOND1  =     0.17607413647851;
17873 +      Q_RESPOND0  =     0.82392586352148;
17874 +      V_RESPOND1  =     0.17874396135265;
17875 +      V_RESPOND0  =     0.82125603864734;
17876 +      I_RESPOND  = '0' ;
17877 +      U_RESPOND  =                    0;
17878 +      END;
17879 +    ELSE DO;
17880 +      _NODE_  =                   12;
17881 +      _LEAF_  =                    6;
17882 +      P_RESPOND1  =     0.10013175230566;
17883 +      P_RESPOND0  =     0.89986824769433;
17884 +      Q_RESPOND1  =     0.10013175230566;
17885 +      Q_RESPOND0  =     0.89986824769433;
17886 +      V_RESPOND1  =       0.089590443686;
17887 +      V_RESPOND0  =     0.91040955631399;
17888 +      I_RESPOND  = '0' ;
17889 +      U_RESPOND  =                    0;
17890 +      END;
17891 +    END;
17892 +  END;
17893 +ELSE DO;
17894 +  IF  NOT MISSING(TENURE ) AND
17895 +    TENURE  <                  1.5 THEN DO;
17896 +    IF  NOT MISSING(DAYLAST ) AND
17897 +                      46.5 <= DAYLAST  THEN DO;
17898 +      _NODE_  =                    9;
17899 +      _LEAF_  =                    2;
17900 +      P_RESPOND1  =     0.11111111111111;
17901 +      P_RESPOND0  =     0.88888888888888;
17902 +      Q_RESPOND1  =     0.11111111111111;
17903 +      Q_RESPOND0  =     0.88888888888888;
17904 +      V_RESPOND1  =                    0;
17905 +      V_RESPOND0  =                    1;
17906 +      I_RESPOND  = '0' ;
17907 +      U_RESPOND  =                    0;
17908 +      END;
17909 +    ELSE DO;
17910 +      _NODE_  =                    8;
17911 +      _LEAF_  =                    1;
17912 +      P_RESPOND1  =     0.95454545454545;
17913 +      P_RESPOND0  =     0.04545454545454;
17914 +      Q_RESPOND1  =     0.95454545454545;
17915 +      Q_RESPOND0  =     0.04545454545454;
17916 +      V_RESPOND1  =                    1;
17917 +      V_RESPOND0  =                    0;
17918 +      I_RESPOND  = '1' ;
17919 +      U_RESPOND  =                    1;
17920 +      END;
17921 +    END;
17922 +  ELSE DO;
17923 +    IF  NOT MISSING(DOLL24 ) AND
17924 +                    23.975 <= DOLL24  THEN DO;
17925 +      IF  NOT MISSING(ACTBUY ) AND
17926 +                         1.5 <= ACTBUY  THEN DO;
17927 +        _NODE_  =                   19;
17928 +        _LEAF_  =                    5;
17929 +        P_RESPOND1  =     0.10306612486147;
17930 +        P_RESPOND0  =     0.89693387513852;
17931 +        Q_RESPOND1  =     0.10306612486147;
17932 +        Q_RESPOND0  =     0.89693387513852;
17933 +        V_RESPOND1  =     0.09674922600619;
17934 +        V_RESPOND0  =      0.9032507739938;
17935 +        I_RESPOND  = '0' ;
17936 +        U_RESPOND  =                    0;
17937 +        END;
17938 +      ELSE DO;
17939 +        _NODE_  =                   18;
17940 +        _LEAF_  =                    4;
17941 +        P_RESPOND1  =     0.05328917657684;
17942 +        P_RESPOND0  =     0.94671082342315;
17943 +        Q_RESPOND1  =     0.05328917657684;
17944 +        Q_RESPOND0  =     0.94671082342315;
17945 +        V_RESPOND1  =     0.05952028427598;
17946 +        V_RESPOND0  =     0.94047971572401;
17947 +        I_RESPOND  = '0' ;
17948 +        U_RESPOND  =                    0;
17949 +        END;
17950 +      END;
17951 +    ELSE DO;
17952 +      _NODE_  =                   10;
17953 +      _LEAF_  =                    3;
17954 +      P_RESPOND1  =     0.03609902631033;
17955 +      P_RESPOND0  =     0.96390097368966;
17956 +      Q_RESPOND1  =     0.03609902631033;
17957 +      Q_RESPOND0  =     0.96390097368966;
17958 +      V_RESPOND1  =     0.03674786591713;
17959 +      V_RESPOND0  =     0.96325213408286;
17960 +      I_RESPOND  = '0' ;
17961 +      U_RESPOND  =                    0;
17962 +      END;
17963 +    END;
17964 +  END;
17965 +
17966 +*****  RESIDUALS R_ *************;
17967 +IF  F_RESPOND  NE '1'
17968 +AND F_RESPOND  NE '0'  THEN DO;
17969 +        R_RESPOND1  = .;
17970 +        R_RESPOND0  = .;
17971 + END;
17972 + ELSE DO;
17973 +       R_RESPOND1  =  -P_RESPOND1 ;
17974 +       R_RESPOND0  =  -P_RESPOND0 ;
17975 +       SELECT( F_RESPOND  );
17976 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17977 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17978 +       END;
17979 + END;
17980 +
17981 +****************************************************************;
17982 +******          END OF DECISION TREE SCORING CODE         ******;
17983 +****************************************************************;
17984 +
17985 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17986  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17987  quit;
17988  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17989  filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas";
17990  *------------------------------------------------------------*;
17991  * Tree2: Scoring VALIDATE data;
17992  *------------------------------------------------------------*;
17993  data EMWS4.Tree2_VALIDATE
17994  / view=EMWS4.Tree2_VALIDATE
17995  ;
17996  set EMWS4.Part_VALIDATE
17997  ;
17998  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas.
17999 +****************************************************************;
18000 +******             DECISION TREE SCORING CODE             ******;
18001 +****************************************************************;
18002 +
18003 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18004 +LENGTH F_RESPOND  $   12;
18005 +LENGTH I_RESPOND  $   12;
18006 +LENGTH _WARN_  $    4;
18007 +
18008 +******              LABELS FOR NEW VARIABLES              ******;
18009 +label _NODE_ = 'Node' ;
18010 +label _LEAF_ = 'Leaf' ;
18011 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
18012 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
18013 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
18014 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
18015 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
18016 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
18017 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
18018 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
18019 +label F_RESPOND = 'From: RESPOND' ;
18020 +label I_RESPOND = 'Into: RESPOND' ;
18021 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
18022 +label _WARN_ = 'Warnings' ;
18023 +
18024 +
18025 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18026 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18027 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18028 +
18029 +
18030 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
18031 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
18032 +
18033 +******             ASSIGN OBSERVATION TO NODE             ******;
18034 +IF  NOT MISSING(DOLL24 ) AND
18035 +                 121.2 <= DOLL24  THEN DO;
18036 +  IF  NOT MISSING(DEPT25 ) AND
18037 +                    32.5 <= DEPT25  THEN DO;
18038 +    _NODE_  =                    7;
18039 +    _LEAF_  =                    8;
18040 +    P_RESPOND1  =      0.4390243902439;
18041 +    P_RESPOND0  =     0.56097560975609;
18042 +    Q_RESPOND1  =      0.4390243902439;
18043 +    Q_RESPOND0  =     0.56097560975609;
18044 +    V_RESPOND1  =      0.3076923076923;
18045 +    V_RESPOND0  =     0.69230769230769;
18046 +    I_RESPOND  = '0' ;
18047 +    U_RESPOND  =                    0;
18048 +    END;
18049 +  ELSE DO;
18050 +    IF  NOT MISSING(FREQPRCH ) AND
18051 +                       8.5 <= FREQPRCH  THEN DO;
18052 +      _NODE_  =                   13;
18053 +      _LEAF_  =                    7;
18054 +      P_RESPOND1  =     0.17607413647851;
18055 +      P_RESPOND0  =     0.82392586352148;
18056 +      Q_RESPOND1  =     0.17607413647851;
18057 +      Q_RESPOND0  =     0.82392586352148;
18058 +      V_RESPOND1  =     0.17874396135265;
18059 +      V_RESPOND0  =     0.82125603864734;
18060 +      I_RESPOND  = '0' ;
18061 +      U_RESPOND  =                    0;
18062 +      END;
18063 +    ELSE DO;
18064 +      _NODE_  =                   12;
18065 +      _LEAF_  =                    6;
18066 +      P_RESPOND1  =     0.10013175230566;
18067 +      P_RESPOND0  =     0.89986824769433;
18068 +      Q_RESPOND1  =     0.10013175230566;
18069 +      Q_RESPOND0  =     0.89986824769433;
18070 +      V_RESPOND1  =       0.089590443686;
18071 +      V_RESPOND0  =     0.91040955631399;
18072 +      I_RESPOND  = '0' ;
18073 +      U_RESPOND  =                    0;
18074 +      END;
18075 +    END;
18076 +  END;
18077 +ELSE DO;
18078 +  IF  NOT MISSING(TENURE ) AND
18079 +    TENURE  <                  1.5 THEN DO;
18080 +    IF  NOT MISSING(DAYLAST ) AND
18081 +                      46.5 <= DAYLAST  THEN DO;
18082 +      _NODE_  =                    9;
18083 +      _LEAF_  =                    2;
18084 +      P_RESPOND1  =     0.11111111111111;
18085 +      P_RESPOND0  =     0.88888888888888;
18086 +      Q_RESPOND1  =     0.11111111111111;
18087 +      Q_RESPOND0  =     0.88888888888888;
18088 +      V_RESPOND1  =                    0;
18089 +      V_RESPOND0  =                    1;
18090 +      I_RESPOND  = '0' ;
18091 +      U_RESPOND  =                    0;
18092 +      END;
18093 +    ELSE DO;
18094 +      _NODE_  =                    8;
18095 +      _LEAF_  =                    1;
18096 +      P_RESPOND1  =     0.95454545454545;
18097 +      P_RESPOND0  =     0.04545454545454;
18098 +      Q_RESPOND1  =     0.95454545454545;
18099 +      Q_RESPOND0  =     0.04545454545454;
18100 +      V_RESPOND1  =                    1;
18101 +      V_RESPOND0  =                    0;
18102 +      I_RESPOND  = '1' ;
18103 +      U_RESPOND  =                    1;
18104 +      END;
18105 +    END;
18106 +  ELSE DO;
18107 +    IF  NOT MISSING(DOLL24 ) AND
18108 +                    23.975 <= DOLL24  THEN DO;
18109 +      IF  NOT MISSING(ACTBUY ) AND
18110 +                         1.5 <= ACTBUY  THEN DO;
18111 +        _NODE_  =                   19;
18112 +        _LEAF_  =                    5;
18113 +        P_RESPOND1  =     0.10306612486147;
18114 +        P_RESPOND0  =     0.89693387513852;
18115 +        Q_RESPOND1  =     0.10306612486147;
18116 +        Q_RESPOND0  =     0.89693387513852;
18117 +        V_RESPOND1  =     0.09674922600619;
18118 +        V_RESPOND0  =      0.9032507739938;
18119 +        I_RESPOND  = '0' ;
18120 +        U_RESPOND  =                    0;
18121 +        END;
18122 +      ELSE DO;
18123 +        _NODE_  =                   18;
18124 +        _LEAF_  =                    4;
18125 +        P_RESPOND1  =     0.05328917657684;
18126 +        P_RESPOND0  =     0.94671082342315;
18127 +        Q_RESPOND1  =     0.05328917657684;
18128 +        Q_RESPOND0  =     0.94671082342315;
18129 +        V_RESPOND1  =     0.05952028427598;
18130 +        V_RESPOND0  =     0.94047971572401;
18131 +        I_RESPOND  = '0' ;
18132 +        U_RESPOND  =                    0;
18133 +        END;
18134 +      END;
18135 +    ELSE DO;
18136 +      _NODE_  =                   10;
18137 +      _LEAF_  =                    3;
18138 +      P_RESPOND1  =     0.03609902631033;
18139 +      P_RESPOND0  =     0.96390097368966;
18140 +      Q_RESPOND1  =     0.03609902631033;
18141 +      Q_RESPOND0  =     0.96390097368966;
18142 +      V_RESPOND1  =     0.03674786591713;
18143 +      V_RESPOND0  =     0.96325213408286;
18144 +      I_RESPOND  = '0' ;
18145 +      U_RESPOND  =                    0;
18146 +      END;
18147 +    END;
18148 +  END;
18149 +
18150 +*****  RESIDUALS R_ *************;
18151 +IF  F_RESPOND  NE '1'
18152 +AND F_RESPOND  NE '0'  THEN DO;
18153 +        R_RESPOND1  = .;
18154 +        R_RESPOND0  = .;
18155 + END;
18156 + ELSE DO;
18157 +       R_RESPOND1  =  -P_RESPOND1 ;
18158 +       R_RESPOND0  =  -P_RESPOND0 ;
18159 +       SELECT( F_RESPOND  );
18160 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
18161 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
18162 +       END;
18163 + END;
18164 +
18165 +****************************************************************;
18166 +******          END OF DECISION TREE SCORING CODE         ******;
18167 +****************************************************************;
18168 +
18169 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18170  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18171  quit;
18172  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18174  proc sort data=WORK.EM_USER_REPORT;
18175  by ID VIEW;
18176  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18177  *------------------------------------------------------------*;
18178  * Tree2: Computing metadata for TRAIN data;
18179  *------------------------------------------------------------*;
 
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18872  data EMWS4.Tree2_EMINFO;
18873  length TARGET KEY $32 DATA $43;
18874  input TARGET KEY DATA $;
18875  cards;
 
NOTE: The data set EMWS4.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18879  run;
18880  proc sort data = EMWS4.Tree2_EMINFO NOTHREADS;
18881  by TARGET KEY;
18882  run;
 
NOTE: There were 3 observations read from the data set EMWS4.TREE2_EMINFO.
NOTE: The data set EMWS4.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18883  proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18884  by TARGET KEY;
18885  run;
 
NOTE: There were 4 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18886  proc sort data = EMWS4.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18887  by TARGET KEY;
18888  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18889  data EMWS4.Tree2_EMINFO;
18890  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18891  by TARGET KEY;
18892  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.TREE2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18893  proc datasets lib=work nolist;
18894  delete TEMP_INFO SORTEDEMINFO;
18895  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18896  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 13, 2022
Time:                18:05:30
*------------------------------------------------------------*
18920  data EMWS4.Tree2_EMOUTFIT;
18921  set EMWS4.Tree2_EMOUTFIT;
18922  length TargetLabel $200;
18923  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18924  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18925  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: The data set EMWS4.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18926  proc sort data=EMWS4.Tree2_EMREPORTFIT nothreads;
18927  by TARGET;
18928  run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The data set EMWS4.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18929  %let _EMwarndup = 0;
18930  %let _EMtargetdup =;
18931  %let _EMASEtargetdup =;
18932  data _null_;
18933  set EMWS4.Tree2_EMOUTFIT;
18934  if .<_ASE_<0.000001 then do;
18935  call symput('_EMwarndup', '1');
18936  call symput('_EMtargetdup', target);
18937  call symput('_EMASEtargetdup', put(_ASE_, best.));
18938  end;
18939  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18940  %let EMEXCEPTIONSTRING=;
18941  *------------------------------------------------------------*;
18942  * REPORT: Tree2;
18943  *------------------------------------------------------------*;
18944  %let EM_ACTION = REPORT;
18945  %let syscc = 0;
18946  %macro main;
18947
18948    %if %upcase(&EM_ACTION) = CREATE %then %do;
18949      filename temp catalog 'sashelp.emmodl.tree_create.source';
18950      %include temp;
18951      filename temp;
18952
18953      %em_tree_create;
18954    %end;
18955
18956     %else
18957     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18958
18959         filename temp catalog 'sashelp.emmodl.tree_train.source';
18960         %include temp;
18961         filename temp;
18962         %em_tree_train;
18963     %end;
18964
18965    %else
18966    %if %upcase(&EM_ACTION) = SCORE %then %do;
18967      filename temp catalog 'sashelp.emmodl.tree_score.source';
18968      %include temp;
18969      filename temp;
18970
18971      %em_tree_score;
18972
18973    %end;
18974
18975    %else
18976    %if %upcase(&EM_ACTION) = REPORT %then %do;
18977
18978         filename temp catalog 'sashelp.emmodl.tree_report.source';
18979         %include temp;
18980         filename temp;
18981
18982         %em_tree_report;
18983     %end;
18984
18985    %else
18986    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18987
18988         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18989         %include temp;
18990         filename temp;
18991         %EM_TREE_OPENTREEVIEWER;
18992
18993     %end;
18994
18995    %else
18996    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18997
18998         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18999         %include temp;
19000         filename temp;
19001         %EM_TREE_CLOSETREEVIEWER;
19002
19003     %end;
19004
19005
19006     %doendm:
19007  %mend main;
19008
19009  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19011 +%macro em_tree_makePlotDs( multipleTar= );
19013 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19014 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19015 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19016 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19018 +  /* determine if validation statistics will be displayed */
19019 +  %let validflag=N;
19020 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19021 +    /* determine if validation data exists */
19022 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19023 +      %let validflag=Y;
19024 +    %end;
19025 +  %end;
19027 +   /* retrieve name of decmeta even in presence of multiple targets */
19028 +   %let decmeta = ;
19029 +   %if &EM_DEC_DECMETA eq %then %do;
19030 +     data _Target;
19031 +       set &em_data_variableset;
19032 +       where ROLE='TARGET' and USE in('D', 'Y');
19033 +       keep NAME;
19034 +     run;
19035 +     proc sort data=_Target;
19036 +       by NAME;
19037 +     run;
19038 +     proc sort data=EM_TARGETDECINFO;
19039 +       by TARGET;
19040 +     run;
19041 +     data _Target;
19042 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19043 +       by NAME;
19044 +       if _a then do;
19045 +         call symput('decmeta', trim(DECMETA));
19046 +       end;
19047 +     run;
19048 +     proc delete data=_Target;run;
19049 +   %end;
19050 +   %else %let decmeta = &EM_DEC_DECMETA;
19053 +  /* retrieve targetEvent from decmeta */
19054 +  %let targetEvent=;
19055 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19056 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19057 +      data _null_;
19058 +       set &DECMETA(where=(_TYPE_="TARGET"));
19059 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19060 +      run;
19061 +    %end;
19062 +  %end;
19064 +  /* retrieve predicted var for targetEvent from decmeta */
19065 +  %let predTarget=;
19066 +  %let predLvl=;
19067 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19068 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19069 +      data _null_;
19070 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19071 +       call symput('predTarget', strip(VARIABLE));
19072 +       call symput('predLvl', strip(LEVEL));
19073 +      run;
19074 +    %end;
19075 +  %end;
19076 +  %else %do;
19077 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19078 +      data _null_;
19079 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19080 +       call symput('predTarget', strip(VARIABLE));
19081 +      run;
19082 +    %end;
19083 +  %end;
19085 +  /* create BelowText value */
19086 +  data belowtext;
19087 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19088 +    keep node belowtext;
19089 +  run;
19091 +  /* replace belowtext with variable label if it exists */
19092 +  data belowtext2;
19093 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19094 +    keep node belowtextlbl;
19095 +  run;
19097 +  proc sort data=belowtext; by node; run;
19098 +  proc sort data=belowtext2; by node; run;
19100 +  data belowtext;
19101 +    merge belowtext belowtext2(in=_a);
19102 +    by node;
19103 +    if _a then belowtext=belowtextlbl;
19104 +    keep node belowtext;
19105 +  run;
19107 +  /* create AboveText value */
19108 +  data abovetext;
19109 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19110 +  run;
19111 +  proc sort data=abovetext; by node numeric_value; run;
19113 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19114 +  data abovetext;
19115 +    set abovetext(rename=(node=parent));
19116 +    by parent numeric_value;
19117 +    retain abovetext tempstring flag branch origval origchar ;
19118 +    length abovetext $256;
19119 +    length tempstring origchar $64;
19121 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19122 +      if first.parent then do;
19123 +        if missing(character_value) then do;
19124 +          numeric_value = round(numeric_value, &sp_precision);
19125 +          abovetext = "< "||strip(NUMERIC_VALUE);
19126 +          branch = 1;
19127 +          origval = numeric_value;
19128 +          output;
19129 +        end;
19130 +        else do;
19131 +          abovetext = "< "||strip(CHARACTER_VALUE);
19132 +          branch = 1;
19133 +          origchar = character_value;
19134 +          output;
19135 +        end;
19137 +        if first.parent AND last.parent then do;
19138 +          if missing(character_value) then do;
19139 +            numeric_value = round(numeric_value, &sp_precision);
19140 +            branch = branch + 1;
19141 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19142 +            output;
19143 +          end;
19144 +          else do;
19145 +            branch = branch + 1;
19146 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19147 +            output;
19148 +          end;
19149 +        end;
19150 +      end;
19151 +      else if last.parent then do;
19152 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19153 +          if missing(character_value) then do;
19154 +            numeric_value = round(numeric_value, &sp_precision);
19155 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19156 +          end;
19157 +          else do;
19158 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19159 +          end;
19160 +          branch = branch + 1;
19161 +          output;
19163 +          if missing(character_value) then do;
19164 +            numeric_value = round(numeric_value, &sp_precision);
19165 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19166 +          end;
19167 +          else do;
19168 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19169 +          end;
19170 +          branch = branch + 1;
19171 +          output;
19172 +        end;
19173 +        else do;
19174 +          if missing(character_value) then do;
19175 +            numeric_value = round(numeric_value, &sp_precision);
19176 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19177 +          end;
19178 +          else do;
19179 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19180 +          end;
19181 +          branch = branch + 1;
19182 +          output;
19183 +        end;
19184 +      end;
19185 +      else do;
19186 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19187 +          if missing(character_value) then do;
19188 +            numeric_value = round(numeric_value,&sp_precision);
19189 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19190 +            origval = numeric_value;
19191 +          end;
19192 +          else do;
19193 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19194 +            origchar = character_value;
19195 +          end;
19196 +          branch = branch + 1;
19197 +          output;
19199 +        end;
19200 +        else do;
19201 +          if missing(character_value) then do;
19202 +            numeric_value = round(numeric_value, &sp_precision);
19203 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19204 +            origval = numeric_value;
19205 +          end;
19206 +          else do;
19207 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19208 +            origval = character_value;
19209 +          end;
19210 +          branch = branch + 1;
19211 +          output;
19212 +        end;
19213 +      end;
19214 +    end;
19215 +    else do;
19216 +       if first.numeric_value then do;
19217 +         flag = 0;
19218 +         abovetext = strip(CHARACTER_VALUE);
19219 +         branch = numeric_value;
19220 +         if first.numeric_value AND last.numeric_value then do;
19221 +           output;
19222 +         end;
19223 +       end;
19224 +       else if last.numeric_value then do;
19225 +         if flag=0 then do;
19226 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19227 +           length = length(strip(tempstring));
19228 +           if length < 32 then do;
19229 +             abovetext = strip(tempstring);
19230 +           end;
19231 +           else do;
19232 +             abovetext = strip(abovetext)||", ...";
19233 +             flag = 1;
19234 +           end;
19235 +         end;
19236 +         branch = numeric_value;
19237 +         output;
19238 +       end;
19239 +       else do;
19240 +         if flag=0 then do;
19241 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19242 +           length = length(strip(tempstring));
19243 +           if length < 32 then do;
19244 +             abovetext = strip(tempstring);
19245 +           end;
19246 +           else do;
19247 +             abovetext = strip(abovetext)||", ...";
19248 +             flag=1;
19249 +           end;
19250 +         end;
19251 +         branch = numeric_value;
19252 +       end;
19253 +    end;
19254 +    keep parent branch abovetext;
19255 +  run;
19257 +  /* Missing value to abovetext */
19258 +  data tempmissing;
19259 +    set &EM_USER_OUTRULES;
19260 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19261 +    rename node=parent numeric_value=branch character_value=misschar;
19262 +  run;
19265 +  proc sort data=abovetext; by parent branch; run;
19266 +  proc sort data=tempmissing; by parent branch; run;
19267 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19269 +  data tempoutnodes;
19270 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19271 +    by parent branch;
19272 +    length traintotal validtotal 8;
19273 +    retain traintotal validtotal;
19275 +    if _a then do;
19276 +      if ^MISSING(abovetext) then do;
19277 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19278 +      end;
19279 +      else do;
19280 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19281 +      end;
19282 +    end;
19283 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19285 +    if node=1 then do;
19286 +      traintotal = N;
19287 +      validtotal=VN;
19288 +    end;
19290 +    drop role rank stat misschar belowtext;
19291 +  run;
19292 +  proc sort data=tempoutnodes; by node; run;
19293 +  proc sort data=belowtext; by node; run;
19295 +  data tempoutnodes;
19296 +    merge tempoutnodes belowtext;
19297 +    by node;
19299 +  run;
19301 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19302 +  %let adjusted = N;
19303 +  %let npriors = 0;
19304 +  data _null_ ;
19305 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19306 +    if eof then do ;
19307 +      call symput("npriors" , strip(put(_N_,best.))) ;
19308 +    end;
19309 +  run;
19310 +  %if &npriors gt 0 %then %let adjusted=Y;
19313 +  /* create a table with targetUsed and targetLevel columns for each node */
19314 +  data temptarmeta;
19315 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19316 +    %if &multipleTar eq N %then %do;
19317 +      AND USE in ('D', 'Y')
19318 +    %end;
19319 +    ));
19320 +    length TARGET $32;
19321 +    Target=name;
19322 +    keep target level;
19323 +  run;
19325 +  %if &multipleTar eq Y %then %do;
19326 +    data temptargetused;
19327 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19328 +      keep node target;
19329 +    run;
19330 +    proc sort data=temptargetused; by target; run;
19331 +    proc sort data=temptarmeta; by target; run;
19332 +    data temptargetused;
19333 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19334 +      by target;
19335 +      if _a and _b;
19336 +    run;
19337 +  %end;
19338 +  %else %do;
19339 +    data temptargetused;
19340 +      set &EM_USER_OUTSTATS;
19341 +      length target $32 tarlevel $10;
19342 +      target="%EM_TARGET";
19343 +      tarlevel="%EM_TARGET_LEVEL";
19344 +      keep node target tarlevel;
19345 +    run;
19346 +    proc sort data=temptargetused nodupkey; by node; run;
19347 +  %end;
19349 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19350 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19351 +  proc sort data=temptargetused; by node; run;
19354 +  /* create tables for all interval targets as well as all class targets */
19355 +  data tempinterval tempclass;
19356 +    merge tempoutstats temptargetused( rename=(target=targetused));
19357 +    by node;
19358 +    %if "&multipleTar" eq "Y" %then %do;
19359 +      if ((missing(Target)) OR (target=targetused ));
19360 +    %end;
19362 +    if tarlevel="INTERVAL" then output tempinterval;
19363 +    else output tempclass;
19364 +  run;
19366 +  /* initialize intTarget and classTarget flags */
19367 +  %let em_intNobs =0;
19368 +  %let em_classNobs = 0;
19369 +  %let em_intTarget= N;
19370 +  %let em_classTarget= N;
19372 +  proc sql;
19373 +    reset noprint;
19374 +    select count(*) into :em_intNobs from tempinterval;
19375 +  quit;
19376 +  proc sql;
19377 +    reset noprint;
19378 +    select count(*) into :em_classNobs from tempclass;
19379 +  quit;
19381 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19382 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19384 +  /* retrieve all information for interval targets */
19385 +  %if &em_intTarget eq Y %then %do;
19387 +    /* determine if leaf variable exists */
19388 +    %let dsid=%sysfunc(open(tempinterval,i));
19389 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19390 +    %let rc=%sysfunc(close(&dsid));
19392 +    proc transpose data=tempinterval
19393 +      %if &leafexists %then %do;
19394 +        (drop=leaf)
19395 +      %end;
19396 +      %if &validexist %then %do;
19397 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19398 +      %end;
19399 +      %else %do;
19400 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19401 +      %end;
19402 +      by node;
19403 +      id statname;
19404 +    run;
19405 +    data tempinterval;
19406 +      set tempinterval;
19407 +      if missing(N) then delete;
19408 +    run;
19409 +  %end;
19411 +  /* retrieve all information for class targets */
19412 +  %if &em_classTarget eq Y %then %do;
19413 +    proc sort data=tempclass; by node category; run;
19414 +    %if &validflag eq N %then %do;
19415 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19416 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19417 +    %end;
19418 +    %else %do;
19419 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19420 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19421 +    %end;
19422 +      set tempclass;
19424 +      %if &validflag eq N %then %do;
19425 +        %if "&adjusted" eq "N" %then %do;
19426 +          if statname="N" then output tempn;
19427 +        %end;
19428 +        %else %do;
19429 +          if statname="NPRIORS" then output tempn;
19430 +        %end;
19431 +        else if statname="PREDICTION" then output temppredict;
19432 +        else if statname="PROBABILITY" then output tempprob;
19433 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19434 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19435 +      %end;
19436 +      %else %do;
19437 +        %if "&adjusted" eq "N" %then %do;
19438 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19439 +        %end;
19440 +        %else %do;
19441 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19442 +        %end;
19443 +        else if statname="PREDICTION" then output temppredict;
19444 +        else if statname="PROBABILITY" then output tempprob;
19445 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19446 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19447 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19448 +      %end;
19449 +    run;
19452 +    /* determine if profit/loss exists in tempprofit */
19453 +    %let em_profitflag=0;
19454 +    %let em_lossflag=0;
19455 +    proc sql;
19456 +      reset noprint;
19457 +      select count(*) into :em_profitflag from tempprofit;
19458 +    quit;
19459 +    proc sql;
19460 +      reset noprint;
19461 +      select count(*) into :em_lossflag from temploss;
19462 +    quit;
19464 +    %if &validFlag eq Y %then %do;
19465 +      proc transpose data=tempn
19466 +        %if "&adjusted" eq "N" %then %do;
19467 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19468 +        %end;
19469 +        %else %do;
19470 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19471 +        %end;
19472 +        by node;
19473 +        id statname;
19474 +      run;
19475 +      %if &em_profitflag ne 0 %then %do;
19476 +        proc transpose data=tempprofit out=tempprofit;
19477 +          by node category;
19478 +          id statname ;
19479 +        run;
19480 +      %end;
19481 +      %if &em_lossflag ne 0 %then %do;
19482 +        proc transpose data=temploss out=temploss;
19483 +          by node category;
19484 +          id statname ;
19485 +        run;
19486 +      %end;
19487 +      data tempprob;
19488 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19489 +        by node
19490 +        %if &multipleTar eq Y %then %do;
19491 +          target
19492 +        %end;
19493 +        category;
19494 +      run;
19495 +    %end;
19497 +    /* store percentcorrect value */
19498 +    data temppredict;
19499 +      merge tempprob temppredict(in=_a);
19500 +      by node category;
19501 +      if _a then do;
19502 +        percentCorrect = statvalue;
19503 +        %if &validFlag eq Y %then %do;
19504 +          vpercentCorrect= vstatvalue;
19505 +        %end;
19506 +      end;
19507 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19508 +      %if &validFlag eq Y %then %do;
19509 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19510 +      %end;
19511 +      ;
19512 +      if missing(percentCorrect) then delete;
19513 +      drop target;
19514 +    run;
19516 +    /* build profittext */
19517 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19518 +      data tempprofittext(keep= node profittext profitloss);
19519 +        length profittext $800 profitloss 8.;
19520 +        retain profittext profitloss;
19522 +        merge tempprob
19523 +        %if &em_profitflag ne 0 %then %do;
19524 +          tempprofit
19525 +        %end;
19526 +        %else %if &em_lossflag ne 0 %then %do;
19527 +          temploss
19528 +        %end;
19529 +        ;
19530 +        by node category;
19532 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19533 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19534 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19535 +          %let profittype = ALL;
19536 +        %end;
19538 +        /* create the profitloss variable for nodecolor if selected */
19539 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19541 +        %if "&profittype" eq "ALL" %then %do;
19542 +          if strip(CATEGORY)="&targetEvent" then do;
19543 +            profitloss=statvalue;
19544 +          end;
19545 +          if first.node then do;
19546 +            %if &validFlag eq N %then %do;
19547 +             %if &em_profitflag ne 0 %then %do;
19548 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19549 +             %end;
19550 +             %if &em_lossflag ne 0 %then %do;
19551 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19552 +             %end;
19553 +            %end;
19554 +            %else %do;
19555 +             %if &em_profitflag ne 0 %then %do;
19556 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19556!+;
19557 +             %end;
19558 +             %if &em_lossflag ne 0 %then %do;
19559 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19560 +             %end;
19561 +            %end;
19562 +          end;
19563 +          else if last.node then do;
19564 +            %if &validFlag eq N %then %do;
19565 +             %if &em_profitflag ne 0 %then %do;
19566 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19567 +             %end;
19568 +             %if &em_lossflag ne 0 %then %do;
19569 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19570 +             %end;
19571 +             /*if CATEGORY="&targetEvent" then do;
19572 +               profitloss=statvalue;
19573 +             end;*/
19574 +            %end;
19575 +            %else %do;
19576 +             %if &em_profitflag ne 0 %then %do;
19577 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19577!+14.&EM_PROPERTY_SPLITPRECISION);
19578 +                if CATEGORY="&targetEvent" then do;
19579 +                 profitloss=ALTERNATIVE_PROFIT;
19580 +                end;
19581 +             %end;
19582 +             %if &em_lossflag ne 0 %then %do;
19583 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19583!+14.&EM_PROPERTY_SPLITPRECISION);
19584 +                if CATEGORY="&targetEvent" then do;
19585 +                  profitloss=ALTERNATIVE_LOSS;
19586 +                end;
19587 +             %end;
19588 +            %end;
19589 +            output;
19590 +          end;
19591 +          else do;
19592 +            %if &validFlag eq N %then %do;
19593 +             %if &em_profitflag ne 0 %then %do;
19594 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19595 +             %end;
19596 +             %if &em_lossflag ne 0 %then %do;
19597 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19598 +             %end;
19599 +            %end;
19600 +            %else %do;
19601 +             %if &em_profitflag ne 0 %then %do;
19602 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19602!+14.&EM_PROPERTY_SPLITPRECISION);
19603 +             %end;
19604 +             %if &em_lossflag ne 0 %then %do;
19605 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19605!+14.&EM_PROPERTY_SPLITPRECISION);
19606 +             %end;
19607 +            %end;
19608 +          end;
19609 +        %end;
19610 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19611 +          if strip(CATEGORY) = "&targetevent" then do;
19612 +            %if &validFlag eq N %then %do;
19613 +             %if &em_profitflag ne 0 %then %do;
19614 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19615 +             %end;
19616 +             %if &em_lossflag ne 0 %then %do;
19617 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19618 +             %end;
19619 +             profitloss=statvalue;
19620 +            %end;
19621 +            %else %do;
19622 +             %if &em_profitflag ne 0 %then %do;
19623 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19623!+;
19624 +                profitloss=ALTERNATIVE_PROFIT;
19625 +             %end;
19626 +             %if &em_lossflag ne 0 %then %do;
19627 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19628 +                profitloss=ALTERNATIVE_LOSS;
19629 +             %end;
19630 +            %end;
19631 +            output;
19632 +          end;
19633 +        %end;
19634 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19635 +          if strip(CATEGORY) = "&targetevent" then do;
19636 +            %if &validFlag eq N %then %do;
19637 +             profitloss=statvalue;
19638 +            %end;
19639 +            %else %do;
19640 +             %if &em_profitflag ne 0 %then %do;
19641 +                profitloss=ALTERNATIVE_PROFIT;
19642 +             %end;
19643 +             %if &em_lossflag ne 0 %then %do;
19644 +                profitloss=ALTERNATIVE_LOSS;
19645 +             %end;
19646 +            %end;
19647 +            output;
19648 +          end;
19649 +        %end;
19650 +      run;
19651 +    %end;
19653 +    data tempprob(keep= node probtext);
19654 +      length probtext $800;
19655 +      retain probtext;
19656 +      set tempprob ;
19657 +      by node;
19659 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19660 +      %let probtype = &EM_PROPERTY_TARGET;
19661 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19662 +        %let probtype = ALL;
19663 +      %end;
19665 +      %if "&probtype" eq "ALL" %then %do;
19666 +        if first.node then do;
19667 +          %if &validFlag eq N %then %do;
19668 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19669 +          %end;
19670 +          %else %do;
19671 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19672 +          %end;
19673 +        end;
19674 +        else if last.node then do;
19675 +          %if &validFlag eq N %then %do;
19676 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19677 +          %end;
19678 +          %else %do;
19679 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19680 +          %end;
19681 +          output;
19682 +        end;
19683 +        else do;
19684 +          %if &validFlag eq N %then %do;
19685 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19686 +          %end;
19687 +          %else %do;
19688 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19689 +          %end;
19690 +        end;
19691 +      %end;
19692 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19693 +        if strip(CATEGORY) = "&targetevent" then do;
19694 +          %if &validFlag eq N %then %do;
19695 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19696 +          %end;
19697 +          %else %do;
19698 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19699 +          %end;
19700 +          output;
19701 +        end;
19702 +      %end;
19703 +      %else %if "&probtype" eq "NONE" %then %do;
19704 +        if last.node then do;
19705 +          output;
19706 +        end;
19707 +      %end;
19708 +    run;
19709 +  %end;
19711 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19713 +  %let oldexists=0;
19714 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19715 +     data old_tree_plot;
19716 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19717 +        rename nodecolor=oldnodecolor;
19718 +     run;
19720 +     proc sort data=old_tree_plot;
19721 +        by node;
19722 +     run;
19724 +     %let oldexists=1;
19725 +  %end;
19727 +  data &EM_USER_TREE_PLOT;
19728 +    length textall $800;
19729 +    merge tempoutnodes temptargetused
19731 +    %if &em_intTarget eq Y %then %do;
19732 +      tempinterval
19733 +    %end;
19735 +    %if &em_classTarget eq Y %then %do;
19737 +      %if &validFlag eq N %then %do;
19738 +        tempn(rename=(statvalue=N))
19739 +      %end;
19740 +      %else %do;
19741 +        tempn
19742 +      %end;
19744 +      temppredict tempprob
19746 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19747 +        tempprofittext
19748 +      %end;
19749 +    %end;
19750 +    ;
19751 +    by node;
19753 +    /* build nodetext based on user selection */
19754 +    textall="";
19756 +    %if &em_intTarget eq Y %then %do;
19757 +    if tarlevel="INTERVAL" then do;
19758 +      /* Nodeid */
19759 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19760 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19761 +      %end;
19763 +      /* Target identifier if multiple targets are used */
19764 +      %if "&multipleTar" eq "Y" %then %do;
19765 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19766 +      %end;
19768 +      %if &validFlag eq Y %then %do;
19769 +         /* Column labels displayed in validflag eq Y only */
19770 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19771 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19771!+noquote ))";
19772 +         %end;
19774 +         /* Average values */
19775 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19776 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19777 +         %end;
19779 +         /* RASE */
19780 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19781 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19782 +         %end;
19784 +         /* Count */
19785 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19786 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19787 +         %end;
19788 +      %end;
19789 +      %else %do;
19790 +         /* Average values */
19791 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19792 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19793 +         %end;
19795 +         /* RASE */
19796 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19797 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19798 +         %end;
19800 +         /* Count */
19801 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19802 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19803 +         %end;
19804 +      %end;
19806 +      /* nodecolor */
19807 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19808 +        nodecolor=PREDICTION;
19809 +      %end;
19810 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19811 +        nodecolor=RASE;
19812 +      %end;
19813 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19814 +        nodecolor=1;
19815 +      %end;
19817 +    end;
19818 +    %end;
19819 +    %if &em_classTarget eq Y %then %do;
19820 +    if tarlevel^="INTERVAL" then  do;
19822 +      /* Nodeid */
19823 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19824 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19825 +      %end;
19826 +      /* Target identifier if multiple targets are used */
19827 +      %if "&multipleTar" eq "Y" %then %do;
19828 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19829 +      %end;
19831 +      /* Predicted values */
19832 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19833 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19834 +      %end;
19836 +      /* Column labels displayed in validflag eq Y only */
19837 +      %if "&ValidFlag" eq "Y" %then %do;
19838 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19839 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19839!+noquote ))";
19840 +        %end;
19841 +      %end;
19843 +      /* Target Values */
19844 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19845 +        textall=strip(textall)||"0A"x||strip(probtext);
19846 +      %end;
19848 +      /* include profit or loss for all target levels */
19849 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19850 +        textall=strip(textall)||"0A"x||strip(profittext);
19851 +      %end;
19853 +      %if &validFlag eq N %then %do;
19854 +        /* Percent Correct */
19855 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19856 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19857 +        %end;
19859 +         /* Count */
19860 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19861 +          %if "&adjusted" eq "N" %then %do;
19862 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19863 +          %end;
19864 +          %else %do;
19865 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19866 +          %end;
19867 +         %end;
19868 +      %end;
19869 +      %else %do;
19870 +        /* Percent Correct */
19871 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19872 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19873 +        %end;
19875 +         /* Count */
19876 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19877 +          %if "&adjusted" eq "N" %then %do;
19878 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19879 +          %end;
19880 +          %else %do;
19881 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19882 +          %end;
19883 +         %end;
19884 +      %end;
19886 +      /* nodecolor */
19887 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19888 +       %if &multipleTar ne Y %then %do;
19889 +        nodecolor=&predTarget;
19890 +       %end;
19891 +       %else %do;
19892 +         nodecolor=percentcorrect;
19893 +       %end;
19894 +      %end;
19895 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19896 +        nodecolor=percentcorrect;
19897 +      %end;
19898 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19899 +        nodecolor=1;
19900 +      %end;
19901 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19902 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19903 +          nodecolor=percentcorrect;
19904 +        %end;
19905 +        %else %do;
19906 +          nodecolor=profitloss;
19907 +        %end;
19908 +      %end;
19910 +    end;
19911 +    %end;
19912 +    %if &em_intTarget eq Y %then %do;
19913 +     drop  PREDICTION  TARGET TARLEVEL
19914 +     %if &ValidFlag eq Y %then %do;
19915 +         VPREDICTION
19916 +     %end;
19917 +     ;
19918 +    %end;
19919 +    %if &em_classTarget eq Y %then %do;
19920 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19921 +     %if &ValidFlag eq Y %then %do;
19922 +         VSTATVALUE
19923 +     %end;
19924 +     ;
19925 +    %end;
19927 +  run;
19929 +  /* add leaf index information to plotds - based on primary target only*/
19930 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19931 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19932 +      set &EM_USER_OUTSTATS;
19933 +      if ((statname="PROBABILITY"
19934 +      %if &validexist %then %do;
19935 +       or statname="VALID: PROBABILITY"
19936 +      %end;
19937 +      ) AND (CATEGORY="&TARGETEVENT")
19938 +      %if "&multipleTar" eq "Y" %then %do;
19939 +        AND (Target="%EM_TARGET")
19940 +      %end;
19941 +      );
19942 +    run;
19944 +    %if &validexist %then %do;
19945 +      proc sort data=tempprob; by node; run;
19946 +      %let vpredTarget = V%substr(&predTarget, 2);
19947 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19948 +         by node;
19949 +         id statname;
19950 +      run;
19951 +    %end;
19952 +  %end;
19953 +  %else %do;
19954 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19955 +      set &EM_USER_OUTSTATS;
19956 +      if ((statname="PREDICTION"
19957 +      %if &validexist %then %do;
19958 +       or statname="VALID: PREDICTION"
19959 +      %end;
19960 +      )
19961 +      %if "&multipleTar" eq "Y" %then %do;
19962 +        AND (Target="%EM_TARGET")
19963 +      %end;
19964 +      );
19965 +    run;
19966 +    %if &validexist %then %do;
19967 +      proc sort data=tempprob; by node; run;
19968 +      %let vpredTarget = V%substr(&predTarget, 2);
19969 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19970 +         by node;
19971 +         id statname;
19972 +      run;
19973 +    %end;
19974 +  %end;
19976 +  proc sort data=tempprob; by node; run;
19977 +  data tempoutnodes;
19978 +    merge tempoutnodes tempprob;
19979 +    by node;
19980 +  run;
19982 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19983 +  data tempnodes;
19984 +    retain traintotal validtotal;
19985 +    set tempnodes(where=(leaf ne . ));
19986 +    tprob=round(&predTarget, .01);
19987 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19988 +      percevent_train=round(tprob*100, .01);
19989 +    %end;
19990 +    %else %do;
19991 +      percevent_train=tprob;
19992 +    %end;
19994 +    perc_train=round((n/traintotal)*100, 0.01);
19995 +    /* leafwidth already has a *10 multiplier */
19996 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19998 +    %if &validexist %then %do;
19999 +      %let vpredTarget = V%substr(&predTarget,2);
20000 +      vprob=round(&vpredTarget, .01);
20001 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20002 +        percevent_valid=round(vprob*100, .01);
20003 +      %end;
20004 +      %else %do;
20005 +        percevent_valid=vprob;
20006 +      %end;
20007 +      perc_valid=round((vn/validtotal)*100, .01);
20008 +    %end;
20010 +    index=_N_;
20011 +    keep node index tprob perc_train percevent_train
20012 +    %if &validexist %then %do;
20013 +        vprob percevent_valid perc_valid
20014 +    %end;
20015 +    ;
20016 +  run;
20017 +  proc sort data=tempnodes; by node; run;
20018 +  data &EM_USER_TREE_PLOT;
20019 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20020 +    by node;
20021 +    if missing(node) then delete;
20022 +    %if &oldexists %then %do;
20023 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20024 +      drop oldnodecolor;
20025 +    %end;
20026 +    abovetext = compbl(abovetext);
20028 +    /* add variable labels */
20029 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20030 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20031 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20032 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20033 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20034 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20036 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20037 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20038 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20039 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20040 +          %end;
20041 +          %else %do;
20042 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20043 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20044 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20045 +          %end;
20046 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20048 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20049 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20050 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20051 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20052 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20053 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20054 +          %end;
20055 +          %else %do;
20056 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20057 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20058 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20059 +          %end;
20060 +    ;
20061 +  run;
20063 +  /* delete temporary tables */
20064 +  proc datasets lib=work nolist;
20065 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20066 +  run;
20068 +%mend em_tree_makePlotDs;
20072 +%macro em_tree_report;
20074 +   /* report properties */
20075 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20076 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20077 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20078 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20079 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20080 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20081 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20082 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20083 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20084 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20085 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20086 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20087 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20089 +   %let validexist=0;
20090 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20091 +     %let validexist=1;
20092 +   %end;
20094 +   /* determine if multiple targets will be processed */
20095 +   %let em_tree_multipleTargets=N;
20096 +   %let em_tree_numTarget=1;
20097 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20098 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20099 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20100 +         %let em_tree_multipleTargets=N;
20101 +      %end;
20102 +      %else %do;
20103 +        data _null_;
20104 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20105 +          if eof then
20106 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20107 +        run;
20109 +        %if &em_tree_numTarget gt 1 %then %do;
20110 +           %let em_tree_multipleTargets=Y;
20111 +        %end;
20112 +     %end;
20113 +   %end;
20115 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20117 +   /* variable importance */
20118 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20119 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20121 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20122 +     /* and the columns may not be generated                                                                                 */
20123 +     %let em_tree_cvexists=;
20124 +     %let em_tree_surrexists=.;
20125 +     data _null_;
20126 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20127 +       if eof then do ;
20128 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20129 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20130 +       end;
20131 +     run;
20133 +     data &EM_USER_OUTIMPORT;
20134 +         set &EM_USER_OUTIMPORT;
20135 +         /* format columns based on Precison value specified */
20136 +         format importance 15.&EM_PROPERTY_PRECISION
20137 +              %if &validexist %then %do;
20138 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20139 +              %end;
20140 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20141 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20142 +              %end;
20143 +         ;
20144 +     run;
20146 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20147 +     proc print data=&EM_USER_OUTIMPORT
20148 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20149 +          (where=((nrules>0) OR (nsurrogates>0)))
20150 +        %end;
20151 +        %else %do;
20152 +           (where=(nrules>0))
20153 +        %end;
20154 +        label noobs
20155 +        ;
20156 +     run;
20157 +     title10;
20159 +   %end;
20161 +   /* Sequence */
20162 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20163 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20164 +   data _null_ ;
20165 +      set &EM_USER_outseq (obs=2) end=eof ;
20166 +      if eof then do ;
20167 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20168 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20169 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20170 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20171 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20172 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20173 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20174 +      end;
20175 +    run;
20177 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20178 +      data &EM_USER_OUTSEQ;
20179 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20180 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20181 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20182 +           _XMISC_=_VMISC_
20183 +        %end;
20184 +        %if "&em_tree_aprof" ne "."  %then %do;
20185 +           _XAPROF_=_VAPROF_
20186 +           _XPROF_ = _VPROF_
20187 +        %end;
20188 +        %if "&em_tree_aloss" ne "."  %then %do;
20189 +           _XALOSS_=_VALOSS_
20190 +        %end;
20191 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20192 +           _XPASE_ = _VPASE_
20193 +           _XPMISC_ = _VPMISC_
20194 +        %end;
20196 +        ));
20197 +     %end;
20198 +     %else %do;
20199 +        set &EM_USER_OUTSEQ;
20200 +     %end;
20202 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20203 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20204 +            _MISC_   15.&EM_PROPERTY_PRECISION
20205 +         %end;
20206 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20207 +            _PASE_  15.&EM_PROPERTY_PRECISION
20208 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20209 +         %end;
20210 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20211 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20212 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20213 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20214 +            %end;
20215 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20216 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20217 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20218 +            %end;
20219 +         %end;
20220 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20221 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20222 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20223 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20224 +            %end;
20225 +         %end;
20226 +         %if "&em_tree_seq" ne "." %then %do;
20227 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20228 +         %end;
20229 +         %if "&em_tree_vseq" ne "." %then %do;
20230 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20231 +         %end;
20232 +         %if "&em_tree_aprof" ne "." %then %do;
20233 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20234 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20235 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20236 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20237 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20238 +           %end;
20239 +         %end;
20240 +         %else %if "&em_tree_aloss" ne "." %then %do;
20241 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20242 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20243 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20244 +           %end;
20245 +         %end;
20246 +      ;
20247 +    run;
20248 +   %end;
20250 +   /* Observation Based Importance */
20251 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20253 +      /* need to check for 0 obs */
20254 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20255 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20256 +      %let rc=%sysfunc(close(&dsid));
20258 +      %if &onobs %then %do;
20259 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20260 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20262 +         data &EM_USER_OUTOBSIMP;
20263 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20264 +           if _a;
20265 +           by _INPUT1_;
20266 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20267 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20268 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20269 +                   %end;
20270 +                   ;
20271 +         run;
20272 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20273 +      %end;
20274 +   %end;
20276 +  %end;
20278 +  /* create dataset to support tree diagram and icicle plot */
20279 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20280 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20282 +  /* display tree diagram */
20283 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20284 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20286 +  /* display icicle diagram */
20287 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20288 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20290 +  /* Leaf Statistics Plot */
20291 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20293 +  /* print leaf information to output window */
20294 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20296 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20297 +       by descending N;
20298 +     run;
20300 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20301 +     %local vn;
20302 +     data _null_;
20303 +       set t (obs=2) end=eof;
20304 +       if eof then do;
20305 +         call symput("vn", strip(put(vn, best.)));
20306 +       end;
20307 +     run;
20309 +     data t;
20310 +       set t;
20311 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20312 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20313 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20314 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20315 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20316 +       %end;
20317 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20318 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20319 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20320 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20321 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20322 +          %end;
20323 +       %end;
20324 +       ;
20325 +     run;
20327 +     /* determine if rase is found in t */
20328 +    %let dsid=%sysfunc(open(t,i));
20329 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20330 +    %let rc=%sysfunc(close(&dsid));
20332 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20333 +     proc print data=t noobs label;
20334 +       where tprob ne .;
20335 +       var node depth N tprob
20336 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20337 +         %if "&vn" ne "." %then %do;
20338 +           VN
20339 +         %end;
20340 +         vprob
20341 +       %end;
20342 +       %if &raseexists %then %do;
20343 +            RASE
20344 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20345 +              VRASE
20346 +            %end;
20347 +       %end;
20348 +       ;
20349 +     run;
20350 +     title10;
20351 +  %end;
20353 +  /* create plots that are done during training of node */
20354 +  /* display iterative plot, including reference line */
20355 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20356 +   /* %if &nleaves eq  %then %do; */
20357 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20358 +      data _null_;
20359 +        set &EM_USER_OUTTOPOLOGY end=eof;
20360 +        if eof then do;
20361 +          call symput('nleaves', LEAF);
20362 +        end;
20363 +      run;
20364 +   /* %end; */
20366 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20367 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20368 +  %end;
20370 +  /* display leaf statistics */
20371 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20373 +  /* stats by node if multiple targets = Y */
20374 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20375 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20376 +    data &EM_USER_OUTSTATS;
20377 +      set &EM_USER_OUTSTATS;
20379 +     * if STATNAME="TARGET" then delete;
20380 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20381 +      drop leaf;
20382 +    run;
20383 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20385 +  %end;
20386 +  %else %do;
20387 +    /* add outstats and outdescribe to spk but not results */
20388 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20389 +  %end;
20391 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS4.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: The data set EMWS4.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 386 observations read from the data set EMWS4.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS4.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 15 observations read from the data set EMWS4.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
20392
20393  *------------------------------------------------------------*;
20394  * End REPORT: Tree2;
20395  *------------------------------------------------------------*;
 
20396  /* Reset EM Options */
20397  options formchar="|----|+|---+=|-/\<>*";
20398  options nocenter ls=256 ps=10000;
20399  goptions reset=all device=GIF NODISPLAY;
 
20400  proc sort data=WORK.EM_USER_REPORT;
20401  by ID VIEW;
20402  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20403  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20404  by NAME;
20405  run;
 
NOTE: There were 99 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20406  proc sort data=EMWS4.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20407  by NAME;
20408  run;
 
NOTE: There were 99 observations read from the data set EMWS4.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20409  data WORK.ASSESS_META;
20410  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20411  by NAME;
20412  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20413  data EM_temp_assessMeta;
20414  set EMWS4.Tree2_CMeta_TRAIN;
20415  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20416  run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20417  data EM_temp_assessdata;
20418  set EMWS4.Tree2_TRAIN(keep=
20419  F_RESPOND
20420  I_RESPOND
20421  P_RESPOND0
20422  P_RESPOND1
20423  Q_RESPOND0
20424  Q_RESPOND1
20425  R_RESPOND0
20426  R_RESPOND1
20427  U_RESPOND
20428  V_RESPOND0
20429  V_RESPOND1
20430  _WARN_
20431  RESPOND
20432  );
20433  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24715   data EM_temp_assessMeta;
24716   set EMWS4.Tree2_CMeta_TRAIN;
24717   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24718   run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24719   data EM_temp_assessdata;
24720   set EMWS4.Tree2_VALIDATE(keep=
24721   F_RESPOND
24722   I_RESPOND
24723   P_RESPOND0
24724   P_RESPOND1
24725   Q_RESPOND0
24726   Q_RESPOND1
24727   R_RESPOND0
24728   R_RESPOND1
24729   U_RESPOND
24730   V_RESPOND0
24731   V_RESPOND1
24732   _WARN_
24733   RESPOND
24734   );
24735   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 16121 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS4.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
29026   %let _cn = %sysfunc(getoption(CENTER));
29027   options nocenter;
29028   proc print data=EMWS4.Tree2_EMREPORTFIT noobs label;
29029   var STAT LABEL TRAIN
29030   VALIDATE
29031   ;
29032   by TARGET TARGETLABEL;
29033   title9 ' ';
29034   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29035   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29036   title10;
29037   options &_cn;
 
29038   proc sort data=EMWS4.Tree2_EMCLASSIFICATION nothreads;
29039   by DATAROLE TARGET TARGETLABEL;
29040   run;
 
NOTE: There were 7 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29041   %let _cn = %sysfunc(getoption(CENTER));
29042   options nocenter;
29043   proc print data=EMWS4.Tree2_EMCLASSIFICATION noobs label;
29044   var from into pct_row pct_col count percent
29045   ;
29046   by DATAROLE TARGET TARGETLABEL;
29047   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29048   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29049   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29050   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29051   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29052   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29053   where _TYPE_='PREDICTION';
29054   title9 ' ';
29055   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29056   run;
 
NOTE: There were 7 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29057   title9;
29058   title10;
29059   options &_cn;
 
29060   %let _cn = %sysfunc(getoption(CENTER));
29061   options nocenter;
29062   data EMWS4.Tree2_EMEVENTREPORT;
29063   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
29064   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29064 ! FALSEEVENT
29065   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29066      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29067   FALSEEVENT=0;
29068   FALSENEVENT=0;
29069   TRUEEVENT=0;
29070   TRUENEVENT=0;
29071   set EMWS4.Tree2_EMEVENTREPORT;
29072   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29073   proc print data=EMWS4.Tree2_EMEVENTREPORT noobs label;
29074   title9 ' ';
29075   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29076   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29077   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29078   title10;
29079   options &_cn;
 
29080   proc datasets library=EMWS4 nolist;
29081   modify Tree2_EMRANK;
29082   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29083   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29084   run;
 
NOTE: MODIFY was successful for EMWS4.TREE2_EMRANK.DATA.
29085   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29086   %let _cn = %sysfunc(getoption(CENTER));
29087   options nocenter;
29088   proc print data=EMWS4.Tree2_EMRANK label noobs;
29089   var
29090   decile gain lift liftc resp respc N _meanP_;
29091   by
29092   notsorted DATAROLE
29093   notsorted TARGET
29094   notsorted TARGETLABEL
29095   ;
29096   title9 ' ';
29097   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29098   run;
 
NOTE: There were 40 observations read from the data set EMWS4.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29099   title10;
29100   options &_cn;
 
29101   proc datasets library=EMWS4 nolist;
29102   modify Tree2_EMSCOREDIST;
29103   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29104   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29105   run;
 
NOTE: MODIFY was successful for EMWS4.TREE2_EMSCOREDIST.DATA.
29106   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
