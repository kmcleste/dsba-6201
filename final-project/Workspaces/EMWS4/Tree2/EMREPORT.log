*------------------------------------------------------------*
* Report Log
Date:                April 13, 2022
Time:                18:05:30
*------------------------------------------------------------*
18920  data EMWS4.Tree2_EMOUTFIT;
18921  set EMWS4.Tree2_EMOUTFIT;
18922  length TargetLabel $200;
18923  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18924  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18925  run;

NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: The data set EMWS4.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18926  proc sort data=EMWS4.Tree2_EMREPORTFIT nothreads;
18927  by TARGET;
18928  run;

NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The data set EMWS4.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18929  %let _EMwarndup = 0;
18930  %let _EMtargetdup =;
18931  %let _EMASEtargetdup =;
18932  data _null_;
18933  set EMWS4.Tree2_EMOUTFIT;
18934  if .<_ASE_<0.000001 then do;
18935  call symput('_EMwarndup', '1');
18936  call symput('_EMtargetdup', target);
18937  call symput('_EMASEtargetdup', put(_ASE_, best.));
18938  end;
18939  run;

NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18940  %let EMEXCEPTIONSTRING=;
18941  *------------------------------------------------------------*;
18942  * REPORT: Tree2;
18943  *------------------------------------------------------------*;
18944  %let EM_ACTION = REPORT;
18945  %let syscc = 0;
18946  %macro main;
18947  
18948    %if %upcase(&EM_ACTION) = CREATE %then %do;
18949      filename temp catalog 'sashelp.emmodl.tree_create.source';
18950      %include temp;
18951      filename temp;
18952  
18953      %em_tree_create;
18954    %end;
18955  
18956     %else
18957     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18958  
18959         filename temp catalog 'sashelp.emmodl.tree_train.source';
18960         %include temp;
18961         filename temp;
18962         %em_tree_train;
18963     %end;
18964  
18965    %else
18966    %if %upcase(&EM_ACTION) = SCORE %then %do;
18967      filename temp catalog 'sashelp.emmodl.tree_score.source';
18968      %include temp;
18969      filename temp;
18970  
18971      %em_tree_score;
18972  
18973    %end;
18974  
18975    %else
18976    %if %upcase(&EM_ACTION) = REPORT %then %do;
18977  
18978         filename temp catalog 'sashelp.emmodl.tree_report.source';
18979         %include temp;
18980         filename temp;
18981  
18982         %em_tree_report;
18983     %end;
18984  
18985    %else
18986    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18987  
18988         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18989         %include temp;
18990         filename temp;
18991         %EM_TREE_OPENTREEVIEWER;
18992  
18993     %end;
18994  
18995    %else
18996    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18997  
18998         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18999         %include temp;
19000         filename temp;
19001         %EM_TREE_CLOSETREEVIEWER;
19002  
19003     %end;
19004  
19005  
19006     %doendm:
19007  %mend main;
19008  
19009  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19011 +%macro em_tree_makePlotDs( multipleTar= );
19013 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19014 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19015 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19016 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19018 +  /* determine if validation statistics will be displayed */
19019 +  %let validflag=N;
19020 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19021 +    /* determine if validation data exists */
19022 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19023 +      %let validflag=Y;
19024 +    %end;
19025 +  %end;
19027 +   /* retrieve name of decmeta even in presence of multiple targets */
19028 +   %let decmeta = ;
19029 +   %if &EM_DEC_DECMETA eq %then %do;
19030 +     data _Target;
19031 +       set &em_data_variableset;
19032 +       where ROLE='TARGET' and USE in('D', 'Y');
19033 +       keep NAME;
19034 +     run;
19035 +     proc sort data=_Target;
19036 +       by NAME;
19037 +     run;
19038 +     proc sort data=EM_TARGETDECINFO;
19039 +       by TARGET;
19040 +     run;
19041 +     data _Target;
19042 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19043 +       by NAME;
19044 +       if _a then do;
19045 +         call symput('decmeta', trim(DECMETA));
19046 +       end;
19047 +     run;
19048 +     proc delete data=_Target;run;
19049 +   %end;
19050 +   %else %let decmeta = &EM_DEC_DECMETA;
19053 +  /* retrieve targetEvent from decmeta */
19054 +  %let targetEvent=;
19055 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19056 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19057 +      data _null_;
19058 +       set &DECMETA(where=(_TYPE_="TARGET"));
19059 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19060 +      run;
19061 +    %end;
19062 +  %end;
19064 +  /* retrieve predicted var for targetEvent from decmeta */
19065 +  %let predTarget=;
19066 +  %let predLvl=;
19067 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19068 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19069 +      data _null_;
19070 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19071 +       call symput('predTarget', strip(VARIABLE));
19072 +       call symput('predLvl', strip(LEVEL));
19073 +      run;
19074 +    %end;
19075 +  %end;
19076 +  %else %do;
19077 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19078 +      data _null_;
19079 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19080 +       call symput('predTarget', strip(VARIABLE));
19081 +      run;
19082 +    %end;
19083 +  %end;
19085 +  /* create BelowText value */
19086 +  data belowtext;
19087 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19088 +    keep node belowtext;
19089 +  run;
19091 +  /* replace belowtext with variable label if it exists */
19092 +  data belowtext2;
19093 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19094 +    keep node belowtextlbl;
19095 +  run;
19097 +  proc sort data=belowtext; by node; run;
19098 +  proc sort data=belowtext2; by node; run;
19100 +  data belowtext;
19101 +    merge belowtext belowtext2(in=_a);
19102 +    by node;
19103 +    if _a then belowtext=belowtextlbl;
19104 +    keep node belowtext;
19105 +  run;
19107 +  /* create AboveText value */
19108 +  data abovetext;
19109 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19110 +  run;
19111 +  proc sort data=abovetext; by node numeric_value; run;
19113 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19114 +  data abovetext;
19115 +    set abovetext(rename=(node=parent));
19116 +    by parent numeric_value;
19117 +    retain abovetext tempstring flag branch origval origchar ;
19118 +    length abovetext $256;
19119 +    length tempstring origchar $64;
19121 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19122 +      if first.parent then do;
19123 +        if missing(character_value) then do;
19124 +          numeric_value = round(numeric_value, &sp_precision);
19125 +          abovetext = "< "||strip(NUMERIC_VALUE);
19126 +          branch = 1;
19127 +          origval = numeric_value;
19128 +          output;
19129 +        end;
19130 +        else do;
19131 +          abovetext = "< "||strip(CHARACTER_VALUE);
19132 +          branch = 1;
19133 +          origchar = character_value;
19134 +          output;
19135 +        end;
19137 +        if first.parent AND last.parent then do;
19138 +          if missing(character_value) then do;
19139 +            numeric_value = round(numeric_value, &sp_precision);
19140 +            branch = branch + 1;
19141 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19142 +            output;
19143 +          end;
19144 +          else do;
19145 +            branch = branch + 1;
19146 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19147 +            output;
19148 +          end;
19149 +        end;
19150 +      end;
19151 +      else if last.parent then do;
19152 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19153 +          if missing(character_value) then do;
19154 +            numeric_value = round(numeric_value, &sp_precision);
19155 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19156 +          end;
19157 +          else do;
19158 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19159 +          end;
19160 +          branch = branch + 1;
19161 +          output;
19163 +          if missing(character_value) then do;
19164 +            numeric_value = round(numeric_value, &sp_precision);
19165 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19166 +          end;
19167 +          else do;
19168 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19169 +          end;
19170 +          branch = branch + 1;
19171 +          output;
19172 +        end;
19173 +        else do;
19174 +          if missing(character_value) then do;
19175 +            numeric_value = round(numeric_value, &sp_precision);
19176 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19177 +          end;
19178 +          else do;
19179 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19180 +          end;
19181 +          branch = branch + 1;
19182 +          output;
19183 +        end;
19184 +      end;
19185 +      else do;
19186 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19187 +          if missing(character_value) then do;
19188 +            numeric_value = round(numeric_value,&sp_precision);
19189 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19190 +            origval = numeric_value;
19191 +          end;
19192 +          else do;
19193 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19194 +            origchar = character_value;
19195 +          end;
19196 +          branch = branch + 1;
19197 +          output;
19199 +        end;
19200 +        else do;
19201 +          if missing(character_value) then do;
19202 +            numeric_value = round(numeric_value, &sp_precision);
19203 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19204 +            origval = numeric_value;
19205 +          end;
19206 +          else do;
19207 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19208 +            origval = character_value;
19209 +          end;
19210 +          branch = branch + 1;
19211 +          output;
19212 +        end;
19213 +      end;
19214 +    end;
19215 +    else do;
19216 +       if first.numeric_value then do;
19217 +         flag = 0;
19218 +         abovetext = strip(CHARACTER_VALUE);
19219 +         branch = numeric_value;
19220 +         if first.numeric_value AND last.numeric_value then do;
19221 +           output;
19222 +         end;
19223 +       end;
19224 +       else if last.numeric_value then do;
19225 +         if flag=0 then do;
19226 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19227 +           length = length(strip(tempstring));
19228 +           if length < 32 then do;
19229 +             abovetext = strip(tempstring);
19230 +           end;
19231 +           else do;
19232 +             abovetext = strip(abovetext)||", ...";
19233 +             flag = 1;
19234 +           end;
19235 +         end;
19236 +         branch = numeric_value;
19237 +         output;
19238 +       end;
19239 +       else do;
19240 +         if flag=0 then do;
19241 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19242 +           length = length(strip(tempstring));
19243 +           if length < 32 then do;
19244 +             abovetext = strip(tempstring);
19245 +           end;
19246 +           else do;
19247 +             abovetext = strip(abovetext)||", ...";
19248 +             flag=1;
19249 +           end;
19250 +         end;
19251 +         branch = numeric_value;
19252 +       end;
19253 +    end;
19254 +    keep parent branch abovetext;
19255 +  run;
19257 +  /* Missing value to abovetext */
19258 +  data tempmissing;
19259 +    set &EM_USER_OUTRULES;
19260 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19261 +    rename node=parent numeric_value=branch character_value=misschar;
19262 +  run;
19265 +  proc sort data=abovetext; by parent branch; run;
19266 +  proc sort data=tempmissing; by parent branch; run;
19267 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19269 +  data tempoutnodes;
19270 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19271 +    by parent branch;
19272 +    length traintotal validtotal 8;
19273 +    retain traintotal validtotal;
19275 +    if _a then do;
19276 +      if ^MISSING(abovetext) then do;
19277 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19278 +      end;
19279 +      else do;
19280 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19281 +      end;
19282 +    end;
19283 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19285 +    if node=1 then do;
19286 +      traintotal = N;
19287 +      validtotal=VN;
19288 +    end;
19290 +    drop role rank stat misschar belowtext;
19291 +  run;
19292 +  proc sort data=tempoutnodes; by node; run;
19293 +  proc sort data=belowtext; by node; run;
19295 +  data tempoutnodes;
19296 +    merge tempoutnodes belowtext;
19297 +    by node;
19299 +  run;
19301 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19302 +  %let adjusted = N;
19303 +  %let npriors = 0;
19304 +  data _null_ ;
19305 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19306 +    if eof then do ;
19307 +      call symput("npriors" , strip(put(_N_,best.))) ;
19308 +    end;
19309 +  run;
19310 +  %if &npriors gt 0 %then %let adjusted=Y;
19313 +  /* create a table with targetUsed and targetLevel columns for each node */
19314 +  data temptarmeta;
19315 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19316 +    %if &multipleTar eq N %then %do;
19317 +      AND USE in ('D', 'Y')
19318 +    %end;
19319 +    ));
19320 +    length TARGET $32;
19321 +    Target=name;
19322 +    keep target level;
19323 +  run;
19325 +  %if &multipleTar eq Y %then %do;
19326 +    data temptargetused;
19327 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19328 +      keep node target;
19329 +    run;
19330 +    proc sort data=temptargetused; by target; run;
19331 +    proc sort data=temptarmeta; by target; run;
19332 +    data temptargetused;
19333 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19334 +      by target;
19335 +      if _a and _b;
19336 +    run;
19337 +  %end;
19338 +  %else %do;
19339 +    data temptargetused;
19340 +      set &EM_USER_OUTSTATS;
19341 +      length target $32 tarlevel $10;
19342 +      target="%EM_TARGET";
19343 +      tarlevel="%EM_TARGET_LEVEL";
19344 +      keep node target tarlevel;
19345 +    run;
19346 +    proc sort data=temptargetused nodupkey; by node; run;
19347 +  %end;
19349 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19350 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19351 +  proc sort data=temptargetused; by node; run;
19354 +  /* create tables for all interval targets as well as all class targets */
19355 +  data tempinterval tempclass;
19356 +    merge tempoutstats temptargetused( rename=(target=targetused));
19357 +    by node;
19358 +    %if "&multipleTar" eq "Y" %then %do;
19359 +      if ((missing(Target)) OR (target=targetused ));
19360 +    %end;
19362 +    if tarlevel="INTERVAL" then output tempinterval;
19363 +    else output tempclass;
19364 +  run;
19366 +  /* initialize intTarget and classTarget flags */
19367 +  %let em_intNobs =0;
19368 +  %let em_classNobs = 0;
19369 +  %let em_intTarget= N;
19370 +  %let em_classTarget= N;
19372 +  proc sql;
19373 +    reset noprint;
19374 +    select count(*) into :em_intNobs from tempinterval;
19375 +  quit;
19376 +  proc sql;
19377 +    reset noprint;
19378 +    select count(*) into :em_classNobs from tempclass;
19379 +  quit;
19381 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19382 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19384 +  /* retrieve all information for interval targets */
19385 +  %if &em_intTarget eq Y %then %do;
19387 +    /* determine if leaf variable exists */
19388 +    %let dsid=%sysfunc(open(tempinterval,i));
19389 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19390 +    %let rc=%sysfunc(close(&dsid));
19392 +    proc transpose data=tempinterval
19393 +      %if &leafexists %then %do;
19394 +        (drop=leaf)
19395 +      %end;
19396 +      %if &validexist %then %do;
19397 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19398 +      %end;
19399 +      %else %do;
19400 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19401 +      %end;
19402 +      by node;
19403 +      id statname;
19404 +    run;
19405 +    data tempinterval;
19406 +      set tempinterval;
19407 +      if missing(N) then delete;
19408 +    run;
19409 +  %end;
19411 +  /* retrieve all information for class targets */
19412 +  %if &em_classTarget eq Y %then %do;
19413 +    proc sort data=tempclass; by node category; run;
19414 +    %if &validflag eq N %then %do;
19415 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19416 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19417 +    %end;
19418 +    %else %do;
19419 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19420 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19421 +    %end;
19422 +      set tempclass;
19424 +      %if &validflag eq N %then %do;
19425 +        %if "&adjusted" eq "N" %then %do;
19426 +          if statname="N" then output tempn;
19427 +        %end;
19428 +        %else %do;
19429 +          if statname="NPRIORS" then output tempn;
19430 +        %end;
19431 +        else if statname="PREDICTION" then output temppredict;
19432 +        else if statname="PROBABILITY" then output tempprob;
19433 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19434 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19435 +      %end;
19436 +      %else %do;
19437 +        %if "&adjusted" eq "N" %then %do;
19438 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19439 +        %end;
19440 +        %else %do;
19441 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19442 +        %end;
19443 +        else if statname="PREDICTION" then output temppredict;
19444 +        else if statname="PROBABILITY" then output tempprob;
19445 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19446 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19447 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19448 +      %end;
19449 +    run;
19452 +    /* determine if profit/loss exists in tempprofit */
19453 +    %let em_profitflag=0;
19454 +    %let em_lossflag=0;
19455 +    proc sql;
19456 +      reset noprint;
19457 +      select count(*) into :em_profitflag from tempprofit;
19458 +    quit;
19459 +    proc sql;
19460 +      reset noprint;
19461 +      select count(*) into :em_lossflag from temploss;
19462 +    quit;
19464 +    %if &validFlag eq Y %then %do;
19465 +      proc transpose data=tempn
19466 +        %if "&adjusted" eq "N" %then %do;
19467 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19468 +        %end;
19469 +        %else %do;
19470 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19471 +        %end;
19472 +        by node;
19473 +        id statname;
19474 +      run;
19475 +      %if &em_profitflag ne 0 %then %do;
19476 +        proc transpose data=tempprofit out=tempprofit;
19477 +          by node category;
19478 +          id statname ;
19479 +        run;
19480 +      %end;
19481 +      %if &em_lossflag ne 0 %then %do;
19482 +        proc transpose data=temploss out=temploss;
19483 +          by node category;
19484 +          id statname ;
19485 +        run;
19486 +      %end;
19487 +      data tempprob;
19488 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19489 +        by node
19490 +        %if &multipleTar eq Y %then %do;
19491 +          target
19492 +        %end;
19493 +        category;
19494 +      run;
19495 +    %end;
19497 +    /* store percentcorrect value */
19498 +    data temppredict;
19499 +      merge tempprob temppredict(in=_a);
19500 +      by node category;
19501 +      if _a then do;
19502 +        percentCorrect = statvalue;
19503 +        %if &validFlag eq Y %then %do;
19504 +          vpercentCorrect= vstatvalue;
19505 +        %end;
19506 +      end;
19507 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19508 +      %if &validFlag eq Y %then %do;
19509 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19510 +      %end;
19511 +      ;
19512 +      if missing(percentCorrect) then delete;
19513 +      drop target;
19514 +    run;
19516 +    /* build profittext */
19517 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19518 +      data tempprofittext(keep= node profittext profitloss);
19519 +        length profittext $800 profitloss 8.;
19520 +        retain profittext profitloss;
19522 +        merge tempprob
19523 +        %if &em_profitflag ne 0 %then %do;
19524 +          tempprofit
19525 +        %end;
19526 +        %else %if &em_lossflag ne 0 %then %do;
19527 +          temploss
19528 +        %end;
19529 +        ;
19530 +        by node category;
19532 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19533 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19534 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19535 +          %let profittype = ALL;
19536 +        %end;
19538 +        /* create the profitloss variable for nodecolor if selected */
19539 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19541 +        %if "&profittype" eq "ALL" %then %do;
19542 +          if strip(CATEGORY)="&targetEvent" then do;
19543 +            profitloss=statvalue;
19544 +          end;
19545 +          if first.node then do;
19546 +            %if &validFlag eq N %then %do;
19547 +             %if &em_profitflag ne 0 %then %do;
19548 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19549 +             %end;
19550 +             %if &em_lossflag ne 0 %then %do;
19551 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19552 +             %end;
19553 +            %end;
19554 +            %else %do;
19555 +             %if &em_profitflag ne 0 %then %do;
19556 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19556!+;
19557 +             %end;
19558 +             %if &em_lossflag ne 0 %then %do;
19559 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19560 +             %end;
19561 +            %end;
19562 +          end;
19563 +          else if last.node then do;
19564 +            %if &validFlag eq N %then %do;
19565 +             %if &em_profitflag ne 0 %then %do;
19566 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19567 +             %end;
19568 +             %if &em_lossflag ne 0 %then %do;
19569 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19570 +             %end;
19571 +             /*if CATEGORY="&targetEvent" then do;
19572 +               profitloss=statvalue;
19573 +             end;*/
19574 +            %end;
19575 +            %else %do;
19576 +             %if &em_profitflag ne 0 %then %do;
19577 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19577!+14.&EM_PROPERTY_SPLITPRECISION);
19578 +                if CATEGORY="&targetEvent" then do;
19579 +                 profitloss=ALTERNATIVE_PROFIT;
19580 +                end;
19581 +             %end;
19582 +             %if &em_lossflag ne 0 %then %do;
19583 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19583!+14.&EM_PROPERTY_SPLITPRECISION);
19584 +                if CATEGORY="&targetEvent" then do;
19585 +                  profitloss=ALTERNATIVE_LOSS;
19586 +                end;
19587 +             %end;
19588 +            %end;
19589 +            output;
19590 +          end;
19591 +          else do;
19592 +            %if &validFlag eq N %then %do;
19593 +             %if &em_profitflag ne 0 %then %do;
19594 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19595 +             %end;
19596 +             %if &em_lossflag ne 0 %then %do;
19597 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19598 +             %end;
19599 +            %end;
19600 +            %else %do;
19601 +             %if &em_profitflag ne 0 %then %do;
19602 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19602!+14.&EM_PROPERTY_SPLITPRECISION);
19603 +             %end;
19604 +             %if &em_lossflag ne 0 %then %do;
19605 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19605!+14.&EM_PROPERTY_SPLITPRECISION);
19606 +             %end;
19607 +            %end;
19608 +          end;
19609 +        %end;
19610 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19611 +          if strip(CATEGORY) = "&targetevent" then do;
19612 +            %if &validFlag eq N %then %do;
19613 +             %if &em_profitflag ne 0 %then %do;
19614 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19615 +             %end;
19616 +             %if &em_lossflag ne 0 %then %do;
19617 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19618 +             %end;
19619 +             profitloss=statvalue;
19620 +            %end;
19621 +            %else %do;
19622 +             %if &em_profitflag ne 0 %then %do;
19623 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19623!+;
19624 +                profitloss=ALTERNATIVE_PROFIT;
19625 +             %end;
19626 +             %if &em_lossflag ne 0 %then %do;
19627 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19628 +                profitloss=ALTERNATIVE_LOSS;
19629 +             %end;
19630 +            %end;
19631 +            output;
19632 +          end;
19633 +        %end;
19634 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19635 +          if strip(CATEGORY) = "&targetevent" then do;
19636 +            %if &validFlag eq N %then %do;
19637 +             profitloss=statvalue;
19638 +            %end;
19639 +            %else %do;
19640 +             %if &em_profitflag ne 0 %then %do;
19641 +                profitloss=ALTERNATIVE_PROFIT;
19642 +             %end;
19643 +             %if &em_lossflag ne 0 %then %do;
19644 +                profitloss=ALTERNATIVE_LOSS;
19645 +             %end;
19646 +            %end;
19647 +            output;
19648 +          end;
19649 +        %end;
19650 +      run;
19651 +    %end;
19653 +    data tempprob(keep= node probtext);
19654 +      length probtext $800;
19655 +      retain probtext;
19656 +      set tempprob ;
19657 +      by node;
19659 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19660 +      %let probtype = &EM_PROPERTY_TARGET;
19661 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19662 +        %let probtype = ALL;
19663 +      %end;
19665 +      %if "&probtype" eq "ALL" %then %do;
19666 +        if first.node then do;
19667 +          %if &validFlag eq N %then %do;
19668 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19669 +          %end;
19670 +          %else %do;
19671 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19672 +          %end;
19673 +        end;
19674 +        else if last.node then do;
19675 +          %if &validFlag eq N %then %do;
19676 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19677 +          %end;
19678 +          %else %do;
19679 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19680 +          %end;
19681 +          output;
19682 +        end;
19683 +        else do;
19684 +          %if &validFlag eq N %then %do;
19685 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19686 +          %end;
19687 +          %else %do;
19688 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19689 +          %end;
19690 +        end;
19691 +      %end;
19692 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19693 +        if strip(CATEGORY) = "&targetevent" then do;
19694 +          %if &validFlag eq N %then %do;
19695 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19696 +          %end;
19697 +          %else %do;
19698 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19699 +          %end;
19700 +          output;
19701 +        end;
19702 +      %end;
19703 +      %else %if "&probtype" eq "NONE" %then %do;
19704 +        if last.node then do;
19705 +          output;
19706 +        end;
19707 +      %end;
19708 +    run;
19709 +  %end;
19711 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19713 +  %let oldexists=0;
19714 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19715 +     data old_tree_plot;
19716 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19717 +        rename nodecolor=oldnodecolor;
19718 +     run;
19720 +     proc sort data=old_tree_plot;
19721 +        by node;
19722 +     run;
19724 +     %let oldexists=1;
19725 +  %end;
19727 +  data &EM_USER_TREE_PLOT;
19728 +    length textall $800;
19729 +    merge tempoutnodes temptargetused
19731 +    %if &em_intTarget eq Y %then %do;
19732 +      tempinterval
19733 +    %end;
19735 +    %if &em_classTarget eq Y %then %do;
19737 +      %if &validFlag eq N %then %do;
19738 +        tempn(rename=(statvalue=N))
19739 +      %end;
19740 +      %else %do;
19741 +        tempn
19742 +      %end;
19744 +      temppredict tempprob
19746 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19747 +        tempprofittext
19748 +      %end;
19749 +    %end;
19750 +    ;
19751 +    by node;
19753 +    /* build nodetext based on user selection */
19754 +    textall="";
19756 +    %if &em_intTarget eq Y %then %do;
19757 +    if tarlevel="INTERVAL" then do;
19758 +      /* Nodeid */
19759 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19760 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19761 +      %end;
19763 +      /* Target identifier if multiple targets are used */
19764 +      %if "&multipleTar" eq "Y" %then %do;
19765 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19766 +      %end;
19768 +      %if &validFlag eq Y %then %do;
19769 +         /* Column labels displayed in validflag eq Y only */
19770 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19771 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19771!+noquote ))";
19772 +         %end;
19774 +         /* Average values */
19775 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19776 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19777 +         %end;
19779 +         /* RASE */
19780 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19781 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19782 +         %end;
19784 +         /* Count */
19785 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19786 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19787 +         %end;
19788 +      %end;
19789 +      %else %do;
19790 +         /* Average values */
19791 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19792 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19793 +         %end;
19795 +         /* RASE */
19796 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19797 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19798 +         %end;
19800 +         /* Count */
19801 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19802 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19803 +         %end;
19804 +      %end;
19806 +      /* nodecolor */
19807 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19808 +        nodecolor=PREDICTION;
19809 +      %end;
19810 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19811 +        nodecolor=RASE;
19812 +      %end;
19813 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19814 +        nodecolor=1;
19815 +      %end;
19817 +    end;
19818 +    %end;
19819 +    %if &em_classTarget eq Y %then %do;
19820 +    if tarlevel^="INTERVAL" then  do;
19822 +      /* Nodeid */
19823 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19824 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19825 +      %end;
19826 +      /* Target identifier if multiple targets are used */
19827 +      %if "&multipleTar" eq "Y" %then %do;
19828 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19829 +      %end;
19831 +      /* Predicted values */
19832 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19833 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19834 +      %end;
19836 +      /* Column labels displayed in validflag eq Y only */
19837 +      %if "&ValidFlag" eq "Y" %then %do;
19838 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19839 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19839!+noquote ))";
19840 +        %end;
19841 +      %end;
19843 +      /* Target Values */
19844 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19845 +        textall=strip(textall)||"0A"x||strip(probtext);
19846 +      %end;
19848 +      /* include profit or loss for all target levels */
19849 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19850 +        textall=strip(textall)||"0A"x||strip(profittext);
19851 +      %end;
19853 +      %if &validFlag eq N %then %do;
19854 +        /* Percent Correct */
19855 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19856 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19857 +        %end;
19859 +         /* Count */
19860 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19861 +          %if "&adjusted" eq "N" %then %do;
19862 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19863 +          %end;
19864 +          %else %do;
19865 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19866 +          %end;
19867 +         %end;
19868 +      %end;
19869 +      %else %do;
19870 +        /* Percent Correct */
19871 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19872 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19873 +        %end;
19875 +         /* Count */
19876 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19877 +          %if "&adjusted" eq "N" %then %do;
19878 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19879 +          %end;
19880 +          %else %do;
19881 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19882 +          %end;
19883 +         %end;
19884 +      %end;
19886 +      /* nodecolor */
19887 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19888 +       %if &multipleTar ne Y %then %do;
19889 +        nodecolor=&predTarget;
19890 +       %end;
19891 +       %else %do;
19892 +         nodecolor=percentcorrect;
19893 +       %end;
19894 +      %end;
19895 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19896 +        nodecolor=percentcorrect;
19897 +      %end;
19898 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19899 +        nodecolor=1;
19900 +      %end;
19901 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19902 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19903 +          nodecolor=percentcorrect;
19904 +        %end;
19905 +        %else %do;
19906 +          nodecolor=profitloss;
19907 +        %end;
19908 +      %end;
19910 +    end;
19911 +    %end;
19912 +    %if &em_intTarget eq Y %then %do;
19913 +     drop  PREDICTION  TARGET TARLEVEL
19914 +     %if &ValidFlag eq Y %then %do;
19915 +         VPREDICTION
19916 +     %end;
19917 +     ;
19918 +    %end;
19919 +    %if &em_classTarget eq Y %then %do;
19920 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19921 +     %if &ValidFlag eq Y %then %do;
19922 +         VSTATVALUE
19923 +     %end;
19924 +     ;
19925 +    %end;
19927 +  run;
19929 +  /* add leaf index information to plotds - based on primary target only*/
19930 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19931 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19932 +      set &EM_USER_OUTSTATS;
19933 +      if ((statname="PROBABILITY"
19934 +      %if &validexist %then %do;
19935 +       or statname="VALID: PROBABILITY"
19936 +      %end;
19937 +      ) AND (CATEGORY="&TARGETEVENT")
19938 +      %if "&multipleTar" eq "Y" %then %do;
19939 +        AND (Target="%EM_TARGET")
19940 +      %end;
19941 +      );
19942 +    run;
19944 +    %if &validexist %then %do;
19945 +      proc sort data=tempprob; by node; run;
19946 +      %let vpredTarget = V%substr(&predTarget, 2);
19947 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19948 +         by node;
19949 +         id statname;
19950 +      run;
19951 +    %end;
19952 +  %end;
19953 +  %else %do;
19954 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19955 +      set &EM_USER_OUTSTATS;
19956 +      if ((statname="PREDICTION"
19957 +      %if &validexist %then %do;
19958 +       or statname="VALID: PREDICTION"
19959 +      %end;
19960 +      )
19961 +      %if "&multipleTar" eq "Y" %then %do;
19962 +        AND (Target="%EM_TARGET")
19963 +      %end;
19964 +      );
19965 +    run;
19966 +    %if &validexist %then %do;
19967 +      proc sort data=tempprob; by node; run;
19968 +      %let vpredTarget = V%substr(&predTarget, 2);
19969 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19970 +         by node;
19971 +         id statname;
19972 +      run;
19973 +    %end;
19974 +  %end;
19976 +  proc sort data=tempprob; by node; run;
19977 +  data tempoutnodes;
19978 +    merge tempoutnodes tempprob;
19979 +    by node;
19980 +  run;
19982 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19983 +  data tempnodes;
19984 +    retain traintotal validtotal;
19985 +    set tempnodes(where=(leaf ne . ));
19986 +    tprob=round(&predTarget, .01);
19987 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19988 +      percevent_train=round(tprob*100, .01);
19989 +    %end;
19990 +    %else %do;
19991 +      percevent_train=tprob;
19992 +    %end;
19994 +    perc_train=round((n/traintotal)*100, 0.01);
19995 +    /* leafwidth already has a *10 multiplier */
19996 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19998 +    %if &validexist %then %do;
19999 +      %let vpredTarget = V%substr(&predTarget,2);
20000 +      vprob=round(&vpredTarget, .01);
20001 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20002 +        percevent_valid=round(vprob*100, .01);
20003 +      %end;
20004 +      %else %do;
20005 +        percevent_valid=vprob;
20006 +      %end;
20007 +      perc_valid=round((vn/validtotal)*100, .01);
20008 +    %end;
20010 +    index=_N_;
20011 +    keep node index tprob perc_train percevent_train
20012 +    %if &validexist %then %do;
20013 +        vprob percevent_valid perc_valid
20014 +    %end;
20015 +    ;
20016 +  run;
20017 +  proc sort data=tempnodes; by node; run;
20018 +  data &EM_USER_TREE_PLOT;
20019 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20020 +    by node;
20021 +    if missing(node) then delete;
20022 +    %if &oldexists %then %do;
20023 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20024 +      drop oldnodecolor;
20025 +    %end;
20026 +    abovetext = compbl(abovetext);
20028 +    /* add variable labels */
20029 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20030 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20031 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20032 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20033 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20034 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20036 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20037 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20038 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20039 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20040 +          %end;
20041 +          %else %do;
20042 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20043 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20044 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20045 +          %end;
20046 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20048 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20049 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20050 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20051 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20052 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20053 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20054 +          %end;
20055 +          %else %do;
20056 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20057 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20058 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20059 +          %end;
20060 +    ;
20061 +  run;
20063 +  /* delete temporary tables */
20064 +  proc datasets lib=work nolist;
20065 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20066 +  run;
20068 +%mend em_tree_makePlotDs;
20072 +%macro em_tree_report;
20074 +   /* report properties */
20075 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20076 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20077 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20078 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20079 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20080 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20081 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20082 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20083 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20084 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20085 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20086 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20087 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20089 +   %let validexist=0;
20090 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20091 +     %let validexist=1;
20092 +   %end;
20094 +   /* determine if multiple targets will be processed */
20095 +   %let em_tree_multipleTargets=N;
20096 +   %let em_tree_numTarget=1;
20097 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20098 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20099 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20100 +         %let em_tree_multipleTargets=N;
20101 +      %end;
20102 +      %else %do;
20103 +        data _null_;
20104 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20105 +          if eof then
20106 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20107 +        run;
20109 +        %if &em_tree_numTarget gt 1 %then %do;
20110 +           %let em_tree_multipleTargets=Y;
20111 +        %end;
20112 +     %end;
20113 +   %end;
20115 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20117 +   /* variable importance */
20118 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20119 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20121 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20122 +     /* and the columns may not be generated                                                                                 */
20123 +     %let em_tree_cvexists=;
20124 +     %let em_tree_surrexists=.;
20125 +     data _null_;
20126 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20127 +       if eof then do ;
20128 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20129 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20130 +       end;
20131 +     run;
20133 +     data &EM_USER_OUTIMPORT;
20134 +         set &EM_USER_OUTIMPORT;
20135 +         /* format columns based on Precison value specified */
20136 +         format importance 15.&EM_PROPERTY_PRECISION
20137 +              %if &validexist %then %do;
20138 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20139 +              %end;
20140 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20141 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20142 +              %end;
20143 +         ;
20144 +     run;
20146 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20147 +     proc print data=&EM_USER_OUTIMPORT
20148 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20149 +          (where=((nrules>0) OR (nsurrogates>0)))
20150 +        %end;
20151 +        %else %do;
20152 +           (where=(nrules>0))
20153 +        %end;
20154 +        label noobs
20155 +        ;
20156 +     run;
20157 +     title10;
20159 +   %end;
20161 +   /* Sequence */
20162 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20163 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20164 +   data _null_ ;
20165 +      set &EM_USER_outseq (obs=2) end=eof ;
20166 +      if eof then do ;
20167 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20168 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20169 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20170 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20171 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20172 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20173 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20174 +      end;
20175 +    run;
20177 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20178 +      data &EM_USER_OUTSEQ;
20179 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20180 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20181 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20182 +           _XMISC_=_VMISC_
20183 +        %end;
20184 +        %if "&em_tree_aprof" ne "."  %then %do;
20185 +           _XAPROF_=_VAPROF_
20186 +           _XPROF_ = _VPROF_
20187 +        %end;
20188 +        %if "&em_tree_aloss" ne "."  %then %do;
20189 +           _XALOSS_=_VALOSS_
20190 +        %end;
20191 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20192 +           _XPASE_ = _VPASE_
20193 +           _XPMISC_ = _VPMISC_
20194 +        %end;
20196 +        ));
20197 +     %end;
20198 +     %else %do;
20199 +        set &EM_USER_OUTSEQ;
20200 +     %end;
20202 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20203 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20204 +            _MISC_   15.&EM_PROPERTY_PRECISION
20205 +         %end;
20206 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20207 +            _PASE_  15.&EM_PROPERTY_PRECISION
20208 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20209 +         %end;
20210 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20211 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20212 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20213 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20214 +            %end;
20215 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20216 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20217 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20218 +            %end;
20219 +         %end;
20220 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20221 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20222 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20223 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20224 +            %end;
20225 +         %end;
20226 +         %if "&em_tree_seq" ne "." %then %do;
20227 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20228 +         %end;
20229 +         %if "&em_tree_vseq" ne "." %then %do;
20230 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20231 +         %end;
20232 +         %if "&em_tree_aprof" ne "." %then %do;
20233 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20234 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20235 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20236 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20237 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20238 +           %end;
20239 +         %end;
20240 +         %else %if "&em_tree_aloss" ne "." %then %do;
20241 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20242 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20243 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20244 +           %end;
20245 +         %end;
20246 +      ;
20247 +    run;
20248 +   %end;
20250 +   /* Observation Based Importance */
20251 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20253 +      /* need to check for 0 obs */
20254 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20255 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20256 +      %let rc=%sysfunc(close(&dsid));
20258 +      %if &onobs %then %do;
20259 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20260 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20262 +         data &EM_USER_OUTOBSIMP;
20263 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20264 +           if _a;
20265 +           by _INPUT1_;
20266 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20267 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20268 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20269 +                   %end;
20270 +                   ;
20271 +         run;
20272 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20273 +      %end;
20274 +   %end;
20276 +  %end;
20278 +  /* create dataset to support tree diagram and icicle plot */
20279 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20280 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20282 +  /* display tree diagram */
20283 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20284 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20286 +  /* display icicle diagram */
20287 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20288 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20290 +  /* Leaf Statistics Plot */
20291 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20293 +  /* print leaf information to output window */
20294 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20296 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20297 +       by descending N;
20298 +     run;
20300 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20301 +     %local vn;
20302 +     data _null_;
20303 +       set t (obs=2) end=eof;
20304 +       if eof then do;
20305 +         call symput("vn", strip(put(vn, best.)));
20306 +       end;
20307 +     run;
20309 +     data t;
20310 +       set t;
20311 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20312 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20313 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20314 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20315 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20316 +       %end;
20317 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20318 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20319 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20320 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20321 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20322 +          %end;
20323 +       %end;
20324 +       ;
20325 +     run;
20327 +     /* determine if rase is found in t */
20328 +    %let dsid=%sysfunc(open(t,i));
20329 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20330 +    %let rc=%sysfunc(close(&dsid));
20332 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20333 +     proc print data=t noobs label;
20334 +       where tprob ne .;
20335 +       var node depth N tprob
20336 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20337 +         %if "&vn" ne "." %then %do;
20338 +           VN
20339 +         %end;
20340 +         vprob
20341 +       %end;
20342 +       %if &raseexists %then %do;
20343 +            RASE
20344 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20345 +              VRASE
20346 +            %end;
20347 +       %end;
20348 +       ;
20349 +     run;
20350 +     title10;
20351 +  %end;
20353 +  /* create plots that are done during training of node */
20354 +  /* display iterative plot, including reference line */
20355 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20356 +   /* %if &nleaves eq  %then %do; */
20357 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20358 +      data _null_;
20359 +        set &EM_USER_OUTTOPOLOGY end=eof;
20360 +        if eof then do;
20361 +          call symput('nleaves', LEAF);
20362 +        end;
20363 +      run;
20364 +   /* %end; */
20366 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20367 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20368 +  %end;
20370 +  /* display leaf statistics */
20371 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20373 +  /* stats by node if multiple targets = Y */
20374 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20375 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20376 +    data &EM_USER_OUTSTATS;
20377 +      set &EM_USER_OUTSTATS;
20379 +     * if STATNAME="TARGET" then delete;
20380 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20381 +      drop leaf;
20382 +    run;
20383 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20385 +  %end;
20386 +  %else %do;
20387 +    /* add outstats and outdescribe to spk but not results */
20388 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20389 +  %end;
20391 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 90 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set EMWS4.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: The data set EMWS4.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 386 observations read from the data set EMWS4.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS4.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 105 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 105 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 15 observations read from the data set EMWS4.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

20392  
20393  *------------------------------------------------------------*;
20394  * End REPORT: Tree2;
20395  *------------------------------------------------------------*;

20396  /* Reset EM Options */
20397  options formchar="|----|+|---+=|-/\<>*";
20398  options nocenter ls=256 ps=10000;
20399  goptions reset=all device=GIF NODISPLAY;

20400  proc sort data=WORK.EM_USER_REPORT;
20401  by ID VIEW;
20402  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20403  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20404  by NAME;
20405  run;

NOTE: There were 99 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20406  proc sort data=EMWS4.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20407  by NAME;
20408  run;

NOTE: There were 99 observations read from the data set EMWS4.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20409  data WORK.ASSESS_META;
20410  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20411  by NAME;
20412  run;

NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20413  data EM_temp_assessMeta;
20414  set EMWS4.Tree2_CMeta_TRAIN;
20415  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20416  run;

NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20417  data EM_temp_assessdata;
20418  set EMWS4.Tree2_TRAIN(keep=
20419  F_RESPOND
20420  I_RESPOND
20421  P_RESPOND0
20422  P_RESPOND1
20423  Q_RESPOND0
20424  Q_RESPOND1
20425  R_RESPOND0
20426  R_RESPOND1
20427  U_RESPOND
20428  V_RESPOND0
20429  V_RESPOND1
20430  _WARN_
20431  RESPOND
20432  );
20433  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
















24715   data EM_temp_assessMeta;
24716   set EMWS4.Tree2_CMeta_TRAIN;
24717   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24718   run;

NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24719   data EM_temp_assessdata;
24720   set EMWS4.Tree2_VALIDATE(keep=
24721   F_RESPOND
24722   I_RESPOND
24723   P_RESPOND0
24724   P_RESPOND1
24725   Q_RESPOND0
24726   Q_RESPOND1
24727   R_RESPOND0
24728   R_RESPOND1
24729   U_RESPOND
24730   V_RESPOND0
24731   V_RESPOND1
24732   _WARN_
24733   RESPOND
24734   );
24735   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 16121 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS4.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
















29026   %let _cn = %sysfunc(getoption(CENTER));
29027   options nocenter;
29028   proc print data=EMWS4.Tree2_EMREPORTFIT noobs label;
29029   var STAT LABEL TRAIN
29030   VALIDATE
29031   ;
29032   by TARGET TARGETLABEL;
29033   title9 ' ';
29034   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29035   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29036   title10;
29037   options &_cn;

29038   proc sort data=EMWS4.Tree2_EMCLASSIFICATION nothreads;
29039   by DATAROLE TARGET TARGETLABEL;
29040   run;

NOTE: There were 7 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29041   %let _cn = %sysfunc(getoption(CENTER));
29042   options nocenter;
29043   proc print data=EMWS4.Tree2_EMCLASSIFICATION noobs label;
29044   var from into pct_row pct_col count percent
29045   ;
29046   by DATAROLE TARGET TARGETLABEL;
29047   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29048   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29049   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29050   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29051   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29052   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29053   where _TYPE_='PREDICTION';
29054   title9 ' ';
29055   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29056   run;

NOTE: There were 7 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29057   title9;
29058   title10;
29059   options &_cn;

29060   %let _cn = %sysfunc(getoption(CENTER));
29061   options nocenter;
29062   data EMWS4.Tree2_EMEVENTREPORT;
29063   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
29064   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29064 ! FALSEEVENT
29065   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29066      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29067   FALSEEVENT=0;
29068   FALSENEVENT=0;
29069   TRUEEVENT=0;
29070   TRUENEVENT=0;
29071   set EMWS4.Tree2_EMEVENTREPORT;
29072   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29073   proc print data=EMWS4.Tree2_EMEVENTREPORT noobs label;
29074   title9 ' ';
29075   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29076   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29077   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29078   title10;
29079   options &_cn;

29080   proc datasets library=EMWS4 nolist;
29081   modify Tree2_EMRANK;
29082   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29083   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29084   run;

NOTE: MODIFY was successful for EMWS4.TREE2_EMRANK.DATA.
29085   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29086   %let _cn = %sysfunc(getoption(CENTER));
29087   options nocenter;
29088   proc print data=EMWS4.Tree2_EMRANK label noobs;
29089   var
29090   decile gain lift liftc resp respc N _meanP_;
29091   by
29092   notsorted DATAROLE
29093   notsorted TARGET
29094   notsorted TARGETLABEL
29095   ;
29096   title9 ' ';
29097   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29098   run;

NOTE: There were 40 observations read from the data set EMWS4.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29099   title10;
29100   options &_cn;

29101   proc datasets library=EMWS4 nolist;
29102   modify Tree2_EMSCOREDIST;
29103   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29104   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29105   run;

NOTE: MODIFY was successful for EMWS4.TREE2_EMSCOREDIST.DATA.
29106   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

