*------------------------------------------------------------*
User:                Kyle McLester
Date:                April 13, 2022
Time:                17:45:21
Site:                70080897
Platform:            X64_10HOME
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
*------------------------------------------------------------*
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18583      data EMWS4.EM_TREEINT_STARTTIME;
18584      starttime=1965491120.659;
18585      run;

NOTE: The data set EMWS4.EM_TREEINT_STARTTIME has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18586      %let _emdsep = \;
18587      %em_getactionstatus(emlib =EMWS4, nodeid=Tree);

18588      %let em_filemodtime=;
18589      data _null_;
18590      format modate best.;
18591      set sashelp.Vextfl;
18592      where fileref eq "#LN00160";
18593      call symput('EM_FILEMODTIME', put(modate, best.));
18594      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00160';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18595      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18596      %let em_Train = N;
18597      %let em_Score = N;
18598      %let em_Report = N;
18599      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


PERFORMANCE  DETAILS
19149      data EM_TARGETDECINFO;
19150      length TARGET $32 DECDATA DECMETA $43;
19151      TARGET="RESPOND";
19152      DECDATA="EMWS4.Ids_RESPOND_DD";
19153      DECMETA="EMWS4.Ids_RESPOND_DM";
19154      output;
19155      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19156      %let emexceptionString =;
19157      %let EMEXCEPTIONSTRING=;
19158      *------------------------------------------------------------*;
19159      * OPENINT: Tree;
19160      *------------------------------------------------------------*;
19161      %let EM_ACTION = OPENINT;
19162      %let syscc = 0;
19163      %macro main;
19164      
19165        %if %upcase(&EM_ACTION) = CREATE %then %do;
19166          filename temp catalog 'sashelp.emmodl.tree_create.source';
19167          %include temp;
19168          filename temp;
19169      
19170          %em_tree_create;
19171        %end;
19172      
19173         %else
19174         %if %upcase(&EM_ACTION) = TRAIN %then %do;
19175      
19176             filename temp catalog 'sashelp.emmodl.tree_train.source';
19177             %include temp;
19178             filename temp;
19179             %em_tree_train;
19180         %end;
19181      
19182        %else
19183        %if %upcase(&EM_ACTION) = SCORE %then %do;
19184          filename temp catalog 'sashelp.emmodl.tree_score.source';
19185          %include temp;
19186          filename temp;
19187      
19188          %em_tree_score;
19189      
19190        %end;
19191      
19192        %else
19193        %if %upcase(&EM_ACTION) = REPORT %then %do;
19194      
19195             filename temp catalog 'sashelp.emmodl.tree_report.source';
19196             %include temp;
19197             filename temp;
19198      
19199             %em_tree_report;
19200         %end;
19201      
19202        %else
19203        %if %upcase(&EM_ACTION) = OPENINT %then %do;
19204      
19205             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19206             %include temp;
19207             filename temp;
19208             %EM_TREE_OPENTREEVIEWER;
19209      
19210         %end;
19211      
19212        %else
19213        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19214      
19215             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19216             %include temp;
19217             filename temp;
19218             %EM_TREE_CLOSETREEVIEWER;
19219      
19220         %end;
19221      
19222      
19223         %doendm:
19224      %mend main;
19225      
19226      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
19228     +%macro EM_TREE_OPENTREEVIEWER;
19230     +  options validvarname = v7;
19232     +  /* retrieve table names */
19233     +  %EM_GETNAME(key=EMTREE, type=DATA);
19234     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
19236     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
19237     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
19239     +  /* load trainmacros */
19240     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19241     +  %include temp;
19242     +  filename temp;
19244     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
19246     +    %if "&EM_IMPORT_DATA"="" %then %do;
19247     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
19248     +       %goto doendm;
19249     +   %end;
19250     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
19251     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
19252     +       %goto doendm;
19253     +   %end;
19255     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
19256     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
19258     +       /* determine if multiple targets will be processed */
19259     +       %let em_tree_multipleTargets=N;
19260     +       %let em_tree_numTarget=1;
19261     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19262     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19263     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19264     +            %let em_tree_multipleTargets=N;
19265     +         %end;
19266     +         %else %do;
19267     +            /* create macro array of targets  */
19268     +            data _null_;
19269     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19270     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19271     +              if eof then
19272     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19273     +           run;
19275     +           %if &em_tree_numTarget gt 1 %then %do;
19276     +            %let em_tree_multipleTargets=Y;
19277     +           %end;
19278     +         %end;
19279     +       %end;
19281     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
19283     +       /* Check return code and throw exception if error is detected */
19284     +       %if &SYSERR > 0 %then %do;
19285     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19286     +          %goto doendm;
19287     +       %end;
19289     +  %end;
19291     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
19292     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
19293     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
19294     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
19295     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
19297     +  /* determine if sample should be used within interactive training */
19298     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
19299     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
19301     +     /* determine number of obs in training table */
19302     +     %let trainobs = ;
19303     +     proc sql noprint;
19304     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
19305     +     quit;
19307     +     /* retrieve appropriate sample size */
19308     +     %let maxobs = ;
19309     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19310     +       %exploreObs(data=&EM_IMPORT_DATA);
19311     +       %let maxobs = &_EXPLOREOBS_MAX;
19312     +     %end;
19313     +     %else %do;
19314     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
19315     +     %end;
19317     +     /* create sample based on maxobs */
19318     +     %if &trainobs gt &maxobs %then %do;
19319     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19320     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19321     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19322     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19323     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19324     +          %end;
19325     +        %end;
19326     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
19327     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
19328     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
19329     +              %let em_tree_tempmethod = RANDOM;
19330     +            %end;
19331     +            %else %do;
19332     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19333     +            %end;
19334     +          %end;
19335     +          %else %do;
19336     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19337     +          %end;
19339     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19340     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19341     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19342     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19343     +          %end;
19344     +        %end;
19346     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
19347     +          interact;
19348     +          subtree largest;
19349     +           /********** do i need CV options here? *********/
19350     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19351     +            assess validata=&&EM_USER_VALIDSAMPLE;
19352     +          %end;
19353     +          save model=&EM_USER_EMTREE;
19354     +        run;
19355     +        quit;
19356     +     %end;
19357     +  %end;
19359     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
19360     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
19361     +  data &EM_USER_BROWSETREE;
19362     +    set &EM_USER_EMTREE;
19363     +  run;
19365     +  /* reset validvarname options
19366     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
19367     +  options validvarname=&vvarname;  */
19368     +  %doendm:
19370     +%mend EM_TREE_OPENTREEVIEWER;
19374     +%macro EM_TREE_CLOSETREEVIEWER;
19376     +    /* clear syscc prior to running close Method */
19377     +    %let SYSCC = 0;
19378     +    options validvarname=V7;
19380     +    /* retrieve table names */
19381     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
19382     +    %EM_GETNAME(key=EMTREE,  type=DATA);
19383     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
19384     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
19385     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
19386     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
19387     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
19388     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
19389     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
19390     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
19392     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19393     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19395     +    /* load trainmacros */
19396     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19397     +    %include temp;
19398     +    filename temp;
19400     +    /* send output to node output window ; this will replace */
19401     +    /* old print with the new  print                         */
19402     +    options validvarname = v7;
19404     +    /* determine if multiple targets will be processed */
19405     +    %let em_tree_multipleTargets=N;
19406     +    %let em_tree_numTarget=1;
19407     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19408     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19409     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19410     +         %let em_tree_multipleTargets=N;
19411     +      %end;
19412     +      %else %do;
19413     +         /* create macro array of targets  */
19414     +         data _null_;
19415     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19416     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19417     +           if eof then
19418     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19419     +        run;
19421     +        %if &em_tree_numTarget gt 1 %then %do;
19422     +           %let em_tree_multipleTargets=Y;
19423     +        %end;
19424     +      %end;
19425     +    %end;
19428     + /* turn on pmml if requested */
19429     + %let nnpmml=0;
19430     + %if %symexist(EM_PMML) %then %do;
19431     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19432     +       %let nnpmml=1;
19434     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19435     +   %end;
19436     + %end;
19438     + %if &nnpmml %then %do;
19440     +    /* create dmdb needed for pmml generation */
19441     +    %let tree_maxlevel = 512;
19442     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19443     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19444     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19445     +      %end;
19446     +    %end;
19447     +    %if &tree_maxlevel gt 0 %then %do;
19448     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19449     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19450     +    %end;
19452     +    %let targetOrderString =;
19453     +    %let targetString = ;
19454     +    data _null_;
19455     +       length orderString nameString $10000;
19456     +       retain orderString nameString;
19457     +       set &em_data_variableset end=eof;
19458     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19459     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19460     +       %end;
19461     +       %else %do;
19462     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19463     +       %end;          select(order);
19464     +         when('')        order ='DESC';
19465     +         when('FMTASC')  order='ASCFMT';
19466     +         when('FMTDESC') order='DESFMT';
19467     +         otherwise;
19468     +       end;
19469     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19470     +       nameString = trim(nameString)!!' '!!trim(NAME);
19472     +       if eof then do;
19473     +          call symput('targetOrderString', trim(orderString));
19474     +          call symput('targetString', trim(nameString));
19475     +       end;
19476     +    run;
19478     +    %let arborkluge= "work._treeDMDB";
19480     +    proc dmdb batch data=&EM_IMPORT_DATA
19481     +    %if &nnpmml %then %do;
19482     +        PMML
19483     +    %end;
19484     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19486     +     %if "%EM_ID" ne "" %then %do;
19487     +       id %EM_ID;
19488     +     %end;
19489     +     %if &EM_NUM_CLASS gt 0 %then %do;
19490     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19491     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19492     +            &targetOrderString;
19493     +     %end;
19494     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
19495     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19496     +     %end;
19497     +     target &targetString %EM_INTERVAL_TARGET;
19498     +     %if "%EM_FREQ" ne "" %then %do;
19499     +       freq %EM_FREQ;
19500     +     %end;
19501     +    run;
19502     +    quit;
19504     +    proc datasets lib=work nolist;
19505     +       delete classout varout;
19506     +    run;
19507     +    quit;
19509     + %end;
19512     +    /* run arbor to generate new results and scoring code */
19513     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
19514     +       Performance &EM_PROPERTY_PERFORMANCE
19515     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19516     +         nodesize=&EM_PROPERTY_NODESAMPLE
19517     +       %end;
19518     +       ;
19519     +      interact;
19520     +      *subtree largest;
19523     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
19524     +         Assess
19525     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19526     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19527     +              %put &em_codebar;
19528     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
19529     +              %put &errormsg;
19530     +              %put &em_codebar;
19531     +            %end;
19532     +            %else %do;
19533     +               Validata=&EM_IMPORT_VALIDATE;
19534     +            %end;
19535     +         %end;
19536     +         %else %do;
19537     +           NoValidata
19538     +         %end;
19539     +       %end;
19540     +      ;
19541     +      makemacro nleaves=nleaves;
19542     +      save
19543     +      %if "&EM_USER_EMTREE" ne "" %then %do;
19544     +         MODEL=&EM_USER_EMTREE
19545     +      %end;
19546     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
19547     +        SEQUENCE=&EM_USER_OUTSEQ
19548     +      %end;
19549     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
19550     +        IMPORTANCE=&EM_USER_OUTIMPORT
19551     +      %end;
19552     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
19553     +         NODESTAT=&EM_USER_OUTNODES
19554     +      %end;
19555     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
19556     +         SUMMARY=&EM_USER_OUTSUMMARY
19557     +      %end;
19558     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
19559     +         STATSBYNODE=&EM_USER_OUTSTATS
19560     +      %end;
19561     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
19562     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
19563     +      %end;
19564     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
19565     +         Pathlistnonmissing=&EM_USER_OUTPATH
19566     +      %end;
19567     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
19568     +         RULES = &EM_USER_OUTRULES
19569     +      %end;
19570     +      ;
19572     +      %let codetext=;
19573     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
19574     +        %let codetext=&codetext DUMMY;
19575     +      %end;
19576     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
19577     +        %let codetext=&codetext NOLEAFID;
19578     +      %end;
19580     +      %let norescodetxt=;
19581     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
19582     +        %let norescodetxt=&codetext NOPRED;
19583     +      %end;
19585     +      %let lookupString = ;
19586     +      %if ^%symexist(EM_OPTION) %then
19587     +         %let EM_OPTION=;
19589     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
19590     +         %let lookupString = LOOKUP=SELECT;
19591     +      %end;
19593     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
19594     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
19596     +      %if &nnpmml %then %do;
19597     +        code pmml;
19598     +      %end;
19600     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
19601     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19602     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
19603     +      %end;
19604     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
19605     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19606     +      %end;
19607     +    run;
19609     +    quit;
19611     +    %if &nnpmml %then %do;
19612     +       ods pmml close;
19613     +    %end;
19615     +   /* Check return code and throw exception if error is detected */
19616     +   %if &SYSERR > 0 %then %do;
19617     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19618     +     %goto doendm;
19619     +   %end;
19621     +   /* create outfit dataset if multiple score statements have been executed */
19622     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
19624     +   /* print variable importance listing */
19625     +   %let em_tree_surrexists=.;
19626     +   data _null_;
19627     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
19628     +    if eof then do ;
19629     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19630     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19631     +    end;
19632     +   run;
19634     +   /* create English Rules */
19635     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
19636     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
19637     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
19638     +       %em_tree_makeEnglishRules;
19640     +      /* English Rules */
19641     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
19643     +     %end;
19644     +   filename x;
19646     +   %doendm:
19648     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
19649     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
19651     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

19653      %let em_filemodtime=;
19654      data _null_;
19655      format modate best.;
19656      set sashelp.Vextfl;
19657      where fileref eq "#LN00170";
19658      call symput('EM_FILEMODTIME', put(modate, best.));
19659      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00170';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19660      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19661      %let em_Train = N;
19662      %let em_Score = N;
19663      %let em_Report = N;
19664      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
19666     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
19667     +  %global &nLevel;
19668     +  proc dmdb batch data=&indata
19669     +    classout=_tmp_dmdbout;
19670     +    class &target;
19671     +  run;
19672     +  data _tmp_dmdbout;
19673     +    set _tmp_dmdbout;
19674     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
19675     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
19676     +  run;
19677     +  data _null_;
19678     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
19679     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
19680     +    %let dsid = %sysfunc(close(&dsid));
19681     +     call symput("&nLevel", put(&_obs, Best12.));
19682     +  run;
19684     +  proc datasets lib=work nolist;
19685     +     delete _tmp_dmdbout;
19686     +  run;
19687     +  quit;
19688     +%Mend EM_CheckBinaryTargetLevel;
19691     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
19693     +  /* determine the number of obs in training data */
19694     +  proc sql;
19695     +    reset noprint;
19696     +    select count(*) into :em_nobs from &indata;
19697     +  quit;
19699     +  /* determine the number of input variables */
19700     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
19701     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
19703     +  /* retrieve targetEvent from decmeta */
19704     +  %let targetEvent=;
19705     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19706     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19707     +      data _null_;
19708     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
19709     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19710     +      run;
19711     +    %end;
19712     +  %end;
19714     +  /* create targetTable if multipleTar eq Y */
19715     +  data temptarget;
19716     +    set &EM_DATA_VARIABLESET;
19717     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
19718     +  run;
19720     + /* data sets */
19721     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
19722     + %EM_GETNAME(key=EMTREE,        type=DATA);
19723     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
19724     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
19725     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
19726     + %EM_GETNAME(key=OUTNODES,      type=DATA);
19727     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
19728     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
19729     + %EM_GETNAME(key=OUTPATH,       type=DATA);
19730     + %EM_GETNAME(key=OUTRULES,      type=DATA);
19732     + /* files */
19733     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19734     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19736     + /* turn on pmml if requested */
19737     + %let nnpmml=0;
19738     + %if %symexist(EM_PMML) %then %do;
19739     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19740     +       %let nnpmml=1;
19742     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19743     +   %end;
19744     +%end;
19746     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
19748     +%if &nnpmml or &numClassTarget %then %do;
19750     +    /* create dmdb needed for pmml generation */
19751     +    %let tree_maxlevel = 512;
19752     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19753     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19754     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19755     +      %end;
19756     +    %end;
19757     +    %if &tree_maxlevel gt 0 %then %do;
19758     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19759     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19760     +    %end;
19762     +    %let targetOrderString =;
19763     +    %let targetString = ;
19764     +    data _null_;
19765     +       length orderString nameString $10000;
19766     +       retain orderString nameString;
19767     +       set &em_data_variableset end=eof;
19768     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19769     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19770     +       %end;
19771     +       %else %do;
19772     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19773     +       %end;          select(order);
19774     +         when('')        order ='DESC';
19775     +         when('FMTASC')  order='ASCFMT';
19776     +         when('FMTDESC') order='DESFMT';
19777     +         otherwise;
19778     +       end;
19779     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19780     +       nameString = trim(nameString)!!' '!!trim(NAME);
19782     +       if eof then do;
19783     +          call symput('targetOrderString', trim(orderString));
19784     +          call symput('targetString', trim(nameString));
19785     +       end;
19786     +    run;
19788     +    %let arborkluge= "work._treeDMDB";
19790     +    proc dmdb batch data=&indata
19791     +    %if &nnpmml %then %do;
19792     +        PMML
19793     +    %end;
19794     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19796     +      %if &nnpmml %then %do;
19797     +           %if "%EM_ID" ne "" %then %do;
19798     +             id %EM_ID;
19799     +           %end;
19800     +           %if &EM_NUM_CLASS gt 0 %then %do;
19801     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19802     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19803     +                  &targetOrderString;
19804     +           %end;
19805     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
19806     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19807     +           %end;
19808     +           target &targetString %EM_INTERVAL_TARGET;
19809     +           %if "%EM_FREQ" ne "" %then %do;
19810     +             freq %EM_FREQ;
19811     +           %end;
19812     +      %end;
19813     +      %else %do;
19814     +         class  &targetOrderString;
19815     +         target &targetString %EM_INTERVAL_TARGET;
19816     +      %end;
19817     +    run;
19818     +    quit;
19820     +    proc datasets lib=work nolist;
19821     +       delete classout varout;
19822     +    run;
19823     +    quit;
19825     + %end;
19828     + /* run Arbor procedure */
19829     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19830     +  proc arbor data=&INDATA
19832     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
19833     +    Leafsize = &EM_PROPERTY_LEAFSIZE
19834     +  %end;
19836     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
19837     +    Splitsize = &EM_PROPERTY_SPLITSIZE
19838     +  %end;
19840     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
19841     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
19842     +  %end;
19844     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
19845     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
19846     +  %end;
19848     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
19849     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
19850     +  %end;
19852     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
19853     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
19854     +  %end;
19855     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19856     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
19857     +  %end;
19858     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19859     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
19860     +  %end;
19862     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
19863     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
19864     +      alpha = &EM_PROPERTY_SIGLEVEL
19865     +    %end;
19866     +  %end;
19868     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
19869     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19870     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
19871     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
19872     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
19874     +        padjust =
19875     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
19876     +          &chaid
19877     +        %end;
19878     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
19879     +          DEPTH
19880     +        %end;
19881     +      %end;
19882     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
19883     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
19884     +         pvars = &num_inputs
19885     +      %end;
19886     +    %end;
19887     +  %end;
19888     +  %else %do;
19889     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19890     +         padjust = NONE
19891     +      %end;
19892     +  %end;
19894     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
19895     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
19896     +    Maxrules = &num_nrules
19897     +  %end;
19899     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
19900     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
19901     +    Maxsurrs = &num_nsurrs
19902     +  %end;
19904     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
19905     +     Missing=&EM_PROPERTY_MISSINGVALUE
19906     +  %end;
19908     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
19909     +     USEVARONCE
19910     +  %end;
19912     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
19913     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
19914     +  %end;
19917     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19918     +    event = "&targetEvent"
19919     +  %end;
19921     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
19922     +     DECSEARCH
19923     +  %end;
19925     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
19926     +     PRIORSSEARCH
19927     +  %end;
19929     +  %if &arbor_1 ne %then %do;
19930     +    &arbor_1
19931     +  %end;
19933     +  %if &em_arbor ne %then %do;
19934     +     &em_arbor
19935     +  %end;
19936     +  ;
19937     + %end;
19938     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
19939     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
19940     +       Performance &EM_PROPERTY_PERFORMANCE
19941     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19942     +         nodesize=&EM_PROPERTY_NODESAMPLE
19943     +       %end;
19944     +       ;
19945     +       interact;
19946     + %end;
19947     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
19948     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
19949     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19950     +    %put &em_codebar;
19951     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19952     +    %put &errormsg;
19953     +    %put &em_codebar;
19954     +    %goto doendm;
19955     +   %end;
19956     +   %else %do;
19957     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
19958     +       Performance &EM_PROPERTY_PERFORMANCE
19959     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19960     +         nodesize=&EM_PROPERTY_NODESAMPLE
19961     +       %end;
19962     +       ;
19963     +       interact;
19964     +   %end;
19965     + %end;
19967     + %else %do;
19968     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
19969     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19970     +    %put &em_codebar;
19971     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19972     +    %put &errormsg;
19973     +    %put &em_codebar;
19974     +    %goto doendm;
19975     +   %end;
19976     +   %else %do;
19977     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
19978     +       Performance &EM_PROPERTY_PERFORMANCE
19979     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19980     +         nodesize=&EM_PROPERTY_NODESAMPLE
19981     +       %end;
19982     +       ;
19983     +        interact;
19984     +   %end;
19985     + %end;
19987     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19988     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
19989     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
19990     +    %end;
19992     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
19993     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
19994     +    %end;
19996     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
19997     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
19998     +    %end;
20000     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
20001     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
20002     +    %end;
20004     +    %if "%EM_FREQ" ne "" %then %do;
20005     +       freq %EM_FREQ;
20006     +    %end;
20008     +    %if "&multipleTar" eq "Y" %then %do;
20009     +       /* cycle through all target vars in variableset */
20010     +       %let tdsid = %sysfunc(open(temptarget));
20011     +       %if &tdsid %then %do;
20012     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
20013     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
20014     +          %do %while(^ %sysfunc(fetch(&tdsid)));
20015     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
20016     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
20017     +             target &var / level = &lvl
20018     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
20019     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
20020     +             %end;
20021     +             %else %if "&lvl" eq "INTERVAL" %then %do;
20022     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
20023     +             %end;
20024     +             %else %if "&lvl" eq "ORDINAL" %then %do;
20025     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
20026     +             %end;
20027     +          %end;
20028     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
20029     +       %end;
20030     +       useTarget variable = %EM_TARGET;
20031     +    %end;
20032     +    %else %do;
20033     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
20034     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
20035     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
20036     +      %end;
20037     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20038     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
20039     +      %end;
20040     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
20041     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
20042     +      %end;
20043     +    %end;
20045     +    %if "&multipleTar" eq "N" %then %do;
20046     +      &EM_DEC_STATEMENT;
20047     +    %end;
20049     +    Performance &EM_PROPERTY_PERFORMANCE
20050     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20051     +      nodesize=&EM_PROPERTY_NODESAMPLE
20052     +    %end;
20053     +    ;
20055     +    %if "&intFlag" eq "Y" %then %do;
20056     +       INTERACT Largest;
20057     +       Train maxnewdepth=0;
20058     +    %end;
20060     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
20061     +         Assess
20062     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20063     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20064     +              %put &em_codebar;
20065     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
20066     +              %put &errormsg;
20067     +              %put &em_codebar;
20068     +            %end;
20069     +            %else %do;
20070     +               Validata=&EM_IMPORT_VALIDATE
20071     +            %end;
20072     +         %end;
20073     +         %else %do;
20074     +           NoValidata
20075     +         %end;
20076     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
20077     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
20078     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20079     +               %if &dsid %then %do;
20080     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20081     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20082     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20083     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
20084     +                   %else %do;
20085     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
20086     +                      %else %let measure= MISC;
20087     +                   %end;
20088     +                 %end;
20089     +               %end;
20090     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20091     +            %end;
20092     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
20093     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
20094     +                 %let measure=ASE;
20095     +              %end;
20096     +              %else %do;
20097     +                 %let measure=MISC;
20098     +              %end;
20099     +            %end;
20100     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
20101     +              %let measure=ASE;
20102     +            %end;
20103     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
20104     +               %let measure = LIFT;
20105     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20106     +               %if &dsid %then %do;
20107     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20108     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20109     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20110     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
20111     +                 %end;
20112     +               %end;
20113     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20114     +            %end;
20115     +            measure=&measure
20116     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20117     +               event = "&targetEvent"
20118     +            %end;
20119     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
20120     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
20121     +            %end;
20122     +         %end;
20123     +         %if "&multipleTar" eq "N" %then %do;
20124     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20125     +               CV
20126     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
20127     +                 CVNITer = &EM_PROPERTY_CVNITER
20128     +               %end;
20129     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
20130     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
20131     +               %end;
20132     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
20133     +                 CVSeed = &EM_PROPERTY_CVSEED
20134     +               %end;
20135     +            %end;
20136     +         %end;
20137     +       %end;
20138     +      ;
20140     +      %if "&intFlag" ne "Y" %then %do;
20141     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
20142     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
20143     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
20144     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
20146     +          SUBTREE &subtree
20147     +          %if "&subtree" eq "NLEAVES" %then %do;
20148     +            =&EM_PROPERTY_NSUBTREE
20149     +          %end;
20150     +          ;
20151     +        %end;
20153     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
20154     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
20155     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
20156     +          %end;
20157     +       %end;
20158     +      %end;
20159     + %end;
20162     + MakeMacro nleaves = nleaves;
20163     + save
20164     + %if "&EM_USER_EMTREE" ne "" %then %do;
20165     +   MODEL=&EM_USER_EMTREE
20166     + %end;
20167     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
20168     +   SEQUENCE=&EM_USER_OUTSEQ
20169     + %end;
20170     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
20171     +   IMPORTANCE=&EM_USER_OUTIMPORT
20172     + %end;
20173     + %if "&EM_USER_OUTNODES" ne "" %then %do;
20174     +   NODESTAT=&EM_USER_OUTNODES
20175     + %end;
20176     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
20177     +   SUMMARY=&EM_USER_OUTSUMMARY
20178     + %end;
20179     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
20180     +   STATSBYNODE=&EM_USER_OUTSTATS
20181     + %end;
20182     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
20183     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
20184     + %end;
20185     + %if "&EM_USER_OUTPATH" ne "" %then %do;
20186     +   Pathlistnonmissing=&EM_USER_OUTPATH
20187     + %end;
20188     + %if "&EM_USER_OUTRULES" ne "" %then %do;
20189     +   RULES = &EM_USER_OUTRULES
20190     + %end;
20191     + ;
20193     + %if "&intFlag" ne "Y" %then %do;
20195     +   %let lookupString = ;
20196     +   %if ^%symexist(EM_OPTION) %then
20197     +      %let EM_OPTION=;
20199     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
20200     +      %let lookupString = LOOKUP=SELECT;
20201     +   %end;
20203     +   %let codetext=;
20204     +   %let norescodetxt=;
20206     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
20207     +     %let codetext=&codetext DUMMY;
20208     +     %let norescodetxt=&norescodetxt DUMMY;
20209     +   %end;
20210     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
20211     +     %let codetext=&codetext NOLEAFID;
20212     +     %let norescodetxt=&norescodetxt NOLEAFID;
20213     +   %end;
20214     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
20215     +     %let norescodetxt=&norescodetxt NOPRED;
20216     +   %end;
20218     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
20219     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
20221     +   %if &nnpmml %then %do;
20222     +     code pmml;
20223     +   %end;
20225     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
20226     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20227     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
20228     +   %end;
20229     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20230     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
20231     +   %end;
20232     + %end;
20234     + run;
20235     + quit;
20237     + /*%em_checkerror(); */
20238     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
20239     +   /* Delete DMDB catalog */
20240     +   proc datasets lib=work nolist;
20241     +       delete _treeDMDB / mt=cat;
20242     +  run;
20243     +  %end;
20245     + %if &nnpmml %then %do;
20246     +    ods pmml close;
20247     + %end;
20249     +  %doendm:
20251     +%mend em_tree_runTreeProcedure;
20253     +%macro em_tree_createFitStats( multipleTar= );
20256     +  /* create targetTable is multipleTar eq Y */
20257     +  data temptarget;
20258     +    set &EM_DATA_VARIABLESET;
20259     +    where ROLE="TARGET";
20260     +  run;
20262     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
20263     +   data &EM_USER_EMOUTFIT;
20264     +     length target $32;
20265     +     merge work.fit_train
20266     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20267     +       work.fit_valid
20268     +     %end;
20269     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
20270     +       work.fit_test
20271     +     %end;
20272     +     ;
20273     +     %if "&multipleTar" eq "N" %then %do;
20274     +       target="%EM_TARGET";
20275     +     %end;
20276     +     %else %do;
20277     +       target = _TARGET_;
20278     +     %end;
20279     +     drop _NW_ _SUMW_
20280     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20281     +        _VSUMW_
20282     +     %end;
20283     +     ;
20284     +   run;
20286     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20287     +     proc datasets library=work nolist;
20288     +       delete fit_valid;
20289     +     run;
20290     +   %end;
20291     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20292     +     proc datasets library=work nolist;
20293     +       delete fit_test;
20294     +     run;
20295     +   %end;
20297     +%mend em_tree_createFitStats;
20300     +%macro em_tree_makeEnglishRules;
20302     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20303     +  %EM_GETNAME(key=OUTPATH, type=DATA);
20305     +  /* verify that necessary tables exist and if not, skip processing */
20306     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
20307     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20308     +    %goto doendm;
20309     +  %end;
20310     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
20311     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20312     +    %goto doendm;
20313     +  %end;
20315     +  /* determine length of variable in outpath dataset */
20316     +  %let vlength= ;
20317     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
20318     +  %if &dsid ne %then %do;
20319     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
20320     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
20321     +  %end;
20322     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
20324     +  data tempoutpath;
20325     +    length varname $&vlength;
20326     +    retain varname;
20327     +    set &EM_USER_OUTPATH;
20329     +    if ^missing(variable) then varname=variable;
20330     +    else if ^missing(var_name) then varname=var_name;
20331     +    output;
20332     +  run;
20334     +  /* create an array of generated predicted variable names */
20335     +  %let tree_pred_vars = ;
20336     +  %let tree_pred_label = ;
20337     +  %let numpred= 0;
20338     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20340     +    data _null_;
20341     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
20342     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
20343     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
20344     +     if eof then
20345     +       call symput('numpred', strip(put(_N_, BEST.)));
20346     +    run;
20347     +  %end;
20349     +  /* determine if NPRIORS exists in outnodes  */
20350     +  %local nprior_flag;
20351     +  data _null_;
20352     +    set &EM_USER_OUTNODES(obs=2) end=eof;
20353     +    if eof then do;
20354     +      call symput('nprior_flag', strip(put(npriors, best.)));
20355     +    end;
20356     +  run;
20358     +  proc sort data=tempoutpath; by node; run;
20359     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
20361     +  data tempoutpath;
20362     +    merge tempoutpath(in=_a) outnodes(keep= node
20363     +    %if "&nprior_flag" ne "." %then %do;
20364     +      NPRIORS
20365     +    %end;
20366     +    %else %do;
20367     +      N
20368     +    %end;
20369     +    %if &numpred gt 0 %then %do;
20370     +      %do i=1 %to &numpred;
20371     +        &&tree_pred_vars&i
20372     +      %end;
20373     +    %end;
20374     +    );
20375     +    by node;
20376     +    if _a;
20377     +  run;
20379     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
20381     +  data _null_;
20382     +    file x;
20383     +    set tempoutpath;
20384     +    by node descending varname;
20385     +    retain origvar oldnode string;
20386     +    length origvar $32 oldnode 8 string $5000;
20388     +    if _N_ = 1 then do;
20389     +      origvar = varname;
20390     +      oldnode = node;
20391     +    end;
20393     +    if first.node then do;
20394     +       put "&EM_CODEBAR";
20395     +       put " Node = " node;
20396     +       put "&EM_CODEBAR";
20397     +    end;
20399     +      if first.varname then do;
20400     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20401     +            if MISSING(CHARACTER_VALUE) then do;
20402     +             if NUMERIC_VALUE ne .  then do;
20403     +              if ^first.node then do;
20404     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20405     +              end;
20406     +              else do;
20407     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20408     +              end;
20409     +             end;
20410     +            end;
20411     +            else do;
20412     +              if ^first.node then do;
20413     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20414     +              end;
20415     +              else do;
20416     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20417     +              end;
20418     +             end;
20419     +         end;
20420     +         else if RELATION in ("=") then do;
20421     +            if ^first.node then do;
20422     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
20423     +            end;
20424     +            else do;
20425     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
20426     +            end;
20427     +         end;
20428     +         else if RELATION in ("ISMISSING") then do;
20429     +            if ^first.node then do;
20430     +              string = " AND "|| strip(varname) || " equals Missing";
20431     +            end;
20432     +            else do;
20433     +              string = "if "|| strip(varname) ||" equals Missing";
20434     +            end;
20435     +         end;
20436     +         else if RELATION in ("ISNOTMISSING") then do;
20437     +            if ^first.node then do;
20438     +              string = " AND "|| strip(varname) || " equals All Values";
20439     +            end;
20440     +            else do;
20441     +              string = "if "|| strip(varname) ||" equals All Values";
20442     +            end;
20443     +         end;
20444     +         if ^missing(varname) then origvar = varname;
20445     +         oldnode=node;
20447     +      end;
20448     +      else do;
20449     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20450     +          if MISSING(CHARACTER_VALUE) then do;
20451     +           if  NUMERIC_VALUE ne .  then do;
20452     +            if ^MISSING(string) then
20453     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20454     +            else
20455     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20456     +           end;
20457     +          end;
20458     +          else do;
20459     +            if ^MISSING(string) then
20460     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20461     +            else
20462     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20463     +          end;
20465     +         end;
20466     +         else if RELATION in ("=") then do;
20467     +           string = strip(string)||", "||strip(character_value);
20468     +         end;
20469     +         else if RELATION in ("ISMISSING") then do;
20471     +         end;
20472     +         if ^missing(varname) then origvar = varname;
20473     +         oldnode=node;
20474     +      end;
20475     +      if last.varname then do;
20476     +         if RELATION in ("ISMISSING") then do;
20477     +           if ^first.varname then do;
20478     +             string = strip(string) || " or MISSING";
20479     +           end;
20480     +         end;
20481     +         put string;
20482     +         if ^missing(varname) then origvar = varname;
20483     +         oldnode=node;
20484     +      end;
20486     +      if last.node then do;
20487     +         put "then ";
20488     +         put " Tree Node Identifier   = " node;
20490     +         %if "&nprior_flag" ne "." %then %do;
20491     +           put " Number of Observations = " NPRIORS;
20492     +         %end;
20493     +         %else %do;
20494     +           put " Number of Observations = " N;
20495     +         %end;
20497     +         %if &numpred gt 0 %then %do;
20498     +           %do i=1 %to &numpred;
20499     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
20500     +           %end;
20501     +         %end;
20503     +         put " ";
20504     +         if ^missing(varname) then origvar = varname;
20505     +         oldnode=node;
20506     +      end;
20508     +  run;
20510     +  proc datasets lib=work nolist;
20511     +    delete tempoutpath outnodes;
20512     +  run;
20514     +  %doendm:
20515     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS4.Part_TRAIN : vars= 99 : recl= 768 : max=20000 : def= 2000
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
20517     +/*------------------------------------------------------------------
20518     +  MACRO EXPLOREOBS
20519     +
20520     +  SUPPORT:  SASDHD - David Duling
20521     +  PRODUCT:  Enterprise Miner
20522     +
20523     +  DESCRIPTION:
20524     +  Generates maximum and default numbers of observations to
20525     +  download for visualization depending on the record length.
20526     +
20527     +  Values were determined by trial and error using typical
20528     +  Windows workstation configurations.
20529     +
20530     +  Discrete sets of values are returned so that user experience
20531     +  will be consitent with similar sized data sets.
20532     +
20533     +  These macro variables are set:
20534     +  _exploreobs_max -- maximum number of obs downloadable
20535     +  _exploreobs_def -- default number of obs to be downloaded
20536     +  _exploreobs_recl - record length.  Might be useful for reporting.
20537     +
20538     +  Use the _exploreobs_max to set limit the GUI selection of
20539     +  observations for downloading.  The GUI selection for obs
20540     +  could be reduced to "Default" and "Max".
20541     +
20542     +  Parameters
20543     +  data=   libname.memname of input data
20544     +  vars=   subset list of variables.
20545     +          downloading 1 out of 500 really does work like downloading
20546     +          1 out of 1 vars.  Users may select a subset of vars for
20547     +                   visualizations.  Pass in the list as space delimited
20548     +          var names.  If vars is not specified, the record length
20549     +          of the entire data will be used.
20550     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
20551     +
20552     +  Control
20553     +  Users may control the values by entering these macro variables.
20554     +            EM_EXPLOREOBS_MAX
20555     +            EM_EXPLOREOBS_DEFAULT
20556     +  These values override the computed values.
20557     +
20558     +  Debugging
20559     +  %let _exploreobs_debug=1 ;
20560     +--------------------------------------------------------------------
20561     +  HISTORY: 20APR2004. sasdhd. pushed.
20562     +           18DEC2004. sasdhd. S0280556.
20563     +           07SEP2007. sasdhd. HK1009586
20564     +--------------------------------------------------------------------*/
20565     +
20566     +%macro exploreobs(data=,vars=, nbytes=) ;
20567     +
20568     +   /*--- variable definitions ---*/
20569     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
20570     +   %local xobs xvars xlen vlen xi vname vlist ;
20571     +   %local _exp_source _exp_notes ;
20572     +
20573     +   /*--- USER definitions ---*/
20574     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
20575     +
20576     +   /*--- variable intializations ---*/
20577     +   %let _exploreobs_max=0 ;
20578     +   %let _exploreobs_def=0 ;
20579     +   %let _exploreobs_recl=0 ;
20580     +   %let xvars= 0 ;
20581     +   %let xlen = 0 ;
20582     +   %let xobs = 0 ;
20583     +
20584     +   /*--- data error checks ---*/
20585     +   %if "&data" eq "" %then %do ;
20586     +            %put NOTE: DATA is not specified. ;
20587     +            %goto term ;
20588     +      %end ;
20589     +
20590     +   %let dsid=%sysfunc(open(&data)) ;
20591     +   %if not &dsid %then %do ;
20592     +            %put NOTE: DATA &data is not available. ;
20593     +            %goto term ;
20594     +      %end ;
20595     +
20596     +   /*--- if a vars list exists generate a subset ---*/
20597     +   %if &vars ne %then %do ;
20598     +         %let dsid=%sysfunc(close(&dsid)) ;
20599     +         %if &_exploreobs_debug ne 1 %then %do ;
20600     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
20601     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
20602     +                  options nosource nonotes ;
20603     +         %end ;
20604     +         data _exploreobs_temp_data ;
20605     +         set &data(obs=0) ;
20606     +          keep &vars ;
20607     +         run;
20608     +         %if &_exploreobs_debug ne 1 %then %do ;
20609     +                  options &_exp_source &_exp_notes ;
20610     +         %end ;
20611     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
20612     +         %if &dsid eq 0 %then %do ;
20613     +                  %put NOTE: Sample is not available.;
20614     +                  %goto term ;
20615     +            %end ;
20616     +      %end ;
20617     +
20618     +   /*--- get var attributes ---*/
20619     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
20620     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
20621     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
20622     +   %let dsid= %sysfunc(close(&dsid)) ;
20623     +
20624     +   /*--- set default and max obs ---*/
20625     +   %let _exploreobs_recl=%eval(&xlen) ;
20626     +   %if &_exploreobs_recl eq 0 %then %do ;
20627     +             %let _exploreobs_max= 0 ;
20628     +             %let _exploreobs_def= 0 ;
20629     +             %goto term ;
20630     +
20631     +   %end ;
20632     +   %else
20633     +   %if &_exploreobs_recl le 32 %then %do ;
20634     +             %let _exploreobs_max=100000 ;
20635     +             %let _exploreobs_def= 10000 ;
20636     +   %end ;
20637     +   %else
20638     +   %if &_exploreobs_recl le 128 %then %do ;
20639     +             %let _exploreobs_max=60000 ;
20640     +             %let _exploreobs_def= 6000 ;
20641     +   %end ;
20642     +   %else
20643     +   %if &_exploreobs_recl lt 1000 %then %do ;
20644     +             %let _exploreobs_max=20000 ;
20645     +             %let _exploreobs_def= 2000 ;
20646     +   %end ;
20647     +   %else
20648     +   %if &_exploreobs_recl lt 5000 %then %do ;
20649     +             %let _exploreobs_max= 10000 ;
20650     +             %let _exploreobs_def=  1000 ;
20651     +   %end ;
20652     +   %else
20653     +   %if &_exploreobs_recl lt 20000 %then %do ;
20654     +             %let _exploreobs_max= 5000 ;
20655     +             %let _exploreobs_def=  500 ;
20656     +   %end ;
20657     +   %else %do ;
20658     +             %let _exploreobs_max= 1000 ;
20659     +             %let _exploreobs_def=  200 ;
20660     +   %end ;
20661     +
20662     +   /*--- Users options ---*/
20663     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
20664     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
20665     +   %end;
20666     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
20667     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
20668     +   %end;
20669     +
20670     +    /*--- S0868273 ---*/
20671     +    %if "&NBYTES" ne "" %then %do;
20672     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
20673     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
20674     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
20675     +       %end;
20676     +
20677     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
20678     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
20679     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
20680     +          %if ^&_exploreobs_def %then
20681     +              %let _exploreobs_def = 1;
20682     +
20683     +       %end;
20684     +    %end;
20685     +
20686     +   /*--- Terminate ---*/
20687     +   %term:
20688     +
20689     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
20690     +%mend ;
20691     +
20692     +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref X has been deassigned.
PERFORMANCE  DETAILS

NOTE: There were 1 observations read from the data set EMWS4.PART_CMETA_TRAIN.
      WHERE ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

*------------------------------------------------------------*
* Simple random sample
*------------------------------------------------------------*

NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set EMWS4.TREE_TRAINSAMPLE has 20000 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
20693     +/*------------------------------------------------------------------
20694     +  MACRO EXPLOREOBS
20695     +
20696     +  SUPPORT:  SASDHD - David Duling
20697     +  PRODUCT:  Enterprise Miner
20698     +
20699     +  DESCRIPTION:
20700     +  Generates maximum and default numbers of observations to
20701     +  download for visualization depending on the record length.
20702     +
20703     +  Values were determined by trial and error using typical
20704     +  Windows workstation configurations.
20705     +
20706     +  Discrete sets of values are returned so that user experience
20707     +  will be consitent with similar sized data sets.
20708     +
20709     +  These macro variables are set:
20710     +  _exploreobs_max -- maximum number of obs downloadable
20711     +  _exploreobs_def -- default number of obs to be downloaded
20712     +  _exploreobs_recl - record length.  Might be useful for reporting.
20713     +
20714     +  Use the _exploreobs_max to set limit the GUI selection of
20715     +  observations for downloading.  The GUI selection for obs
20716     +  could be reduced to "Default" and "Max".
20717     +
20718     +  Parameters
20719     +  data=   libname.memname of input data
20720     +  vars=   subset list of variables.
20721     +          downloading 1 out of 500 really does work like downloading
20722     +          1 out of 1 vars.  Users may select a subset of vars for
20723     +                   visualizations.  Pass in the list as space delimited
20724     +          var names.  If vars is not specified, the record length
20725     +          of the entire data will be used.
20726     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
20727     +
20728     +  Control
20729     +  Users may control the values by entering these macro variables.
20730     +            EM_EXPLOREOBS_MAX
20731     +            EM_EXPLOREOBS_DEFAULT
20732     +  These values override the computed values.
20733     +
20734     +  Debugging
20735     +  %let _exploreobs_debug=1 ;
20736     +--------------------------------------------------------------------
20737     +  HISTORY: 20APR2004. sasdhd. pushed.
20738     +           18DEC2004. sasdhd. S0280556.
20739     +           07SEP2007. sasdhd. HK1009586
20740     +--------------------------------------------------------------------*/
20741     +
20742     +%macro exploreobs(data=,vars=, nbytes=) ;
20743     +
20744     +   /*--- variable definitions ---*/
20745     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
20746     +   %local xobs xvars xlen vlen xi vname vlist ;
20747     +   %local _exp_source _exp_notes ;
20748     +
20749     +   /*--- USER definitions ---*/
20750     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
20751     +
20752     +   /*--- variable intializations ---*/
20753     +   %let _exploreobs_max=0 ;
20754     +   %let _exploreobs_def=0 ;
20755     +   %let _exploreobs_recl=0 ;
20756     +   %let xvars= 0 ;
20757     +   %let xlen = 0 ;
20758     +   %let xobs = 0 ;
20759     +
20760     +   /*--- data error checks ---*/
20761     +   %if "&data" eq "" %then %do ;
20762     +            %put NOTE: DATA is not specified. ;
20763     +            %goto term ;
20764     +      %end ;
20765     +
20766     +   %let dsid=%sysfunc(open(&data)) ;
20767     +   %if not &dsid %then %do ;
20768     +            %put NOTE: DATA &data is not available. ;
20769     +            %goto term ;
20770     +      %end ;
20771     +
20772     +   /*--- if a vars list exists generate a subset ---*/
20773     +   %if &vars ne %then %do ;
20774     +         %let dsid=%sysfunc(close(&dsid)) ;
20775     +         %if &_exploreobs_debug ne 1 %then %do ;
20776     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
20777     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
20778     +                  options nosource nonotes ;
20779     +         %end ;
20780     +         data _exploreobs_temp_data ;
20781     +         set &data(obs=0) ;
20782     +          keep &vars ;
20783     +         run;
20784     +         %if &_exploreobs_debug ne 1 %then %do ;
20785     +                  options &_exp_source &_exp_notes ;
20786     +         %end ;
20787     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
20788     +         %if &dsid eq 0 %then %do ;
20789     +                  %put NOTE: Sample is not available.;
20790     +                  %goto term ;
20791     +            %end ;
20792     +      %end ;
20793     +
20794     +   /*--- get var attributes ---*/
20795     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
20796     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
20797     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
20798     +   %let dsid= %sysfunc(close(&dsid)) ;
20799     +
20800     +   /*--- set default and max obs ---*/
20801     +   %let _exploreobs_recl=%eval(&xlen) ;
20802     +   %if &_exploreobs_recl eq 0 %then %do ;
20803     +             %let _exploreobs_max= 0 ;
20804     +             %let _exploreobs_def= 0 ;
20805     +             %goto term ;
20806     +
20807     +   %end ;
20808     +   %else
20809     +   %if &_exploreobs_recl le 32 %then %do ;
20810     +             %let _exploreobs_max=100000 ;
20811     +             %let _exploreobs_def= 10000 ;
20812     +   %end ;
20813     +   %else
20814     +   %if &_exploreobs_recl le 128 %then %do ;
20815     +             %let _exploreobs_max=60000 ;
20816     +             %let _exploreobs_def= 6000 ;
20817     +   %end ;
20818     +   %else
20819     +   %if &_exploreobs_recl lt 1000 %then %do ;
20820     +             %let _exploreobs_max=20000 ;
20821     +             %let _exploreobs_def= 2000 ;
20822     +   %end ;
20823     +   %else
20824     +   %if &_exploreobs_recl lt 5000 %then %do ;
20825     +             %let _exploreobs_max= 10000 ;
20826     +             %let _exploreobs_def=  1000 ;
20827     +   %end ;
20828     +   %else
20829     +   %if &_exploreobs_recl lt 20000 %then %do ;
20830     +             %let _exploreobs_max= 5000 ;
20831     +             %let _exploreobs_def=  500 ;
20832     +   %end ;
20833     +   %else %do ;
20834     +             %let _exploreobs_max= 1000 ;
20835     +             %let _exploreobs_def=  200 ;
20836     +   %end ;
20837     +
20838     +   /*--- Users options ---*/
20839     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
20840     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
20841     +   %end;
20842     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
20843     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
20844     +   %end;
20845     +
20846     +    /*--- S0868273 ---*/
20847     +    %if "&NBYTES" ne "" %then %do;
20848     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
20849     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
20850     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
20851     +       %end;
20852     +
20853     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
20854     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
20855     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
20856     +          %if ^&_exploreobs_def %then
20857     +              %let _exploreobs_def = 1;
20858     +
20859     +       %end;
20860     +    %end;
20861     +
20862     +   /*--- Terminate ---*/
20863     +   %term:
20864     +
20865     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
20866     +%mend ;
20867     +
20868     +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref X has been deassigned.
PERFORMANCE  DETAILS

NOTE: There were 16121 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: The data set EMWS4.TREE_VALIDSAMPLE has 16121 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: 1646981 kilobytes of physical memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Will use 20000 out of 20000 training cases.
NOTE: Using memory pool with 1671787520 bytes.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: The data set EMWS4.TREE_EMTREE has 890 observations and 4 variables.


NOTE: There were 20000 observations read from the data set EMWS4.TREE_TRAINSAMPLE.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.14 seconds
      cpu time            0.11 seconds
      


NOTE: There were 890 observations read from the data set EMWS4.TREE_EMTREE.
NOTE: The data set EMWS4.TREE_BROWSETREE has 890 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20869      
20870      *------------------------------------------------------------*;
20871      * End OPENINT: Tree;
20872      *------------------------------------------------------------*;

20873      proc printto;
20874      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16099      filename newout "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMINTOUT.out" encoding="UTF-8" NOBOM;
16100      data _null_;
16101      call symput('NLDATE', strip(put(date(), NLDATE.)));
16102      call symput('NLTIME', strip(put(datetime(), NLTIME.)));
16103      run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16104      data _null_;
16105      nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "&nldate" );
16106      nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "&nltime" );
16107      file newout;
16108      put "*------------------------------------------------------------*";
16109      put "%sysfunc(sasmsg(sashelp.dmine, log_user_note,      NOQUOTE, %nrbquote(&sysuserid)))";
16110      put nldate;
16111      put nltime;
16112      put "*------------------------------------------------------------*";
16113      put ' ';
16114      run;

NOTE: The file NEWOUT is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMINTOUT.out,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13Apr2022:18:00:44,
      Create Time=13Apr2022:18:00:44

NOTE: 6 records were written to the file NEWOUT.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16115      proc printto print=newout;
16116      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

PERFORMANCE  DETAILS
16666      data EM_TARGETDECINFO;
16667      length TARGET $32 DECDATA DECMETA $43;
16668      TARGET="RESPOND";
16669      DECDATA="EMWS4.Ids_RESPOND_DD";
16670      DECMETA="EMWS4.Ids_RESPOND_DM";
16671      output;
16672      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16673      %let emexceptionString =;
16674      %let EMEXCEPTIONSTRING=;
16675      *------------------------------------------------------------*;
16676      * CLOSEINT: Tree;
16677      *------------------------------------------------------------*;
16678      %let EM_ACTION = CLOSEINT;
16679      %let syscc = 0;
16680      %macro main;
16681      
16682        %if %upcase(&EM_ACTION) = CREATE %then %do;
16683          filename temp catalog 'sashelp.emmodl.tree_create.source';
16684          %include temp;
16685          filename temp;
16686      
16687          %em_tree_create;
16688        %end;
16689      
16690         %else
16691         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16692      
16693             filename temp catalog 'sashelp.emmodl.tree_train.source';
16694             %include temp;
16695             filename temp;
16696             %em_tree_train;
16697         %end;
16698      
16699        %else
16700        %if %upcase(&EM_ACTION) = SCORE %then %do;
16701          filename temp catalog 'sashelp.emmodl.tree_score.source';
16702          %include temp;
16703          filename temp;
16704      
16705          %em_tree_score;
16706      
16707        %end;
16708      
16709        %else
16710        %if %upcase(&EM_ACTION) = REPORT %then %do;
16711      
16712             filename temp catalog 'sashelp.emmodl.tree_report.source';
16713             %include temp;
16714             filename temp;
16715      
16716             %em_tree_report;
16717         %end;
16718      
16719        %else
16720        %if %upcase(&EM_ACTION) = OPENINT %then %do;
16721      
16722             filename temp catalog 'sashelp.emmodl.tree_actions.source';
16723             %include temp;
16724             filename temp;
16725             %EM_TREE_OPENTREEVIEWER;
16726      
16727         %end;
16728      
16729        %else
16730        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16731      
16732             filename temp catalog 'sashelp.emmodl.tree_actions.source';
16733             %include temp;
16734             filename temp;
16735             %EM_TREE_CLOSETREEVIEWER;
16736      
16737         %end;
16738      
16739      
16740         %doendm:
16741      %mend main;
16742      
16743      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
16745     +%macro EM_TREE_OPENTREEVIEWER;
16747     +  options validvarname = v7;
16749     +  /* retrieve table names */
16750     +  %EM_GETNAME(key=EMTREE, type=DATA);
16751     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
16753     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
16754     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
16756     +  /* load trainmacros */
16757     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16758     +  %include temp;
16759     +  filename temp;
16761     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
16763     +    %if "&EM_IMPORT_DATA"="" %then %do;
16764     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16765     +       %goto doendm;
16766     +   %end;
16767     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
16768     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
16769     +       %goto doendm;
16770     +   %end;
16772     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
16773     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
16775     +       /* determine if multiple targets will be processed */
16776     +       %let em_tree_multipleTargets=N;
16777     +       %let em_tree_numTarget=1;
16778     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16779     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16780     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16781     +            %let em_tree_multipleTargets=N;
16782     +         %end;
16783     +         %else %do;
16784     +            /* create macro array of targets  */
16785     +            data _null_;
16786     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16787     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16788     +              if eof then
16789     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16790     +           run;
16792     +           %if &em_tree_numTarget gt 1 %then %do;
16793     +            %let em_tree_multipleTargets=Y;
16794     +           %end;
16795     +         %end;
16796     +       %end;
16798     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
16800     +       /* Check return code and throw exception if error is detected */
16801     +       %if &SYSERR > 0 %then %do;
16802     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16803     +          %goto doendm;
16804     +       %end;
16806     +  %end;
16808     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
16809     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
16810     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
16811     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
16812     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
16814     +  /* determine if sample should be used within interactive training */
16815     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
16816     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
16818     +     /* determine number of obs in training table */
16819     +     %let trainobs = ;
16820     +     proc sql noprint;
16821     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
16822     +     quit;
16824     +     /* retrieve appropriate sample size */
16825     +     %let maxobs = ;
16826     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
16827     +       %exploreObs(data=&EM_IMPORT_DATA);
16828     +       %let maxobs = &_EXPLOREOBS_MAX;
16829     +     %end;
16830     +     %else %do;
16831     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
16832     +     %end;
16834     +     /* create sample based on maxobs */
16835     +     %if &trainobs gt &maxobs %then %do;
16836     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
16837     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
16838     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16839     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
16840     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
16841     +          %end;
16842     +        %end;
16843     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
16844     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
16845     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
16846     +              %let em_tree_tempmethod = RANDOM;
16847     +            %end;
16848     +            %else %do;
16849     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
16850     +            %end;
16851     +          %end;
16852     +          %else %do;
16853     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
16854     +          %end;
16856     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
16857     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16858     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
16859     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
16860     +          %end;
16861     +        %end;
16863     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
16864     +          interact;
16865     +          subtree largest;
16866     +           /********** do i need CV options here? *********/
16867     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16868     +            assess validata=&&EM_USER_VALIDSAMPLE;
16869     +          %end;
16870     +          save model=&EM_USER_EMTREE;
16871     +        run;
16872     +        quit;
16873     +     %end;
16874     +  %end;
16876     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
16877     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
16878     +  data &EM_USER_BROWSETREE;
16879     +    set &EM_USER_EMTREE;
16880     +  run;
16882     +  /* reset validvarname options
16883     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
16884     +  options validvarname=&vvarname;  */
16885     +  %doendm:
16887     +%mend EM_TREE_OPENTREEVIEWER;
16891     +%macro EM_TREE_CLOSETREEVIEWER;
16893     +    /* clear syscc prior to running close Method */
16894     +    %let SYSCC = 0;
16895     +    options validvarname=V7;
16897     +    /* retrieve table names */
16898     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
16899     +    %EM_GETNAME(key=EMTREE,  type=DATA);
16900     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
16901     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
16902     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
16903     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
16904     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
16905     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
16906     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
16907     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
16909     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16910     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16912     +    /* load trainmacros */
16913     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16914     +    %include temp;
16915     +    filename temp;
16917     +    /* send output to node output window ; this will replace */
16918     +    /* old print with the new  print                         */
16919     +    options validvarname = v7;
16921     +    /* determine if multiple targets will be processed */
16922     +    %let em_tree_multipleTargets=N;
16923     +    %let em_tree_numTarget=1;
16924     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16925     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16926     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16927     +         %let em_tree_multipleTargets=N;
16928     +      %end;
16929     +      %else %do;
16930     +         /* create macro array of targets  */
16931     +         data _null_;
16932     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16933     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16934     +           if eof then
16935     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16936     +        run;
16938     +        %if &em_tree_numTarget gt 1 %then %do;
16939     +           %let em_tree_multipleTargets=Y;
16940     +        %end;
16941     +      %end;
16942     +    %end;
16945     + /* turn on pmml if requested */
16946     + %let nnpmml=0;
16947     + %if %symexist(EM_PMML) %then %do;
16948     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16949     +       %let nnpmml=1;
16951     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16952     +   %end;
16953     + %end;
16955     + %if &nnpmml %then %do;
16957     +    /* create dmdb needed for pmml generation */
16958     +    %let tree_maxlevel = 512;
16959     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16960     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16961     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16962     +      %end;
16963     +    %end;
16964     +    %if &tree_maxlevel gt 0 %then %do;
16965     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16966     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16967     +    %end;
16969     +    %let targetOrderString =;
16970     +    %let targetString = ;
16971     +    data _null_;
16972     +       length orderString nameString $10000;
16973     +       retain orderString nameString;
16974     +       set &em_data_variableset end=eof;
16975     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16976     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16977     +       %end;
16978     +       %else %do;
16979     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16980     +       %end;          select(order);
16981     +         when('')        order ='DESC';
16982     +         when('FMTASC')  order='ASCFMT';
16983     +         when('FMTDESC') order='DESFMT';
16984     +         otherwise;
16985     +       end;
16986     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16987     +       nameString = trim(nameString)!!' '!!trim(NAME);
16989     +       if eof then do;
16990     +          call symput('targetOrderString', trim(orderString));
16991     +          call symput('targetString', trim(nameString));
16992     +       end;
16993     +    run;
16995     +    %let arborkluge= "work._treeDMDB";
16997     +    proc dmdb batch data=&EM_IMPORT_DATA
16998     +    %if &nnpmml %then %do;
16999     +        PMML
17000     +    %end;
17001     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
17003     +     %if "%EM_ID" ne "" %then %do;
17004     +       id %EM_ID;
17005     +     %end;
17006     +     %if &EM_NUM_CLASS gt 0 %then %do;
17007     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17008     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17009     +            &targetOrderString;
17010     +     %end;
17011     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
17012     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
17013     +     %end;
17014     +     target &targetString %EM_INTERVAL_TARGET;
17015     +     %if "%EM_FREQ" ne "" %then %do;
17016     +       freq %EM_FREQ;
17017     +     %end;
17018     +    run;
17019     +    quit;
17021     +    proc datasets lib=work nolist;
17022     +       delete classout varout;
17023     +    run;
17024     +    quit;
17026     + %end;
17029     +    /* run arbor to generate new results and scoring code */
17030     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
17031     +       Performance &EM_PROPERTY_PERFORMANCE
17032     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17033     +         nodesize=&EM_PROPERTY_NODESAMPLE
17034     +       %end;
17035     +       ;
17036     +      interact;
17037     +      *subtree largest;
17040     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
17041     +         Assess
17042     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17043     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
17044     +              %put &em_codebar;
17045     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
17046     +              %put &errormsg;
17047     +              %put &em_codebar;
17048     +            %end;
17049     +            %else %do;
17050     +               Validata=&EM_IMPORT_VALIDATE;
17051     +            %end;
17052     +         %end;
17053     +         %else %do;
17054     +           NoValidata
17055     +         %end;
17056     +       %end;
17057     +      ;
17058     +      makemacro nleaves=nleaves;
17059     +      save
17060     +      %if "&EM_USER_EMTREE" ne "" %then %do;
17061     +         MODEL=&EM_USER_EMTREE
17062     +      %end;
17063     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
17064     +        SEQUENCE=&EM_USER_OUTSEQ
17065     +      %end;
17066     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
17067     +        IMPORTANCE=&EM_USER_OUTIMPORT
17068     +      %end;
17069     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
17070     +         NODESTAT=&EM_USER_OUTNODES
17071     +      %end;
17072     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
17073     +         SUMMARY=&EM_USER_OUTSUMMARY
17074     +      %end;
17075     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
17076     +         STATSBYNODE=&EM_USER_OUTSTATS
17077     +      %end;
17078     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
17079     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
17080     +      %end;
17081     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
17082     +         Pathlistnonmissing=&EM_USER_OUTPATH
17083     +      %end;
17084     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
17085     +         RULES = &EM_USER_OUTRULES
17086     +      %end;
17087     +      ;
17089     +      %let codetext=;
17090     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
17091     +        %let codetext=&codetext DUMMY;
17092     +      %end;
17093     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
17094     +        %let codetext=&codetext NOLEAFID;
17095     +      %end;
17097     +      %let norescodetxt=;
17098     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
17099     +        %let norescodetxt=&codetext NOPRED;
17100     +      %end;
17102     +      %let lookupString = ;
17103     +      %if ^%symexist(EM_OPTION) %then
17104     +         %let EM_OPTION=;
17106     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
17107     +         %let lookupString = LOOKUP=SELECT;
17108     +      %end;
17110     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
17111     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
17113     +      %if &nnpmml %then %do;
17114     +        code pmml;
17115     +      %end;
17117     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
17118     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17119     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
17120     +      %end;
17121     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
17122     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
17123     +      %end;
17124     +    run;
17126     +    quit;
17128     +    %if &nnpmml %then %do;
17129     +       ods pmml close;
17130     +    %end;
17132     +   /* Check return code and throw exception if error is detected */
17133     +   %if &SYSERR > 0 %then %do;
17134     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
17135     +     %goto doendm;
17136     +   %end;
17138     +   /* create outfit dataset if multiple score statements have been executed */
17139     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
17141     +   /* print variable importance listing */
17142     +   %let em_tree_surrexists=.;
17143     +   data _null_;
17144     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
17145     +    if eof then do ;
17146     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17147     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17148     +    end;
17149     +   run;
17151     +   /* create English Rules */
17152     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
17153     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
17154     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
17155     +       %em_tree_makeEnglishRules;
17157     +      /* English Rules */
17158     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
17160     +     %end;
17161     +   filename x;
17163     +   %doendm:
17165     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
17166     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
17168     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
17171     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
17172     +  %global &nLevel;
17173     +  proc dmdb batch data=&indata
17174     +    classout=_tmp_dmdbout;
17175     +    class &target;
17176     +  run;
17177     +  data _tmp_dmdbout;
17178     +    set _tmp_dmdbout;
17179     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
17180     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
17181     +  run;
17182     +  data _null_;
17183     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
17184     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
17185     +    %let dsid = %sysfunc(close(&dsid));
17186     +     call symput("&nLevel", put(&_obs, Best12.));
17187     +  run;
17189     +  proc datasets lib=work nolist;
17190     +     delete _tmp_dmdbout;
17191     +  run;
17192     +  quit;
17193     +%Mend EM_CheckBinaryTargetLevel;
17196     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
17198     +  /* determine the number of obs in training data */
17199     +  proc sql;
17200     +    reset noprint;
17201     +    select count(*) into :em_nobs from &indata;
17202     +  quit;
17204     +  /* determine the number of input variables */
17205     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
17206     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
17208     +  /* retrieve targetEvent from decmeta */
17209     +  %let targetEvent=;
17210     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17211     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17212     +      data _null_;
17213     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
17214     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17215     +      run;
17216     +    %end;
17217     +  %end;
17219     +  /* create targetTable if multipleTar eq Y */
17220     +  data temptarget;
17221     +    set &EM_DATA_VARIABLESET;
17222     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
17223     +  run;
17225     + /* data sets */
17226     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
17227     + %EM_GETNAME(key=EMTREE,        type=DATA);
17228     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
17229     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
17230     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
17231     + %EM_GETNAME(key=OUTNODES,      type=DATA);
17232     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
17233     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
17234     + %EM_GETNAME(key=OUTPATH,       type=DATA);
17235     + %EM_GETNAME(key=OUTRULES,      type=DATA);
17237     + /* files */
17238     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17239     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17241     + /* turn on pmml if requested */
17242     + %let nnpmml=0;
17243     + %if %symexist(EM_PMML) %then %do;
17244     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
17245     +       %let nnpmml=1;
17247     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
17248     +   %end;
17249     +%end;
17251     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
17253     +%if &nnpmml or &numClassTarget %then %do;
17255     +    /* create dmdb needed for pmml generation */
17256     +    %let tree_maxlevel = 512;
17257     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
17258     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
17259     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
17260     +      %end;
17261     +    %end;
17262     +    %if &tree_maxlevel gt 0 %then %do;
17263     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
17264     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
17265     +    %end;
17267     +    %let targetOrderString =;
17268     +    %let targetString = ;
17269     +    data _null_;
17270     +       length orderString nameString $10000;
17271     +       retain orderString nameString;
17272     +       set &em_data_variableset end=eof;
17273     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
17274     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
17275     +       %end;
17276     +       %else %do;
17277     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
17278     +       %end;          select(order);
17279     +         when('')        order ='DESC';
17280     +         when('FMTASC')  order='ASCFMT';
17281     +         when('FMTDESC') order='DESFMT';
17282     +         otherwise;
17283     +       end;
17284     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
17285     +       nameString = trim(nameString)!!' '!!trim(NAME);
17287     +       if eof then do;
17288     +          call symput('targetOrderString', trim(orderString));
17289     +          call symput('targetString', trim(nameString));
17290     +       end;
17291     +    run;
17293     +    %let arborkluge= "work._treeDMDB";
17295     +    proc dmdb batch data=&indata
17296     +    %if &nnpmml %then %do;
17297     +        PMML
17298     +    %end;
17299     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
17301     +      %if &nnpmml %then %do;
17302     +           %if "%EM_ID" ne "" %then %do;
17303     +             id %EM_ID;
17304     +           %end;
17305     +           %if &EM_NUM_CLASS gt 0 %then %do;
17306     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17307     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17308     +                  &targetOrderString;
17309     +           %end;
17310     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
17311     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
17312     +           %end;
17313     +           target &targetString %EM_INTERVAL_TARGET;
17314     +           %if "%EM_FREQ" ne "" %then %do;
17315     +             freq %EM_FREQ;
17316     +           %end;
17317     +      %end;
17318     +      %else %do;
17319     +         class  &targetOrderString;
17320     +         target &targetString %EM_INTERVAL_TARGET;
17321     +      %end;
17322     +    run;
17323     +    quit;
17325     +    proc datasets lib=work nolist;
17326     +       delete classout varout;
17327     +    run;
17328     +    quit;
17330     + %end;
17333     + /* run Arbor procedure */
17334     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
17335     +  proc arbor data=&INDATA
17337     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
17338     +    Leafsize = &EM_PROPERTY_LEAFSIZE
17339     +  %end;
17341     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
17342     +    Splitsize = &EM_PROPERTY_SPLITSIZE
17343     +  %end;
17345     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
17346     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
17347     +  %end;
17349     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
17350     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
17351     +  %end;
17353     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
17354     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
17355     +  %end;
17357     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
17358     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
17359     +  %end;
17360     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
17361     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
17362     +  %end;
17363     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
17364     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
17365     +  %end;
17367     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
17368     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
17369     +      alpha = &EM_PROPERTY_SIGLEVEL
17370     +    %end;
17371     +  %end;
17373     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
17374     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
17375     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
17376     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
17377     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
17379     +        padjust =
17380     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
17381     +          &chaid
17382     +        %end;
17383     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
17384     +          DEPTH
17385     +        %end;
17386     +      %end;
17387     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
17388     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
17389     +         pvars = &num_inputs
17390     +      %end;
17391     +    %end;
17392     +  %end;
17393     +  %else %do;
17394     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
17395     +         padjust = NONE
17396     +      %end;
17397     +  %end;
17399     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
17400     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
17401     +    Maxrules = &num_nrules
17402     +  %end;
17404     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
17405     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
17406     +    Maxsurrs = &num_nsurrs
17407     +  %end;
17409     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
17410     +     Missing=&EM_PROPERTY_MISSINGVALUE
17411     +  %end;
17413     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
17414     +     USEVARONCE
17415     +  %end;
17417     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
17418     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
17419     +  %end;
17422     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
17423     +    event = "&targetEvent"
17424     +  %end;
17426     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
17427     +     DECSEARCH
17428     +  %end;
17430     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
17431     +     PRIORSSEARCH
17432     +  %end;
17434     +  %if &arbor_1 ne %then %do;
17435     +    &arbor_1
17436     +  %end;
17438     +  %if &em_arbor ne %then %do;
17439     +     &em_arbor
17440     +  %end;
17441     +  ;
17442     + %end;
17443     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
17444     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
17445     +       Performance &EM_PROPERTY_PERFORMANCE
17446     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17447     +         nodesize=&EM_PROPERTY_NODESAMPLE
17448     +       %end;
17449     +       ;
17450     +       interact;
17451     + %end;
17452     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
17453     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
17454     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
17455     +    %put &em_codebar;
17456     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
17457     +    %put &errormsg;
17458     +    %put &em_codebar;
17459     +    %goto doendm;
17460     +   %end;
17461     +   %else %do;
17462     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
17463     +       Performance &EM_PROPERTY_PERFORMANCE
17464     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17465     +         nodesize=&EM_PROPERTY_NODESAMPLE
17466     +       %end;
17467     +       ;
17468     +       interact;
17469     +   %end;
17470     + %end;
17472     + %else %do;
17473     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
17474     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
17475     +    %put &em_codebar;
17476     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
17477     +    %put &errormsg;
17478     +    %put &em_codebar;
17479     +    %goto doendm;
17480     +   %end;
17481     +   %else %do;
17482     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
17483     +       Performance &EM_PROPERTY_PERFORMANCE
17484     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17485     +         nodesize=&EM_PROPERTY_NODESAMPLE
17486     +       %end;
17487     +       ;
17488     +        interact;
17489     +   %end;
17490     + %end;
17492     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
17493     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
17494     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
17495     +    %end;
17497     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
17498     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
17499     +    %end;
17501     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
17502     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
17503     +    %end;
17505     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
17506     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
17507     +    %end;
17509     +    %if "%EM_FREQ" ne "" %then %do;
17510     +       freq %EM_FREQ;
17511     +    %end;
17513     +    %if "&multipleTar" eq "Y" %then %do;
17514     +       /* cycle through all target vars in variableset */
17515     +       %let tdsid = %sysfunc(open(temptarget));
17516     +       %if &tdsid %then %do;
17517     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
17518     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
17519     +          %do %while(^ %sysfunc(fetch(&tdsid)));
17520     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
17521     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
17522     +             target &var / level = &lvl
17523     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
17524     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
17525     +             %end;
17526     +             %else %if "&lvl" eq "INTERVAL" %then %do;
17527     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
17528     +             %end;
17529     +             %else %if "&lvl" eq "ORDINAL" %then %do;
17530     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
17531     +             %end;
17532     +          %end;
17533     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
17534     +       %end;
17535     +       useTarget variable = %EM_TARGET;
17536     +    %end;
17537     +    %else %do;
17538     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
17539     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
17540     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
17541     +      %end;
17542     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
17543     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
17544     +      %end;
17545     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
17546     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
17547     +      %end;
17548     +    %end;
17550     +    %if "&multipleTar" eq "N" %then %do;
17551     +      &EM_DEC_STATEMENT;
17552     +    %end;
17554     +    Performance &EM_PROPERTY_PERFORMANCE
17555     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17556     +      nodesize=&EM_PROPERTY_NODESAMPLE
17557     +    %end;
17558     +    ;
17560     +    %if "&intFlag" eq "Y" %then %do;
17561     +       INTERACT Largest;
17562     +       Train maxnewdepth=0;
17563     +    %end;
17565     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
17566     +         Assess
17567     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17568     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
17569     +              %put &em_codebar;
17570     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
17571     +              %put &errormsg;
17572     +              %put &em_codebar;
17573     +            %end;
17574     +            %else %do;
17575     +               Validata=&EM_IMPORT_VALIDATE
17576     +            %end;
17577     +         %end;
17578     +         %else %do;
17579     +           NoValidata
17580     +         %end;
17581     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
17582     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
17583     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
17584     +               %if &dsid %then %do;
17585     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
17586     +                 %do %while(^ %sysfunc(fetch(&dsid)));
17587     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
17588     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
17589     +                   %else %do;
17590     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
17591     +                      %else %let measure= MISC;
17592     +                   %end;
17593     +                 %end;
17594     +               %end;
17595     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17596     +            %end;
17597     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
17598     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
17599     +                 %let measure=ASE;
17600     +              %end;
17601     +              %else %do;
17602     +                 %let measure=MISC;
17603     +              %end;
17604     +            %end;
17605     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
17606     +              %let measure=ASE;
17607     +            %end;
17608     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
17609     +               %let measure = LIFT;
17610     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
17611     +               %if &dsid %then %do;
17612     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
17613     +                 %do %while(^ %sysfunc(fetch(&dsid)));
17614     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
17615     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
17616     +                 %end;
17617     +               %end;
17618     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17619     +            %end;
17620     +            measure=&measure
17621     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
17622     +               event = "&targetEvent"
17623     +            %end;
17624     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
17625     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
17626     +            %end;
17627     +         %end;
17628     +         %if "&multipleTar" eq "N" %then %do;
17629     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
17630     +               CV
17631     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
17632     +                 CVNITer = &EM_PROPERTY_CVNITER
17633     +               %end;
17634     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
17635     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
17636     +               %end;
17637     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
17638     +                 CVSeed = &EM_PROPERTY_CVSEED
17639     +               %end;
17640     +            %end;
17641     +         %end;
17642     +       %end;
17643     +      ;
17645     +      %if "&intFlag" ne "Y" %then %do;
17646     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
17647     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
17648     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
17649     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
17651     +          SUBTREE &subtree
17652     +          %if "&subtree" eq "NLEAVES" %then %do;
17653     +            =&EM_PROPERTY_NSUBTREE
17654     +          %end;
17655     +          ;
17656     +        %end;
17658     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
17659     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
17660     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
17661     +          %end;
17662     +       %end;
17663     +      %end;
17664     + %end;
17667     + MakeMacro nleaves = nleaves;
17668     + save
17669     + %if "&EM_USER_EMTREE" ne "" %then %do;
17670     +   MODEL=&EM_USER_EMTREE
17671     + %end;
17672     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
17673     +   SEQUENCE=&EM_USER_OUTSEQ
17674     + %end;
17675     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
17676     +   IMPORTANCE=&EM_USER_OUTIMPORT
17677     + %end;
17678     + %if "&EM_USER_OUTNODES" ne "" %then %do;
17679     +   NODESTAT=&EM_USER_OUTNODES
17680     + %end;
17681     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
17682     +   SUMMARY=&EM_USER_OUTSUMMARY
17683     + %end;
17684     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
17685     +   STATSBYNODE=&EM_USER_OUTSTATS
17686     + %end;
17687     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
17688     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
17689     + %end;
17690     + %if "&EM_USER_OUTPATH" ne "" %then %do;
17691     +   Pathlistnonmissing=&EM_USER_OUTPATH
17692     + %end;
17693     + %if "&EM_USER_OUTRULES" ne "" %then %do;
17694     +   RULES = &EM_USER_OUTRULES
17695     + %end;
17696     + ;
17698     + %if "&intFlag" ne "Y" %then %do;
17700     +   %let lookupString = ;
17701     +   %if ^%symexist(EM_OPTION) %then
17702     +      %let EM_OPTION=;
17704     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
17705     +      %let lookupString = LOOKUP=SELECT;
17706     +   %end;
17708     +   %let codetext=;
17709     +   %let norescodetxt=;
17711     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
17712     +     %let codetext=&codetext DUMMY;
17713     +     %let norescodetxt=&norescodetxt DUMMY;
17714     +   %end;
17715     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
17716     +     %let codetext=&codetext NOLEAFID;
17717     +     %let norescodetxt=&norescodetxt NOLEAFID;
17718     +   %end;
17719     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
17720     +     %let norescodetxt=&norescodetxt NOPRED;
17721     +   %end;
17723     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
17724     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
17726     +   %if &nnpmml %then %do;
17727     +     code pmml;
17728     +   %end;
17730     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
17731     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
17732     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
17733     +   %end;
17734     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
17735     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
17736     +   %end;
17737     + %end;
17739     + run;
17740     + quit;
17742     + /*%em_checkerror(); */
17743     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
17744     +   /* Delete DMDB catalog */
17745     +   proc datasets lib=work nolist;
17746     +       delete _treeDMDB / mt=cat;
17747     +  run;
17748     +  %end;
17750     + %if &nnpmml %then %do;
17751     +    ods pmml close;
17752     + %end;
17754     +  %doendm:
17756     +%mend em_tree_runTreeProcedure;
17758     +%macro em_tree_createFitStats( multipleTar= );
17761     +  /* create targetTable is multipleTar eq Y */
17762     +  data temptarget;
17763     +    set &EM_DATA_VARIABLESET;
17764     +    where ROLE="TARGET";
17765     +  run;
17767     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
17768     +   data &EM_USER_EMOUTFIT;
17769     +     length target $32;
17770     +     merge work.fit_train
17771     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
17772     +       work.fit_valid
17773     +     %end;
17774     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
17775     +       work.fit_test
17776     +     %end;
17777     +     ;
17778     +     %if "&multipleTar" eq "N" %then %do;
17779     +       target="%EM_TARGET";
17780     +     %end;
17781     +     %else %do;
17782     +       target = _TARGET_;
17783     +     %end;
17784     +     drop _NW_ _SUMW_
17785     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
17786     +        _VSUMW_
17787     +     %end;
17788     +     ;
17789     +   run;
17791     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
17792     +     proc datasets library=work nolist;
17793     +       delete fit_valid;
17794     +     run;
17795     +   %end;
17796     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
17797     +     proc datasets library=work nolist;
17798     +       delete fit_test;
17799     +     run;
17800     +   %end;
17802     +%mend em_tree_createFitStats;
17805     +%macro em_tree_makeEnglishRules;
17807     +  %EM_GETNAME(key=OUTNODES, type=DATA);
17808     +  %EM_GETNAME(key=OUTPATH, type=DATA);
17810     +  /* verify that necessary tables exist and if not, skip processing */
17811     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
17812     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
17813     +    %goto doendm;
17814     +  %end;
17815     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
17816     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
17817     +    %goto doendm;
17818     +  %end;
17820     +  /* determine length of variable in outpath dataset */
17821     +  %let vlength= ;
17822     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
17823     +  %if &dsid ne %then %do;
17824     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
17825     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
17826     +  %end;
17827     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
17829     +  data tempoutpath;
17830     +    length varname $&vlength;
17831     +    retain varname;
17832     +    set &EM_USER_OUTPATH;
17834     +    if ^missing(variable) then varname=variable;
17835     +    else if ^missing(var_name) then varname=var_name;
17836     +    output;
17837     +  run;
17839     +  /* create an array of generated predicted variable names */
17840     +  %let tree_pred_vars = ;
17841     +  %let tree_pred_label = ;
17842     +  %let numpred= 0;
17843     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17845     +    data _null_;
17846     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17847     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17848     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
17849     +     if eof then
17850     +       call symput('numpred', strip(put(_N_, BEST.)));
17851     +    run;
17852     +  %end;
17854     +  /* determine if NPRIORS exists in outnodes  */
17855     +  %local nprior_flag;
17856     +  data _null_;
17857     +    set &EM_USER_OUTNODES(obs=2) end=eof;
17858     +    if eof then do;
17859     +      call symput('nprior_flag', strip(put(npriors, best.)));
17860     +    end;
17861     +  run;
17863     +  proc sort data=tempoutpath; by node; run;
17864     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
17866     +  data tempoutpath;
17867     +    merge tempoutpath(in=_a) outnodes(keep= node
17868     +    %if "&nprior_flag" ne "." %then %do;
17869     +      NPRIORS
17870     +    %end;
17871     +    %else %do;
17872     +      N
17873     +    %end;
17874     +    %if &numpred gt 0 %then %do;
17875     +      %do i=1 %to &numpred;
17876     +        &&tree_pred_vars&i
17877     +      %end;
17878     +    %end;
17879     +    );
17880     +    by node;
17881     +    if _a;
17882     +  run;
17884     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
17886     +  data _null_;
17887     +    file x;
17888     +    set tempoutpath;
17889     +    by node descending varname;
17890     +    retain origvar oldnode string;
17891     +    length origvar $32 oldnode 8 string $5000;
17893     +    if _N_ = 1 then do;
17894     +      origvar = varname;
17895     +      oldnode = node;
17896     +    end;
17898     +    if first.node then do;
17899     +       put "&EM_CODEBAR";
17900     +       put " Node = " node;
17901     +       put "&EM_CODEBAR";
17902     +    end;
17904     +      if first.varname then do;
17905     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
17906     +            if MISSING(CHARACTER_VALUE) then do;
17907     +             if NUMERIC_VALUE ne .  then do;
17908     +              if ^first.node then do;
17909     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17910     +              end;
17911     +              else do;
17912     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17913     +              end;
17914     +             end;
17915     +            end;
17916     +            else do;
17917     +              if ^first.node then do;
17918     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17919     +              end;
17920     +              else do;
17921     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17922     +              end;
17923     +             end;
17924     +         end;
17925     +         else if RELATION in ("=") then do;
17926     +            if ^first.node then do;
17927     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
17928     +            end;
17929     +            else do;
17930     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
17931     +            end;
17932     +         end;
17933     +         else if RELATION in ("ISMISSING") then do;
17934     +            if ^first.node then do;
17935     +              string = " AND "|| strip(varname) || " equals Missing";
17936     +            end;
17937     +            else do;
17938     +              string = "if "|| strip(varname) ||" equals Missing";
17939     +            end;
17940     +         end;
17941     +         else if RELATION in ("ISNOTMISSING") then do;
17942     +            if ^first.node then do;
17943     +              string = " AND "|| strip(varname) || " equals All Values";
17944     +            end;
17945     +            else do;
17946     +              string = "if "|| strip(varname) ||" equals All Values";
17947     +            end;
17948     +         end;
17949     +         if ^missing(varname) then origvar = varname;
17950     +         oldnode=node;
17952     +      end;
17953     +      else do;
17954     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
17955     +          if MISSING(CHARACTER_VALUE) then do;
17956     +           if  NUMERIC_VALUE ne .  then do;
17957     +            if ^MISSING(string) then
17958     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17959     +            else
17960     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17961     +           end;
17962     +          end;
17963     +          else do;
17964     +            if ^MISSING(string) then
17965     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17966     +            else
17967     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17968     +          end;
17970     +         end;
17971     +         else if RELATION in ("=") then do;
17972     +           string = strip(string)||", "||strip(character_value);
17973     +         end;
17974     +         else if RELATION in ("ISMISSING") then do;
17976     +         end;
17977     +         if ^missing(varname) then origvar = varname;
17978     +         oldnode=node;
17979     +      end;
17980     +      if last.varname then do;
17981     +         if RELATION in ("ISMISSING") then do;
17982     +           if ^first.varname then do;
17983     +             string = strip(string) || " or MISSING";
17984     +           end;
17985     +         end;
17986     +         put string;
17987     +         if ^missing(varname) then origvar = varname;
17988     +         oldnode=node;
17989     +      end;
17991     +      if last.node then do;
17992     +         put "then ";
17993     +         put " Tree Node Identifier   = " node;
17995     +         %if "&nprior_flag" ne "." %then %do;
17996     +           put " Number of Observations = " NPRIORS;
17997     +         %end;
17998     +         %else %do;
17999     +           put " Number of Observations = " N;
18000     +         %end;
18002     +         %if &numpred gt 0 %then %do;
18003     +           %do i=1 %to &numpred;
18004     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
18005     +           %end;
18006     +         %end;
18008     +         put " ";
18009     +         if ^missing(varname) then origvar = varname;
18010     +         oldnode=node;
18011     +      end;
18013     +  run;
18015     +  proc datasets lib=work nolist;
18016     +    delete tempoutpath outnodes;
18017     +  run;
18019     +  %doendm:
18020     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: 1631538 kilobytes of physical memory.
NOTE: The subtree sequence contains 25 subtrees. The largest has 49 nodes and 25 leaves.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1669646336 bytes.
NOTE: The subtree sequence contains 25 subtrees. The largest has 49 nodes and 25 leaves.
NOTE: Using subtree with 49 nodes and 25 leaves.
NOTE: Created macro variable NLEAVES equal to 25.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS4.TREE_EMTREE has 2238 observations and 4 variables.
NOTE: The data set EMWS4.TREE_OUTNODES has 49 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTPATH has 324 observations and 7 variables.
NOTE: The data set EMWS4.TREE_OUTRULES has 631 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTSEQ has 25 observations and 20 variables.
NOTE: The data set EMWS4.TREE_OUTSTATS has 343 observations and 5 variables.
NOTE: The data set EMWS4.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTTOPOLOGY has 49 observations and 5 variables.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.


NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.31 seconds
      cpu time            0.31 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 324 observations read from the data set EMWS4.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 324 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 324 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 324 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 49 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 324 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 49 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 324 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 324 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 324 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13Apr2022:18:00:45,
      Create Time=13Apr2022:17:42:20

NOTE: 348 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 71.
NOTE: There were 324 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

18022      
18023      *------------------------------------------------------------*;
18024      * End CLOSEINT: Tree;
18025      *------------------------------------------------------------*;

18026      proc sort data=WORK.EM_USER_REPORT;
18027      by ID VIEW;
18028      run;

NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18029      %let EMEXCEPTIONSTRING=;
18030      *------------------------------------------------------------*;
18031      * SCORE: Tree;
18032      *------------------------------------------------------------*;
18033      %let EM_ACTION = SCORE;
18034      %let syscc = 0;
18035      %macro main;
18036      
18037        %if %upcase(&EM_ACTION) = CREATE %then %do;
18038          filename temp catalog 'sashelp.emmodl.tree_create.source';
18039          %include temp;
18040          filename temp;
18041      
18042          %em_tree_create;
18043        %end;
18044      
18045         %else
18046         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18047      
18048             filename temp catalog 'sashelp.emmodl.tree_train.source';
18049             %include temp;
18050             filename temp;
18051             %em_tree_train;
18052         %end;
18053      
18054        %else
18055        %if %upcase(&EM_ACTION) = SCORE %then %do;
18056          filename temp catalog 'sashelp.emmodl.tree_score.source';
18057          %include temp;
18058          filename temp;
18059      
18060          %em_tree_score;
18061      
18062        %end;
18063      
18064        %else
18065        %if %upcase(&EM_ACTION) = REPORT %then %do;
18066      
18067             filename temp catalog 'sashelp.emmodl.tree_report.source';
18068             %include temp;
18069             filename temp;
18070      
18071             %em_tree_report;
18072         %end;
18073      
18074        %else
18075        %if %upcase(&EM_ACTION) = OPENINT %then %do;
18076      
18077             filename temp catalog 'sashelp.emmodl.tree_actions.source';
18078             %include temp;
18079             filename temp;
18080             %EM_TREE_OPENTREEVIEWER;
18081      
18082         %end;
18083      
18084        %else
18085        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18086      
18087             filename temp catalog 'sashelp.emmodl.tree_actions.source';
18088             %include temp;
18089             filename temp;
18090             %EM_TREE_CLOSETREEVIEWER;
18091      
18092         %end;
18093      
18094      
18095         %doendm:
18096      %mend main;
18097      
18098      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
18100     +%macro em_tree_score;
18102     +   /* determine if multiple targets will be processed */
18103     +   %let em_tree_multipleTargets=N;
18104     +   %let em_tree_numTarget=1;
18105     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18106     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18107     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18108     +         %let em_tree_multipleTargets=N;
18109     +      %end;
18110     +      %else %do;
18111     +         /* create macro array of targets  */
18112     +         data _null_;
18113     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18114     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
18115     +           if eof then
18116     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18117     +        run;
18119     +        %if &em_tree_numTarget gt 1 %then %do;
18120     +           %let em_tree_multipleTargets=Y;
18121     +        %end;
18122     +      %end;
18123     +   %end;
18125     +   /* build flow and publish scoring code */
18126     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
18127     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
18129     +   filename treeflow "&EM_USER_TREEFLOW";
18130     +   filename treepub "&EM_USER_TREEPUBLISH";
18132     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
18133     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
18135     +   %em_copyfile(infref=treeflow, outfref=flowref);
18136     +   %em_copyfile(infref=treepub, outfref=pubref);
18138     +   filename treeflow;
18139     +   filename treepub;
18141     +   /* if priors are used, add code to generate unadjusted residuals in export */
18142     +   %let useAdjPriors = N;
18143     +   data _null_;
18144     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
18145     +     if USE="Y" then call symput('useAdjPriors', 'Y');
18146     +   run;
18147     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
18148     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
18149     +      %include temp;
18150     +      filename temp;
18152     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
18153     +      filename adjref "&EM_USER_adjResidualCode";
18154     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
18156     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
18158     +      filename adjref;
18159     +   %end;
18161     +   /* LEAF */
18162     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
18163     +      data _null_;
18164     +        file flowref mod;
18165     +        put 'drop _LEAF_;';
18166     +      run;
18168     +      data _null_;
18169     +        file pubref mod;
18170     +        put 'drop _LEAF_;';
18171     +      run;
18173     +   %end;
18175     +   filename flowref;
18176     +   filename pubref;
18178     +   /* em_metachange code */
18179     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
18180     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
18181     +   %end;
18183     +   /* variable selection based on importance stat    */
18184     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
18185     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
18186     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
18187     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
18188     +     %let obs = %sysfunc(fetch(&dsid));
18189     +     %do %while(&obs=0);
18190     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
18191     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
18192     +       %EM_METACHANGE(name=&varname, role=REJECTED);
18193     +       %let obs = %sysfunc(fetch(&dsid));
18194     +     %end;
18195     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
18196     +   %end;
18198     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
18199     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
18200     +    %let tree_pred_vars = ;
18201     +    %let tree_pred_lvl =;
18202     +    %let numpred= 0;
18204     +    data _null_;
18205     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
18206     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
18207     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
18208     +     if eof then
18209     +       call symput('numpred', strip(put(_N_, BEST.)));
18210     +    run;
18211     +   %end;
18213     +   %if &numpred ne 0 %then %do;
18214     +    %do i=1 %to &numpred;
18215     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
18216     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
18217     +    %end;
18218     +   %end;
18220     +   /* determine if multiple targets will be processed */
18221     +   %let em_tree_multipleTargets=N;
18222     +   %let em_tree_numTarget=1;
18223     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18224     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18225     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18226     +         %let em_tree_multipleTargets=N;
18227     +      %end;
18228     +      %else %do;
18229     +        data _null_;
18230     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18231     +          if eof then
18232     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18233     +        run;
18235     +        %if &em_tree_numTarget gt 1 %then %do;
18236     +           %let em_tree_multipleTargets=Y;
18237     +        %end;
18238     +     %end;
18239     +   %end;
18241     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
18242     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
18244     +      /* variable importance */
18245     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
18246     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18248     +         %let validexist=0;
18249     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18250     +           %let validexist=1;
18251     +         %end;
18253     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18254     +         /* and the columns may not be generated                                                                                 */
18255     +         %let em_tree_cvexists=;
18256     +         %let em_tree_surrexists=.;
18257     +         data _null_;
18258     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
18259     +            if eof then do ;
18260     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18261     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18262     +            end;
18263     +         run;
18265     +         data &EM_USER_OUTIMPORT;
18266     +            set &EM_USER_OUTIMPORT;
18268     +            /* format columns based on Precison value specified */
18269     +            format importance 15.&EM_PROPERTY_PRECISION
18270     +                 %if &validexist %then %do;
18271     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
18272     +                 %end;
18273     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18274     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18275     +                 %end;
18276     +            ;
18277     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
18278     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
18279     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
18280     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
18281     +                 %if "&em_tree_surrexists" ne "" %then %do;
18282     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
18283     +                 %end;
18284     +                 %if &validexist %then %do;
18285     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
18286     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
18287     +                 %end;
18288     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
18289     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
18290     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
18291     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
18292     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
18293     +                 %end;
18294     +            ;
18295     +         run;
18297     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
18298     +      %end;
18299     +   %end;
18301     +   %doendm:
18302     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:00:46,
      Create Time=13Apr2022:17:41:57

NOTE: 425 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:00:46,
      Create Time=13Apr2022:17:41:57

NOTE: 403 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.

NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=16386,
      Last Modified=13Apr2022:18:00:46,
      Create Time=13Apr2022:17:41:57

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15757,
      Last Modified=13Apr2022:18:00:46,
      Create Time=13Apr2022:17:41:57

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 90 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18303      
18304      *------------------------------------------------------------*;
18305      * End SCORE: Tree;
18306      *------------------------------------------------------------*;

18307      proc sort data=WORK.EM_METACHANGE;
18308      by key uname;
18309      run;

NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18310      filename x "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas";
18311      data _null_;
18312      file x;
18313      put 'if upcase(NAME) = "ACTBUY" then do;';
18314      put 'ROLE = "REJECTED";';
18315      put 'end;';
18316      put 'else ';
18317      put 'if upcase(NAME) = "BOTHPAYM" then do;';
18318      put 'ROLE = "REJECTED";';
18319      put 'end;';
18320      put 'else ';
18321      put 'if upcase(NAME) = "CATALOGCNT" then do;';
18322      put 'ROLE = "REJECTED";';
18323      put 'end;';
18324      put 'else ';
18325      put 'if upcase(NAME) = "CCPAYM" then do;';
18326      put 'ROLE = "REJECTED";';
18327      put 'end;';
18328      put 'else ';
18329      put 'if upcase(NAME) = "DEPT01" then do;';
18330      put 'ROLE = "REJECTED";';
18331      put 'end;';
18332      put 'else ';
18333      put 'if upcase(NAME) = "DEPT04" then do;';
18334      put 'ROLE = "REJECTED";';
18335      put 'end;';
18336      put 'else ';
18337      put 'if upcase(NAME) = "DEPT05" then do;';
18338      put 'ROLE = "REJECTED";';
18339      put 'end;';
18340      put 'else ';
18341      put 'if upcase(NAME) = "DEPT06" then do;';
18342      put 'ROLE = "REJECTED";';
18343      put 'end;';
18344      put 'else ';
18345      put 'if upcase(NAME) = "DEPT07" then do;';
18346      put 'ROLE = "REJECTED";';
18347      put 'end;';
18348      put 'else ';
18349      put 'if upcase(NAME) = "DEPT08" then do;';
18350      put 'ROLE = "REJECTED";';
18351      put 'end;';
18352      put 'else ';
18353      put 'if upcase(NAME) = "DEPT12" then do;';
18354      put 'ROLE = "REJECTED";';
18355      put 'end;';
18356      put 'else ';
18357      put 'if upcase(NAME) = "DEPT13" then do;';
18358      put 'ROLE = "REJECTED";';
18359      put 'end;';
18360      put 'else ';
18361      put 'if upcase(NAME) = "DEPT14" then do;';
18362      put 'ROLE = "REJECTED";';
18363      put 'end;';
18364      put 'else ';
18365      put 'if upcase(NAME) = "DEPT15" then do;';
18366      put 'ROLE = "REJECTED";';
18367      put 'end;';
18368      put 'else ';
18369      put 'if upcase(NAME) = "DEPT16" then do;';
18370      put 'ROLE = "REJECTED";';
18371      put 'end;';
18372      put 'else ';
18373      put 'if upcase(NAME) = "DEPT17" then do;';
18374      put 'ROLE = "REJECTED";';
18375      put 'end;';
18376      put 'else ';
18377      put 'if upcase(NAME) = "DEPT18" then do;';
18378      put 'ROLE = "REJECTED";';
18379      put 'end;';
18380      put 'else ';
18381      put 'if upcase(NAME) = "DEPT19" then do;';
18382      put 'ROLE = "REJECTED";';
18383      put 'end;';
18384      put 'else ';
18385      put 'if upcase(NAME) = "DEPT20" then do;';
18386      put 'ROLE = "REJECTED";';
18387      put 'end;';
18388      put 'else ';
18389      put 'if upcase(NAME) = "DEPT21" then do;';
18390      put 'ROLE = "REJECTED";';
18391      put 'end;';
18392      put 'else ';
18393      put 'if upcase(NAME) = "DEPT22" then do;';
18394      put 'ROLE = "REJECTED";';
18395      put 'end;';
18396      put 'else ';
18397      put 'if upcase(NAME) = "DEPT23" then do;';
18398      put 'ROLE = "REJECTED";';
18399      put 'end;';
18400      put 'else ';
18401      put 'if upcase(NAME) = "DEPT24" then do;';
18402      put 'ROLE = "REJECTED";';
18403      put 'end;';
18404      put 'else ';
18405      put 'if upcase(NAME) = "DEPT26" then do;';
18406      put 'ROLE = "REJECTED";';
18407      put 'end;';
18408      put 'else ';
18409      put 'if upcase(NAME) = "DEPT27" then do;';
18410      put 'ROLE = "REJECTED";';
18411      put 'end;';
18412      put 'else ';
18413      put 'if upcase(NAME) = "DOLLARQ01" then do;';
18414      put 'ROLE = "REJECTED";';
18415      put 'end;';
18416      put 'else ';
18417      put 'if upcase(NAME) = "DOLLARQ03" then do;';
18418      put 'ROLE = "REJECTED";';
18419      put 'end;';
18420      put 'else ';
18421      put 'if upcase(NAME) = "DOLLARQ04" then do;';
18422      put 'ROLE = "REJECTED";';
18423      put 'end;';
18424      put 'else ';
18425      put 'if upcase(NAME) = "DOLLARQ05" then do;';
18426      put 'ROLE = "REJECTED";';
18427      put 'end;';
18428      put 'else ';
18429      put 'if upcase(NAME) = "DOLLARQ06" then do;';
18430      put 'ROLE = "REJECTED";';
18431      put 'end;';
18432      put 'else ';
18433      put 'if upcase(NAME) = "DOLLARQ07" then do;';
18434      put 'ROLE = "REJECTED";';
18435      put 'end;';
18436      put 'else ';
18437      put 'if upcase(NAME) = "DOLLARQ08" then do;';
18438      put 'ROLE = "REJECTED";';
18439      put 'end;';
18440      put 'else ';
18441      put 'if upcase(NAME) = "DOLLARQ09" then do;';
18442      put 'ROLE = "REJECTED";';
18443      put 'end;';
18444      put 'else ';
18445      put 'if upcase(NAME) = "DOLLARQ11" then do;';
18446      put 'ROLE = "REJECTED";';
18447      put 'end;';
18448      put 'else ';
18449      put 'if upcase(NAME) = "DOLLARQ12" then do;';
18450      put 'ROLE = "REJECTED";';
18451      put 'end;';
18452      put 'else ';
18453      put 'if upcase(NAME) = "DOLLARQ14" then do;';
18454      put 'ROLE = "REJECTED";';
18455      put 'end;';
18456      put 'else ';
18457      put 'if upcase(NAME) = "DOLLARQ15" then do;';
18458      put 'ROLE = "REJECTED";';
18459      put 'end;';
18460      put 'else ';
18461      put 'if upcase(NAME) = "DOLLARQ16" then do;';
18462      put 'ROLE = "REJECTED";';
18463      put 'end;';
18464      put 'else ';
18465      put 'if upcase(NAME) = "DOLLARQ17" then do;';
18466      put 'ROLE = "REJECTED";';
18467      put 'end;';
18468      put 'else ';
18469      put 'if upcase(NAME) = "DOLLARQ18" then do;';
18470      put 'ROLE = "REJECTED";';
18471      put 'end;';
18472      put 'else ';
18473      put 'if upcase(NAME) = "DOLLARQ19" then do;';
18474      put 'ROLE = "REJECTED";';
18475      put 'end;';
18476      put 'else ';
18477      put 'if upcase(NAME) = "DOLLARQ20" then do;';
18478      put 'ROLE = "REJECTED";';
18479      put 'end;';
18480      put 'else ';
18481      put 'if upcase(NAME) = "DOLLARQ21" then do;';
18482      put 'ROLE = "REJECTED";';
18483      put 'end;';
18484      put 'else ';
18485      put 'if upcase(NAME) = "DOLLARQ22" then do;';
18486      put 'ROLE = "REJECTED";';
18487      put 'end;';
18488      put 'else ';
18489      put 'if upcase(NAME) = "DOLNETDA" then do;';
18490      put 'ROLE = "REJECTED";';
18491      put 'end;';
18492      put 'else ';
18493      put 'if upcase(NAME) = "DOLNETDT" then do;';
18494      put 'ROLE = "REJECTED";';
18495      put 'end;';
18496      put 'else ';
18497      put 'if upcase(NAME) = "FREQPRCH" then do;';
18498      put 'ROLE = "REJECTED";';
18499      put 'end;';
18500      put 'else ';
18501      put 'if upcase(NAME) = "METHPAYM" then do;';
18502      put 'ROLE = "REJECTED";';
18503      put 'end;';
18504      put 'else ';
18505      put 'if upcase(NAME) = "MONLAST" then do;';
18506      put 'ROLE = "REJECTED";';
18507      put 'end;';
18508      put 'else ';
18509      put 'if upcase(NAME) = "PCPAYM" then do;';
18510      put 'ROLE = "REJECTED";';
18511      put 'end;';
18512      put 'else ';
18513      put 'if upcase(NAME) = "Q_RESPOND0" then do;';
18514      put 'ROLE = "ASSESS";';
18515      put 'end;';
18516      put 'else ';
18517      put 'if upcase(NAME) = "Q_RESPOND1" then do;';
18518      put 'ROLE = "ASSESS";';
18519      put 'end;';
18520      put 'else ';
18521      put 'if upcase(NAME) = "TOTORDQ01" then do;';
18522      put 'ROLE = "REJECTED";';
18523      put 'end;';
18524      put 'else ';
18525      put 'if upcase(NAME) = "TOTORDQ02" then do;';
18526      put 'ROLE = "REJECTED";';
18527      put 'end;';
18528      put 'else ';
18529      put 'if upcase(NAME) = "TOTORDQ03" then do;';
18530      put 'ROLE = "REJECTED";';
18531      put 'end;';
18532      put 'else ';
18533      put 'if upcase(NAME) = "TOTORDQ04" then do;';
18534      put 'ROLE = "REJECTED";';
18535      put 'end;';
18536      put 'else ';
18537      put 'if upcase(NAME) = "TOTORDQ05" then do;';
18538      put 'ROLE = "REJECTED";';
18539      put 'end;';
18540      put 'else ';
18541      put 'if upcase(NAME) = "TOTORDQ06" then do;';
18542      put 'ROLE = "REJECTED";';
18543      put 'end;';
18544      put 'else ';
18545      put 'if upcase(NAME) = "TOTORDQ07" then do;';
18546      put 'ROLE = "REJECTED";';
18547      put 'end;';
18548      put 'else ';
18549      put 'if upcase(NAME) = "TOTORDQ08" then do;';
18550      put 'ROLE = "REJECTED";';
18551      put 'end;';
18552      put 'else ';
18553      put 'if upcase(NAME) = "TOTORDQ09" then do;';
18554      put 'ROLE = "REJECTED";';
18555      put 'end;';
18556      put 'else ';
18557      put 'if upcase(NAME) = "TOTORDQ10" then do;';
18558      put 'ROLE = "REJECTED";';
18559      put 'end;';
18560      put 'else ';
18561      put 'if upcase(NAME) = "TOTORDQ11" then do;';
18562      put 'ROLE = "REJECTED";';
18563      put 'end;';
18564      put 'else ';
18565      put 'if upcase(NAME) = "TOTORDQ13" then do;';
18566      put 'ROLE = "REJECTED";';
18567      put 'end;';
18568      put 'else ';
18569      put 'if upcase(NAME) = "TOTORDQ14" then do;';
18570      put 'ROLE = "REJECTED";';
18571      put 'end;';
18572      put 'else ';
18573      put 'if upcase(NAME) = "TOTORDQ15" then do;';
18574      put 'ROLE = "REJECTED";';
18575      put 'end;';
18576      put 'else ';
18577      put 'if upcase(NAME) = "TOTORDQ16" then do;';
18578      put 'ROLE = "REJECTED";';
18579      put 'end;';
18580      put 'else ';
18581      put 'if upcase(NAME) = "TOTORDQ17" then do;';
18582      put 'ROLE = "REJECTED";';
18583      put 'end;';
18584      put 'else ';
18585      put 'if upcase(NAME) = "TOTORDQ18" then do;';
18586      put 'ROLE = "REJECTED";';
18587      put 'end;';
18588      put 'else ';
18589      put 'if upcase(NAME) = "TOTORDQ19" then do;';
18590      put 'ROLE = "REJECTED";';
18591      put 'end;';
18592      put 'else ';
18593      put 'if upcase(NAME) = "TOTORDQ20" then do;';
18594      put 'ROLE = "REJECTED";';
18595      put 'end;';
18596      put 'else ';
18597      put 'if upcase(NAME) = "TOTORDQ21" then do;';
18598      put 'ROLE = "REJECTED";';
18599      put 'end;';
18600      put 'else ';
18601      put 'if upcase(NAME) = "UNITSIDD" then do;';
18602      put 'ROLE = "REJECTED";';
18603      put 'end;';
18604      put 'else ';
18605      put 'if upcase(NAME) = "UNITSLAP" then do;';
18606      put 'ROLE = "REJECTED";';
18607      put 'end;';
18608      put 'else ';
18609      put 'if upcase(NAME) = "UNTLANPO" then do;';
18610      put 'ROLE = "REJECTED";';
18611      put 'end;';
18612      put 'else ';
18613      put 'if upcase(NAME) = "_NODE_" then do;';
18614      put 'ROLE = "SEGMENT";';
18615      put 'LEVEL = "NOMINAL";';
18616      put 'end;';
18617      run;

NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13Apr2022:18:00:46,
      Create Time=13Apr2022:17:41:57

NOTE: 304 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18618      filename x;
NOTE: Fileref X has been deassigned.
18619      filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
18620      *------------------------------------------------------------*;
18621      * Tree: Scoring DATA data;
18622      *------------------------------------------------------------*;
18623      data EMWS4.Tree_TRAIN
18624      / view=EMWS4.Tree_TRAIN
18625      ;
18626      set EMWS4.Part_TRAIN
18627      ;
18628      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
18629     +****************************************************************;
18630     +******             DECISION TREE SCORING CODE             ******;
18631     +****************************************************************;
18632     +
18633     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18634     +LENGTH F_RESPOND  $   12;
18635     +LENGTH I_RESPOND  $   12;
18636     +LENGTH _WARN_  $    4;
18637     +
18638     +******              LABELS FOR NEW VARIABLES              ******;
18639     +label _NODE_ = 'Node' ;
18640     +label _LEAF_ = 'Leaf' ;
18641     +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
18642     +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
18643     +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
18644     +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
18645     +label V_RESPOND1 = 'Validated: RESPOND=1' ;
18646     +label V_RESPOND0 = 'Validated: RESPOND=0' ;
18647     +label R_RESPOND1 = 'Residual: RESPOND=1' ;
18648     +label R_RESPOND0 = 'Residual: RESPOND=0' ;
18649     +label F_RESPOND = 'From: RESPOND' ;
18650     +label I_RESPOND = 'Into: RESPOND' ;
18651     +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
18652     +label _WARN_ = 'Warnings' ;
18653     +
18654     +
18655     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18656     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18657     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18658     +
18659     +
18660     +_ARBFMT_12 = PUT( RESPOND , BEST12.);
18661     + %DMNORMCP( _ARBFMT_12, F_RESPOND );
18662     +
18663     +******             ASSIGN OBSERVATION TO NODE             ******;
18664     +IF  NOT MISSING(DOLL24 ) AND
18665     +                 121.2 <= DOLL24  THEN DO;
18666     +  IF  NOT MISSING(TOTORDQ22 ) AND
18667     +                       2 <= TOTORDQ22  THEN DO;
18668     +    IF  NOT MISSING(BUYPROP ) AND
18669     +                     0.775 <= BUYPROP  THEN DO;
18670     +      _NODE_  =                   65;
18671     +      _LEAF_  =                   25;
18672     +      P_RESPOND1  =     0.60869565217391;
18673     +      P_RESPOND0  =     0.39130434782608;
18674     +      Q_RESPOND1  =     0.60869565217391;
18675     +      Q_RESPOND0  =     0.39130434782608;
18676     +      V_RESPOND1  =                 0.25;
18677     +      V_RESPOND0  =                 0.75;
18678     +      I_RESPOND  = '1' ;
18679     +      U_RESPOND  =                    1;
18680     +      END;
18681     +    ELSE DO;
18682     +      IF  NOT MISSING(DEPT10 ) AND
18683     +                         1.5 <= DEPT10  THEN DO;
18684     +        _NODE_  =                   71;
18685     +        _LEAF_  =                   24;
18686     +        P_RESPOND1  =     0.32142857142857;
18687     +        P_RESPOND0  =     0.67857142857142;
18688     +        Q_RESPOND1  =     0.32142857142857;
18689     +        Q_RESPOND0  =     0.67857142857142;
18690     +        V_RESPOND1  =     0.23529411764705;
18691     +        V_RESPOND0  =     0.76470588235294;
18692     +        I_RESPOND  = '0' ;
18693     +        U_RESPOND  =                    0;
18694     +        END;
18695     +      ELSE DO;
18696     +        IF  NOT MISSING(DOLL24 ) AND
18697     +                       526.575 <= DOLL24  THEN DO;
18698     +          IF  NOT MISSING(DOLINDET ) AND
18699     +                        1930.235 <= DOLINDET  THEN DO;
18700     +            _NODE_  =                   91;
18701     +            _LEAF_  =                   23;
18702     +            P_RESPOND1  =                  0.5;
18703     +            P_RESPOND0  =                  0.5;
18704     +            Q_RESPOND1  =                  0.5;
18705     +            Q_RESPOND0  =                  0.5;
18706     +            V_RESPOND1  =                    1;
18707     +            V_RESPOND0  =                    0;
18708     +            I_RESPOND  = '1' ;
18709     +            U_RESPOND  =                    1;
18710     +            END;
18711     +          ELSE DO;
18712     +            _NODE_  =                   90;
18713     +            _LEAF_  =                   22;
18714     +            P_RESPOND1  =     0.77777777777777;
18715     +            P_RESPOND0  =     0.22222222222222;
18716     +            Q_RESPOND1  =     0.77777777777777;
18717     +            Q_RESPOND0  =     0.22222222222222;
18718     +            V_RESPOND1  =     0.33333333333333;
18719     +            V_RESPOND0  =     0.66666666666666;
18720     +            I_RESPOND  = '1' ;
18721     +            U_RESPOND  =                    1;
18722     +            END;
18723     +          END;
18724     +        ELSE DO;
18725     +          IF  NOT MISSING(DOLINDEA ) AND
18726     +            DOLINDEA  <     32.7983333333333 THEN DO;
18727     +            _NODE_  =                   88;
18728     +            _LEAF_  =                   20;
18729     +            P_RESPOND1  =                0.375;
18730     +            P_RESPOND0  =                0.625;
18731     +            Q_RESPOND1  =                0.375;
18732     +            Q_RESPOND0  =                0.625;
18733     +            V_RESPOND1  =                 0.25;
18734     +            V_RESPOND0  =                 0.75;
18735     +            I_RESPOND  = '0' ;
18736     +            U_RESPOND  =                    0;
18737     +            END;
18738     +          ELSE DO;
18739     +            _NODE_  =                   89;
18740     +            _LEAF_  =                   21;
18741     +            P_RESPOND1  =     0.15662650602409;
18742     +            P_RESPOND0  =      0.8433734939759;
18743     +            Q_RESPOND1  =     0.15662650602409;
18744     +            Q_RESPOND0  =      0.8433734939759;
18745     +            V_RESPOND1  =     0.24324324324324;
18746     +            V_RESPOND0  =     0.75675675675675;
18747     +            I_RESPOND  = '0' ;
18748     +            U_RESPOND  =                    0;
18749     +            END;
18750     +          END;
18751     +        END;
18752     +      END;
18753     +    END;
18754     +  ELSE DO;
18755     +    IF  NOT MISSING(DEPT25 ) AND
18756     +                        35 <= DEPT25  THEN DO;
18757     +      _NODE_  =                   67;
18758     +      _LEAF_  =                   19;
18759     +      P_RESPOND1  =     0.38709677419354;
18760     +      P_RESPOND0  =     0.61290322580645;
18761     +      Q_RESPOND1  =     0.38709677419354;
18762     +      Q_RESPOND0  =     0.61290322580645;
18763     +      V_RESPOND1  =     0.27586206896551;
18764     +      V_RESPOND0  =     0.72413793103448;
18765     +      I_RESPOND  = '0' ;
18766     +      U_RESPOND  =                    0;
18767     +      END;
18768     +    ELSE DO;
18769     +      IF  NOT MISSING(TENURE ) AND
18770     +        TENURE  <                  1.5 THEN DO;
18771     +        _NODE_  =                   72;
18772     +        _LEAF_  =                   14;
18773     +        P_RESPOND1  =     0.66666666666666;
18774     +        P_RESPOND0  =     0.33333333333333;
18775     +        Q_RESPOND1  =     0.66666666666666;
18776     +        Q_RESPOND0  =     0.33333333333333;
18777     +        V_RESPOND1  =     0.33333333333333;
18778     +        V_RESPOND0  =     0.66666666666666;
18779     +        I_RESPOND  = '1' ;
18780     +        U_RESPOND  =                    1;
18781     +        END;
18782     +      ELSE DO;
18783     +        IF  NOT MISSING(DOLINDEA ) AND
18784     +              67.6833333333333 <= DOLINDEA  THEN DO;
18785     +          IF  NOT MISSING(DOLLARQ13 ) AND
18786     +                          201.55 <= DOLLARQ13  THEN DO;
18787     +            _NODE_  =                   95;
18788     +            _LEAF_  =                   18;
18789     +            P_RESPOND1  =     0.32142857142857;
18790     +            P_RESPOND0  =     0.67857142857142;
18791     +            Q_RESPOND1  =     0.32142857142857;
18792     +            Q_RESPOND0  =     0.67857142857142;
18793     +            V_RESPOND1  =     0.26666666666666;
18794     +            V_RESPOND0  =     0.73333333333333;
18795     +            I_RESPOND  = '0' ;
18796     +            U_RESPOND  =                    0;
18797     +            END;
18798     +          ELSE DO;
18799     +            _NODE_  =                   94;
18800     +            _LEAF_  =                   17;
18801     +            P_RESPOND1  =     0.08690330477356;
18802     +            P_RESPOND0  =     0.91309669522643;
18803     +            Q_RESPOND1  =     0.08690330477356;
18804     +            Q_RESPOND0  =     0.91309669522643;
18805     +            V_RESPOND1  =     0.09597156398104;
18806     +            V_RESPOND0  =     0.90402843601895;
18807     +            I_RESPOND  = '0' ;
18808     +            U_RESPOND  =                    0;
18809     +            END;
18810     +          END;
18811     +        ELSE DO;
18812     +          IF  NOT MISSING(DOLLARQ10 ) AND
18813     +                           129.3 <= DOLLARQ10  THEN DO;
18814     +            _NODE_  =                   93;
18815     +            _LEAF_  =                   16;
18816     +            P_RESPOND1  =     0.46666666666666;
18817     +            P_RESPOND0  =     0.53333333333333;
18818     +            Q_RESPOND1  =     0.46666666666666;
18819     +            Q_RESPOND0  =     0.53333333333333;
18820     +            V_RESPOND1  =                0.125;
18821     +            V_RESPOND0  =                0.875;
18822     +            I_RESPOND  = '0' ;
18823     +            U_RESPOND  =                    0;
18824     +            END;
18825     +          ELSE DO;
18826     +            _NODE_  =                   92;
18827     +            _LEAF_  =                   15;
18828     +            P_RESPOND1  =     0.14338010982306;
18829     +            P_RESPOND0  =     0.85661989017693;
18830     +            Q_RESPOND1  =     0.14338010982306;
18831     +            Q_RESPOND0  =     0.85661989017693;
18832     +            V_RESPOND1  =     0.13325608342989;
18833     +            V_RESPOND0  =      0.8667439165701;
18834     +            I_RESPOND  = '0' ;
18835     +            U_RESPOND  =                    0;
18836     +            END;
18837     +          END;
18838     +        END;
18839     +      END;
18840     +    END;
18841     +  END;
18842     +ELSE DO;
18843     +  IF  NOT MISSING(TENURE ) AND
18844     +    TENURE  <                  1.5 THEN DO;
18845     +    IF  NOT MISSING(DAYLAST ) AND
18846     +                      46.5 <= DAYLAST  THEN DO;
18847     +      _NODE_  =                   63;
18848     +      _LEAF_  =                    2;
18849     +      P_RESPOND1  =     0.11111111111111;
18850     +      P_RESPOND0  =     0.88888888888888;
18851     +      Q_RESPOND1  =     0.11111111111111;
18852     +      Q_RESPOND0  =     0.88888888888888;
18853     +      V_RESPOND1  =                    0;
18854     +      V_RESPOND0  =                    1;
18855     +      I_RESPOND  = '0' ;
18856     +      U_RESPOND  =                    0;
18857     +      END;
18858     +    ELSE DO;
18859     +      _NODE_  =                   62;
18860     +      _LEAF_  =                    1;
18861     +      P_RESPOND1  =     0.95454545454545;
18862     +      P_RESPOND0  =     0.04545454545454;
18863     +      Q_RESPOND1  =     0.95454545454545;
18864     +      Q_RESPOND0  =     0.04545454545454;
18865     +      V_RESPOND1  =                    1;
18866     +      V_RESPOND0  =                    0;
18867     +      I_RESPOND  = '1' ;
18868     +      U_RESPOND  =                    1;
18869     +      END;
18870     +    END;
18871     +  ELSE DO;
18872     +    IF  NOT MISSING(DAYLAST ) AND
18873     +      DAYLAST  <                683.5 THEN DO;
18874     +      IF  NOT MISSING(DEPT25 ) AND
18875     +                         4.5 <= DEPT25  THEN DO;
18876     +        IF  NOT MISSING(DEPT25 ) AND
18877     +                          19.5 <= DEPT25  THEN DO;
18878     +          _NODE_  =                   85;
18879     +          _LEAF_  =                    9;
18880     +          P_RESPOND1  =                 0.21;
18881     +          P_RESPOND0  =                 0.79;
18882     +          Q_RESPOND1  =                 0.21;
18883     +          Q_RESPOND0  =                 0.79;
18884     +          V_RESPOND1  =                  0.2;
18885     +          V_RESPOND0  =                  0.8;
18886     +          I_RESPOND  = '0' ;
18887     +          U_RESPOND  =                    0;
18888     +          END;
18889     +        ELSE DO;
18890     +          IF  NOT MISSING(DEPT03 ) AND
18891     +                             3.5 <= DEPT03  THEN DO;
18892     +            _NODE_  =                  101;
18893     +            _LEAF_  =                    8;
18894     +            P_RESPOND1  =      0.1560975609756;
18895     +            P_RESPOND0  =     0.84390243902439;
18896     +            Q_RESPOND1  =      0.1560975609756;
18897     +            Q_RESPOND0  =     0.84390243902439;
18898     +            V_RESPOND1  =     0.10576923076923;
18899     +            V_RESPOND0  =     0.89423076923076;
18900     +            I_RESPOND  = '0' ;
18901     +            U_RESPOND  =                    0;
18902     +            END;
18903     +          ELSE DO;
18904     +            _NODE_  =                  100;
18905     +            _LEAF_  =                    7;
18906     +            P_RESPOND1  =     0.08833678398895;
18907     +            P_RESPOND0  =     0.91166321601104;
18908     +            Q_RESPOND1  =     0.08833678398895;
18909     +            Q_RESPOND0  =     0.91166321601104;
18910     +            V_RESPOND1  =     0.08879184861717;
18911     +            V_RESPOND0  =     0.91120815138282;
18912     +            I_RESPOND  = '0' ;
18913     +            U_RESPOND  =                    0;
18914     +            END;
18915     +          END;
18916     +        END;
18917     +      ELSE DO;
18918     +        IF  NOT MISSING(TOTORDQ12 ) AND
18919     +                           0.5 <= TOTORDQ12  THEN DO;
18920     +          IF  NOT MISSING(DEPT11 ) AND
18921     +                               4 <= DEPT11  THEN DO;
18922     +            _NODE_  =                   99;
18923     +            _LEAF_  =                    6;
18924     +            P_RESPOND1  =     0.27272727272727;
18925     +            P_RESPOND0  =     0.72727272727272;
18926     +            Q_RESPOND1  =     0.27272727272727;
18927     +            Q_RESPOND0  =     0.72727272727272;
18928     +            V_RESPOND1  =                    0;
18929     +            V_RESPOND0  =                    1;
18930     +            I_RESPOND  = '0' ;
18931     +            U_RESPOND  =                    0;
18932     +            END;
18933     +          ELSE DO;
18934     +            _NODE_  =                   98;
18935     +            _LEAF_  =                    5;
18936     +            P_RESPOND1  =     0.10659898477157;
18937     +            P_RESPOND0  =     0.89340101522842;
18938     +            Q_RESPOND1  =     0.10659898477157;
18939     +            Q_RESPOND0  =     0.89340101522842;
18940     +            V_RESPOND1  =     0.09813084112149;
18941     +            V_RESPOND0  =      0.9018691588785;
18942     +            I_RESPOND  = '0' ;
18943     +            U_RESPOND  =                    0;
18944     +            END;
18945     +          END;
18946     +        ELSE DO;
18947     +          IF  NOT MISSING(DOLLARQ02 ) AND
18948     +                         113.625 <= DOLLARQ02  THEN DO;
18949     +            _NODE_  =                   97;
18950     +            _LEAF_  =                    4;
18951     +            P_RESPOND1  =     0.18181818181818;
18952     +            P_RESPOND0  =     0.81818181818181;
18953     +            Q_RESPOND1  =     0.18181818181818;
18954     +            Q_RESPOND0  =     0.81818181818181;
18955     +            V_RESPOND1  =     0.14285714285714;
18956     +            V_RESPOND0  =     0.85714285714285;
18957     +            I_RESPOND  = '0' ;
18958     +            U_RESPOND  =                    0;
18959     +            END;
18960     +          ELSE DO;
18961     +            _NODE_  =                   96;
18962     +            _LEAF_  =                    3;
18963     +            P_RESPOND1  =     0.05206265166556;
18964     +            P_RESPOND0  =     0.94793734833443;
18965     +            Q_RESPOND1  =     0.05206265166556;
18966     +            Q_RESPOND0  =     0.94793734833443;
18967     +            V_RESPOND1  =     0.05445436724025;
18968     +            V_RESPOND0  =     0.94554563275974;
18969     +            I_RESPOND  = '0' ;
18970     +            U_RESPOND  =                    0;
18971     +            END;
18972     +          END;
18973     +        END;
18974     +      END;
18975     +    ELSE DO;
18976     +      IF  NOT MISSING(DEPT09 ) AND
18977     +                        12.5 <= DEPT09  THEN DO;
18978     +        _NODE_  =                   77;
18979     +        _LEAF_  =                   13;
18980     +        P_RESPOND1  =                0.375;
18981     +        P_RESPOND0  =                0.625;
18982     +        Q_RESPOND1  =                0.375;
18983     +        Q_RESPOND0  =                0.625;
18984     +        V_RESPOND1  =                    0;
18985     +        V_RESPOND0  =                    1;
18986     +        I_RESPOND  = '0' ;
18987     +        U_RESPOND  =                    0;
18988     +        END;
18989     +      ELSE DO;
18990     +        IF  NOT MISSING(TOTORDQ12 ) AND
18991     +                           2.5 <= TOTORDQ12  THEN DO;
18992     +          _NODE_  =                   87;
18993     +          _LEAF_  =                   12;
18994     +          P_RESPOND1  =     0.27272727272727;
18995     +          P_RESPOND0  =     0.72727272727272;
18996     +          Q_RESPOND1  =     0.27272727272727;
18997     +          Q_RESPOND0  =     0.72727272727272;
18998     +          V_RESPOND1  =                    0;
18999     +          V_RESPOND0  =                    1;
19000     +          I_RESPOND  = '0' ;
19001     +          U_RESPOND  =                    0;
19002     +          END;
19003     +        ELSE DO;
19004     +          IF  NOT MISSING(DEPT02 ) AND
19005     +                             7.5 <= DEPT02  THEN DO;
19006     +            _NODE_  =                  103;
19007     +            _LEAF_  =                   11;
19008     +            P_RESPOND1  =     0.26315789473684;
19009     +            P_RESPOND0  =     0.73684210526315;
19010     +            Q_RESPOND1  =     0.26315789473684;
19011     +            Q_RESPOND0  =     0.73684210526315;
19012     +            V_RESPOND1  =                    0;
19013     +            V_RESPOND0  =                    1;
19014     +            I_RESPOND  = '0' ;
19015     +            U_RESPOND  =                    0;
19016     +            END;
19017     +          ELSE DO;
19018     +            _NODE_  =                  102;
19019     +            _LEAF_  =                   10;
19020     +            P_RESPOND1  =      0.0337694483734;
19021     +            P_RESPOND0  =     0.96623055162659;
19022     +            Q_RESPOND1  =      0.0337694483734;
19023     +            Q_RESPOND0  =     0.96623055162659;
19024     +            V_RESPOND1  =     0.03626386735059;
19025     +            V_RESPOND0  =      0.9637361326494;
19026     +            I_RESPOND  = '0' ;
19027     +            U_RESPOND  =                    0;
19028     +            END;
19029     +          END;
19030     +        END;
19031     +      END;
19032     +    END;
19033     +  END;
19034     +
19035     +*****  RESIDUALS R_ *************;
19036     +IF  F_RESPOND  NE '1'
19037     +AND F_RESPOND  NE '0'  THEN DO;
19038     +        R_RESPOND1  = .;
19039     +        R_RESPOND0  = .;
19040     + END;
19041     + ELSE DO;
19042     +       R_RESPOND1  =  -P_RESPOND1 ;
19043     +       R_RESPOND0  =  -P_RESPOND0 ;
19044     +       SELECT( F_RESPOND  );
19045     +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
19046     +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
19047     +       END;
19048     + END;
19049     +
19050     +****************************************************************;
19051     +******          END OF DECISION TREE SCORING CODE         ******;
19052     +****************************************************************;
19053     +
19054     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
19055      run;

NOTE: DATA STEP view saved on file EMWS4.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19056      quit;
19057      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
19058      filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
19059      *------------------------------------------------------------*;
19060      * Tree: Scoring VALIDATE data;
19061      *------------------------------------------------------------*;
19062      data EMWS4.Tree_VALIDATE
19063      / view=EMWS4.Tree_VALIDATE
19064      ;
19065      set EMWS4.Part_VALIDATE
19066      ;
19067      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
19068     +****************************************************************;
19069     +******             DECISION TREE SCORING CODE             ******;
19070     +****************************************************************;
19071     +
19072     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
19073     +LENGTH F_RESPOND  $   12;
19074     +LENGTH I_RESPOND  $   12;
19075     +LENGTH _WARN_  $    4;
19076     +
19077     +******              LABELS FOR NEW VARIABLES              ******;
19078     +label _NODE_ = 'Node' ;
19079     +label _LEAF_ = 'Leaf' ;
19080     +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
19081     +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
19082     +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
19083     +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
19084     +label V_RESPOND1 = 'Validated: RESPOND=1' ;
19085     +label V_RESPOND0 = 'Validated: RESPOND=0' ;
19086     +label R_RESPOND1 = 'Residual: RESPOND=1' ;
19087     +label R_RESPOND0 = 'Residual: RESPOND=0' ;
19088     +label F_RESPOND = 'From: RESPOND' ;
19089     +label I_RESPOND = 'Into: RESPOND' ;
19090     +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
19091     +label _WARN_ = 'Warnings' ;
19092     +
19093     +
19094     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
19095     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
19096     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
19097     +
19098     +
19099     +_ARBFMT_12 = PUT( RESPOND , BEST12.);
19100     + %DMNORMCP( _ARBFMT_12, F_RESPOND );
19101     +
19102     +******             ASSIGN OBSERVATION TO NODE             ******;
19103     +IF  NOT MISSING(DOLL24 ) AND
19104     +                 121.2 <= DOLL24  THEN DO;
19105     +  IF  NOT MISSING(TOTORDQ22 ) AND
19106     +                       2 <= TOTORDQ22  THEN DO;
19107     +    IF  NOT MISSING(BUYPROP ) AND
19108     +                     0.775 <= BUYPROP  THEN DO;
19109     +      _NODE_  =                   65;
19110     +      _LEAF_  =                   25;
19111     +      P_RESPOND1  =     0.60869565217391;
19112     +      P_RESPOND0  =     0.39130434782608;
19113     +      Q_RESPOND1  =     0.60869565217391;
19114     +      Q_RESPOND0  =     0.39130434782608;
19115     +      V_RESPOND1  =                 0.25;
19116     +      V_RESPOND0  =                 0.75;
19117     +      I_RESPOND  = '1' ;
19118     +      U_RESPOND  =                    1;
19119     +      END;
19120     +    ELSE DO;
19121     +      IF  NOT MISSING(DEPT10 ) AND
19122     +                         1.5 <= DEPT10  THEN DO;
19123     +        _NODE_  =                   71;
19124     +        _LEAF_  =                   24;
19125     +        P_RESPOND1  =     0.32142857142857;
19126     +        P_RESPOND0  =     0.67857142857142;
19127     +        Q_RESPOND1  =     0.32142857142857;
19128     +        Q_RESPOND0  =     0.67857142857142;
19129     +        V_RESPOND1  =     0.23529411764705;
19130     +        V_RESPOND0  =     0.76470588235294;
19131     +        I_RESPOND  = '0' ;
19132     +        U_RESPOND  =                    0;
19133     +        END;
19134     +      ELSE DO;
19135     +        IF  NOT MISSING(DOLL24 ) AND
19136     +                       526.575 <= DOLL24  THEN DO;
19137     +          IF  NOT MISSING(DOLINDET ) AND
19138     +                        1930.235 <= DOLINDET  THEN DO;
19139     +            _NODE_  =                   91;
19140     +            _LEAF_  =                   23;
19141     +            P_RESPOND1  =                  0.5;
19142     +            P_RESPOND0  =                  0.5;
19143     +            Q_RESPOND1  =                  0.5;
19144     +            Q_RESPOND0  =                  0.5;
19145     +            V_RESPOND1  =                    1;
19146     +            V_RESPOND0  =                    0;
19147     +            I_RESPOND  = '1' ;
19148     +            U_RESPOND  =                    1;
19149     +            END;
19150     +          ELSE DO;
19151     +            _NODE_  =                   90;
19152     +            _LEAF_  =                   22;
19153     +            P_RESPOND1  =     0.77777777777777;
19154     +            P_RESPOND0  =     0.22222222222222;
19155     +            Q_RESPOND1  =     0.77777777777777;
19156     +            Q_RESPOND0  =     0.22222222222222;
19157     +            V_RESPOND1  =     0.33333333333333;
19158     +            V_RESPOND0  =     0.66666666666666;
19159     +            I_RESPOND  = '1' ;
19160     +            U_RESPOND  =                    1;
19161     +            END;
19162     +          END;
19163     +        ELSE DO;
19164     +          IF  NOT MISSING(DOLINDEA ) AND
19165     +            DOLINDEA  <     32.7983333333333 THEN DO;
19166     +            _NODE_  =                   88;
19167     +            _LEAF_  =                   20;
19168     +            P_RESPOND1  =                0.375;
19169     +            P_RESPOND0  =                0.625;
19170     +            Q_RESPOND1  =                0.375;
19171     +            Q_RESPOND0  =                0.625;
19172     +            V_RESPOND1  =                 0.25;
19173     +            V_RESPOND0  =                 0.75;
19174     +            I_RESPOND  = '0' ;
19175     +            U_RESPOND  =                    0;
19176     +            END;
19177     +          ELSE DO;
19178     +            _NODE_  =                   89;
19179     +            _LEAF_  =                   21;
19180     +            P_RESPOND1  =     0.15662650602409;
19181     +            P_RESPOND0  =      0.8433734939759;
19182     +            Q_RESPOND1  =     0.15662650602409;
19183     +            Q_RESPOND0  =      0.8433734939759;
19184     +            V_RESPOND1  =     0.24324324324324;
19185     +            V_RESPOND0  =     0.75675675675675;
19186     +            I_RESPOND  = '0' ;
19187     +            U_RESPOND  =                    0;
19188     +            END;
19189     +          END;
19190     +        END;
19191     +      END;
19192     +    END;
19193     +  ELSE DO;
19194     +    IF  NOT MISSING(DEPT25 ) AND
19195     +                        35 <= DEPT25  THEN DO;
19196     +      _NODE_  =                   67;
19197     +      _LEAF_  =                   19;
19198     +      P_RESPOND1  =     0.38709677419354;
19199     +      P_RESPOND0  =     0.61290322580645;
19200     +      Q_RESPOND1  =     0.38709677419354;
19201     +      Q_RESPOND0  =     0.61290322580645;
19202     +      V_RESPOND1  =     0.27586206896551;
19203     +      V_RESPOND0  =     0.72413793103448;
19204     +      I_RESPOND  = '0' ;
19205     +      U_RESPOND  =                    0;
19206     +      END;
19207     +    ELSE DO;
19208     +      IF  NOT MISSING(TENURE ) AND
19209     +        TENURE  <                  1.5 THEN DO;
19210     +        _NODE_  =                   72;
19211     +        _LEAF_  =                   14;
19212     +        P_RESPOND1  =     0.66666666666666;
19213     +        P_RESPOND0  =     0.33333333333333;
19214     +        Q_RESPOND1  =     0.66666666666666;
19215     +        Q_RESPOND0  =     0.33333333333333;
19216     +        V_RESPOND1  =     0.33333333333333;
19217     +        V_RESPOND0  =     0.66666666666666;
19218     +        I_RESPOND  = '1' ;
19219     +        U_RESPOND  =                    1;
19220     +        END;
19221     +      ELSE DO;
19222     +        IF  NOT MISSING(DOLINDEA ) AND
19223     +              67.6833333333333 <= DOLINDEA  THEN DO;
19224     +          IF  NOT MISSING(DOLLARQ13 ) AND
19225     +                          201.55 <= DOLLARQ13  THEN DO;
19226     +            _NODE_  =                   95;
19227     +            _LEAF_  =                   18;
19228     +            P_RESPOND1  =     0.32142857142857;
19229     +            P_RESPOND0  =     0.67857142857142;
19230     +            Q_RESPOND1  =     0.32142857142857;
19231     +            Q_RESPOND0  =     0.67857142857142;
19232     +            V_RESPOND1  =     0.26666666666666;
19233     +            V_RESPOND0  =     0.73333333333333;
19234     +            I_RESPOND  = '0' ;
19235     +            U_RESPOND  =                    0;
19236     +            END;
19237     +          ELSE DO;
19238     +            _NODE_  =                   94;
19239     +            _LEAF_  =                   17;
19240     +            P_RESPOND1  =     0.08690330477356;
19241     +            P_RESPOND0  =     0.91309669522643;
19242     +            Q_RESPOND1  =     0.08690330477356;
19243     +            Q_RESPOND0  =     0.91309669522643;
19244     +            V_RESPOND1  =     0.09597156398104;
19245     +            V_RESPOND0  =     0.90402843601895;
19246     +            I_RESPOND  = '0' ;
19247     +            U_RESPOND  =                    0;
19248     +            END;
19249     +          END;
19250     +        ELSE DO;
19251     +          IF  NOT MISSING(DOLLARQ10 ) AND
19252     +                           129.3 <= DOLLARQ10  THEN DO;
19253     +            _NODE_  =                   93;
19254     +            _LEAF_  =                   16;
19255     +            P_RESPOND1  =     0.46666666666666;
19256     +            P_RESPOND0  =     0.53333333333333;
19257     +            Q_RESPOND1  =     0.46666666666666;
19258     +            Q_RESPOND0  =     0.53333333333333;
19259     +            V_RESPOND1  =                0.125;
19260     +            V_RESPOND0  =                0.875;
19261     +            I_RESPOND  = '0' ;
19262     +            U_RESPOND  =                    0;
19263     +            END;
19264     +          ELSE DO;
19265     +            _NODE_  =                   92;
19266     +            _LEAF_  =                   15;
19267     +            P_RESPOND1  =     0.14338010982306;
19268     +            P_RESPOND0  =     0.85661989017693;
19269     +            Q_RESPOND1  =     0.14338010982306;
19270     +            Q_RESPOND0  =     0.85661989017693;
19271     +            V_RESPOND1  =     0.13325608342989;
19272     +            V_RESPOND0  =      0.8667439165701;
19273     +            I_RESPOND  = '0' ;
19274     +            U_RESPOND  =                    0;
19275     +            END;
19276     +          END;
19277     +        END;
19278     +      END;
19279     +    END;
19280     +  END;
19281     +ELSE DO;
19282     +  IF  NOT MISSING(TENURE ) AND
19283     +    TENURE  <                  1.5 THEN DO;
19284     +    IF  NOT MISSING(DAYLAST ) AND
19285     +                      46.5 <= DAYLAST  THEN DO;
19286     +      _NODE_  =                   63;
19287     +      _LEAF_  =                    2;
19288     +      P_RESPOND1  =     0.11111111111111;
19289     +      P_RESPOND0  =     0.88888888888888;
19290     +      Q_RESPOND1  =     0.11111111111111;
19291     +      Q_RESPOND0  =     0.88888888888888;
19292     +      V_RESPOND1  =                    0;
19293     +      V_RESPOND0  =                    1;
19294     +      I_RESPOND  = '0' ;
19295     +      U_RESPOND  =                    0;
19296     +      END;
19297     +    ELSE DO;
19298     +      _NODE_  =                   62;
19299     +      _LEAF_  =                    1;
19300     +      P_RESPOND1  =     0.95454545454545;
19301     +      P_RESPOND0  =     0.04545454545454;
19302     +      Q_RESPOND1  =     0.95454545454545;
19303     +      Q_RESPOND0  =     0.04545454545454;
19304     +      V_RESPOND1  =                    1;
19305     +      V_RESPOND0  =                    0;
19306     +      I_RESPOND  = '1' ;
19307     +      U_RESPOND  =                    1;
19308     +      END;
19309     +    END;
19310     +  ELSE DO;
19311     +    IF  NOT MISSING(DAYLAST ) AND
19312     +      DAYLAST  <                683.5 THEN DO;
19313     +      IF  NOT MISSING(DEPT25 ) AND
19314     +                         4.5 <= DEPT25  THEN DO;
19315     +        IF  NOT MISSING(DEPT25 ) AND
19316     +                          19.5 <= DEPT25  THEN DO;
19317     +          _NODE_  =                   85;
19318     +          _LEAF_  =                    9;
19319     +          P_RESPOND1  =                 0.21;
19320     +          P_RESPOND0  =                 0.79;
19321     +          Q_RESPOND1  =                 0.21;
19322     +          Q_RESPOND0  =                 0.79;
19323     +          V_RESPOND1  =                  0.2;
19324     +          V_RESPOND0  =                  0.8;
19325     +          I_RESPOND  = '0' ;
19326     +          U_RESPOND  =                    0;
19327     +          END;
19328     +        ELSE DO;
19329     +          IF  NOT MISSING(DEPT03 ) AND
19330     +                             3.5 <= DEPT03  THEN DO;
19331     +            _NODE_  =                  101;
19332     +            _LEAF_  =                    8;
19333     +            P_RESPOND1  =      0.1560975609756;
19334     +            P_RESPOND0  =     0.84390243902439;
19335     +            Q_RESPOND1  =      0.1560975609756;
19336     +            Q_RESPOND0  =     0.84390243902439;
19337     +            V_RESPOND1  =     0.10576923076923;
19338     +            V_RESPOND0  =     0.89423076923076;
19339     +            I_RESPOND  = '0' ;
19340     +            U_RESPOND  =                    0;
19341     +            END;
19342     +          ELSE DO;
19343     +            _NODE_  =                  100;
19344     +            _LEAF_  =                    7;
19345     +            P_RESPOND1  =     0.08833678398895;
19346     +            P_RESPOND0  =     0.91166321601104;
19347     +            Q_RESPOND1  =     0.08833678398895;
19348     +            Q_RESPOND0  =     0.91166321601104;
19349     +            V_RESPOND1  =     0.08879184861717;
19350     +            V_RESPOND0  =     0.91120815138282;
19351     +            I_RESPOND  = '0' ;
19352     +            U_RESPOND  =                    0;
19353     +            END;
19354     +          END;
19355     +        END;
19356     +      ELSE DO;
19357     +        IF  NOT MISSING(TOTORDQ12 ) AND
19358     +                           0.5 <= TOTORDQ12  THEN DO;
19359     +          IF  NOT MISSING(DEPT11 ) AND
19360     +                               4 <= DEPT11  THEN DO;
19361     +            _NODE_  =                   99;
19362     +            _LEAF_  =                    6;
19363     +            P_RESPOND1  =     0.27272727272727;
19364     +            P_RESPOND0  =     0.72727272727272;
19365     +            Q_RESPOND1  =     0.27272727272727;
19366     +            Q_RESPOND0  =     0.72727272727272;
19367     +            V_RESPOND1  =                    0;
19368     +            V_RESPOND0  =                    1;
19369     +            I_RESPOND  = '0' ;
19370     +            U_RESPOND  =                    0;
19371     +            END;
19372     +          ELSE DO;
19373     +            _NODE_  =                   98;
19374     +            _LEAF_  =                    5;
19375     +            P_RESPOND1  =     0.10659898477157;
19376     +            P_RESPOND0  =     0.89340101522842;
19377     +            Q_RESPOND1  =     0.10659898477157;
19378     +            Q_RESPOND0  =     0.89340101522842;
19379     +            V_RESPOND1  =     0.09813084112149;
19380     +            V_RESPOND0  =      0.9018691588785;
19381     +            I_RESPOND  = '0' ;
19382     +            U_RESPOND  =                    0;
19383     +            END;
19384     +          END;
19385     +        ELSE DO;
19386     +          IF  NOT MISSING(DOLLARQ02 ) AND
19387     +                         113.625 <= DOLLARQ02  THEN DO;
19388     +            _NODE_  =                   97;
19389     +            _LEAF_  =                    4;
19390     +            P_RESPOND1  =     0.18181818181818;
19391     +            P_RESPOND0  =     0.81818181818181;
19392     +            Q_RESPOND1  =     0.18181818181818;
19393     +            Q_RESPOND0  =     0.81818181818181;
19394     +            V_RESPOND1  =     0.14285714285714;
19395     +            V_RESPOND0  =     0.85714285714285;
19396     +            I_RESPOND  = '0' ;
19397     +            U_RESPOND  =                    0;
19398     +            END;
19399     +          ELSE DO;
19400     +            _NODE_  =                   96;
19401     +            _LEAF_  =                    3;
19402     +            P_RESPOND1  =     0.05206265166556;
19403     +            P_RESPOND0  =     0.94793734833443;
19404     +            Q_RESPOND1  =     0.05206265166556;
19405     +            Q_RESPOND0  =     0.94793734833443;
19406     +            V_RESPOND1  =     0.05445436724025;
19407     +            V_RESPOND0  =     0.94554563275974;
19408     +            I_RESPOND  = '0' ;
19409     +            U_RESPOND  =                    0;
19410     +            END;
19411     +          END;
19412     +        END;
19413     +      END;
19414     +    ELSE DO;
19415     +      IF  NOT MISSING(DEPT09 ) AND
19416     +                        12.5 <= DEPT09  THEN DO;
19417     +        _NODE_  =                   77;
19418     +        _LEAF_  =                   13;
19419     +        P_RESPOND1  =                0.375;
19420     +        P_RESPOND0  =                0.625;
19421     +        Q_RESPOND1  =                0.375;
19422     +        Q_RESPOND0  =                0.625;
19423     +        V_RESPOND1  =                    0;
19424     +        V_RESPOND0  =                    1;
19425     +        I_RESPOND  = '0' ;
19426     +        U_RESPOND  =                    0;
19427     +        END;
19428     +      ELSE DO;
19429     +        IF  NOT MISSING(TOTORDQ12 ) AND
19430     +                           2.5 <= TOTORDQ12  THEN DO;
19431     +          _NODE_  =                   87;
19432     +          _LEAF_  =                   12;
19433     +          P_RESPOND1  =     0.27272727272727;
19434     +          P_RESPOND0  =     0.72727272727272;
19435     +          Q_RESPOND1  =     0.27272727272727;
19436     +          Q_RESPOND0  =     0.72727272727272;
19437     +          V_RESPOND1  =                    0;
19438     +          V_RESPOND0  =                    1;
19439     +          I_RESPOND  = '0' ;
19440     +          U_RESPOND  =                    0;
19441     +          END;
19442     +        ELSE DO;
19443     +          IF  NOT MISSING(DEPT02 ) AND
19444     +                             7.5 <= DEPT02  THEN DO;
19445     +            _NODE_  =                  103;
19446     +            _LEAF_  =                   11;
19447     +            P_RESPOND1  =     0.26315789473684;
19448     +            P_RESPOND0  =     0.73684210526315;
19449     +            Q_RESPOND1  =     0.26315789473684;
19450     +            Q_RESPOND0  =     0.73684210526315;
19451     +            V_RESPOND1  =                    0;
19452     +            V_RESPOND0  =                    1;
19453     +            I_RESPOND  = '0' ;
19454     +            U_RESPOND  =                    0;
19455     +            END;
19456     +          ELSE DO;
19457     +            _NODE_  =                  102;
19458     +            _LEAF_  =                   10;
19459     +            P_RESPOND1  =      0.0337694483734;
19460     +            P_RESPOND0  =     0.96623055162659;
19461     +            Q_RESPOND1  =      0.0337694483734;
19462     +            Q_RESPOND0  =     0.96623055162659;
19463     +            V_RESPOND1  =     0.03626386735059;
19464     +            V_RESPOND0  =      0.9637361326494;
19465     +            I_RESPOND  = '0' ;
19466     +            U_RESPOND  =                    0;
19467     +            END;
19468     +          END;
19469     +        END;
19470     +      END;
19471     +    END;
19472     +  END;
19473     +
19474     +*****  RESIDUALS R_ *************;
19475     +IF  F_RESPOND  NE '1'
19476     +AND F_RESPOND  NE '0'  THEN DO;
19477     +        R_RESPOND1  = .;
19478     +        R_RESPOND0  = .;
19479     + END;
19480     + ELSE DO;
19481     +       R_RESPOND1  =  -P_RESPOND1 ;
19482     +       R_RESPOND0  =  -P_RESPOND0 ;
19483     +       SELECT( F_RESPOND  );
19484     +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
19485     +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
19486     +       END;
19487     + END;
19488     +
19489     +****************************************************************;
19490     +******          END OF DECISION TREE SCORING CODE         ******;
19491     +****************************************************************;
19492     +
19493     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
19494      run;

NOTE: DATA STEP view saved on file EMWS4.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19495      quit;
19496      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
19498      proc sort data=WORK.EM_USER_REPORT;
19499      by ID VIEW;
19500      run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19501      *------------------------------------------------------------*;
19502      * Tree: Computing metadata for TRAIN data;
19503      *------------------------------------------------------------*;

20155      data WORK.MODELTEMP_INFO;
20156      set EMWS4.Tree_EMINFO;
20157      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
20158      run;

NOTE: There were 0 observations read from the data set EMWS4.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20159      data EMWS4.Tree_EMINFO;
20160      length TARGET KEY $32 DATA $43;
20161      input TARGET KEY DATA $;
20162      cards;

NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20166      run;
20167      data EMWS4.Tree_EMINFO;
20168      set EMWS4.Tree_EMINFO WORK.MODELTEMP_INFO;
20169      run;

NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20170      proc sort data = EMWS4.Tree_EMINFO NOTHREADS;
20171      by TARGET KEY;
20172      run;

NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20173      proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
20174      by TARGET KEY;
20175      run;

NOTE: There were 4 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20176      proc sort data = EMWS4.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
20177      by TARGET KEY;
20178      run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20179      data EMWS4.Tree_EMINFO;
20180      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
20181      by TARGET KEY;
20182      run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20183      proc datasets lib=work nolist;
20184      delete TEMP_INFO SORTEDEMINFO;
20185      run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
20186      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20187      data EMWS4.Tree_EMOUTFIT;
20188      set EMWS4.Tree_EMOUTFIT;
20189      length TargetLabel $200;
20190      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
20191      if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
20192      run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20193      proc sort data=EMWS4.Tree_EMREPORTFIT nothreads;
20194      by TARGET;
20195      run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The data set EMWS4.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20196      %let _EMwarndup = 0;
20197      %let _EMtargetdup =;
20198      %let _EMASEtargetdup =;
20199      data _null_;
20200      set EMWS4.Tree_EMOUTFIT;
20201      if .<_ASE_<0.000001 then do;
20202      call symput('_EMwarndup', '1');
20203      call symput('_EMtargetdup', target);
20204      call symput('_EMASEtargetdup', put(_ASE_, best.));
20205      end;
20206      run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20207      %let EMEXCEPTIONSTRING=;
20208      *------------------------------------------------------------*;
20209      * REPORT: Tree;
20210      *------------------------------------------------------------*;
20211      %let EM_ACTION = REPORT;
20212      %let syscc = 0;
20213      %macro main;
20214      
20215        %if %upcase(&EM_ACTION) = CREATE %then %do;
20216          filename temp catalog 'sashelp.emmodl.tree_create.source';
20217          %include temp;
20218          filename temp;
20219      
20220          %em_tree_create;
20221        %end;
20222      
20223         %else
20224         %if %upcase(&EM_ACTION) = TRAIN %then %do;
20225      
20226             filename temp catalog 'sashelp.emmodl.tree_train.source';
20227             %include temp;
20228             filename temp;
20229             %em_tree_train;
20230         %end;
20231      
20232        %else
20233        %if %upcase(&EM_ACTION) = SCORE %then %do;
20234          filename temp catalog 'sashelp.emmodl.tree_score.source';
20235          %include temp;
20236          filename temp;
20237      
20238          %em_tree_score;
20239      
20240        %end;
20241      
20242        %else
20243        %if %upcase(&EM_ACTION) = REPORT %then %do;
20244      
20245             filename temp catalog 'sashelp.emmodl.tree_report.source';
20246             %include temp;
20247             filename temp;
20248      
20249             %em_tree_report;
20250         %end;
20251      
20252        %else
20253        %if %upcase(&EM_ACTION) = OPENINT %then %do;
20254      
20255             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20256             %include temp;
20257             filename temp;
20258             %EM_TREE_OPENTREEVIEWER;
20259      
20260         %end;
20261      
20262        %else
20263        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
20264      
20265             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20266             %include temp;
20267             filename temp;
20268             %EM_TREE_CLOSETREEVIEWER;
20269      
20270         %end;
20271      
20272      
20273         %doendm:
20274      %mend main;
20275      
20276      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
20278     +%macro em_tree_makePlotDs( multipleTar= );
20280     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20281     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20282     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20283     +  %EM_GETNAME(key=OUTRULES, type=DATA);
20285     +  /* determine if validation statistics will be displayed */
20286     +  %let validflag=N;
20287     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
20288     +    /* determine if validation data exists */
20289     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
20290     +      %let validflag=Y;
20291     +    %end;
20292     +  %end;
20294     +   /* retrieve name of decmeta even in presence of multiple targets */
20295     +   %let decmeta = ;
20296     +   %if &EM_DEC_DECMETA eq %then %do;
20297     +     data _Target;
20298     +       set &em_data_variableset;
20299     +       where ROLE='TARGET' and USE in('D', 'Y');
20300     +       keep NAME;
20301     +     run;
20302     +     proc sort data=_Target;
20303     +       by NAME;
20304     +     run;
20305     +     proc sort data=EM_TARGETDECINFO;
20306     +       by TARGET;
20307     +     run;
20308     +     data _Target;
20309     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
20310     +       by NAME;
20311     +       if _a then do;
20312     +         call symput('decmeta', trim(DECMETA));
20313     +       end;
20314     +     run;
20315     +     proc delete data=_Target;run;
20316     +   %end;
20317     +   %else %let decmeta = &EM_DEC_DECMETA;
20320     +  /* retrieve targetEvent from decmeta */
20321     +  %let targetEvent=;
20322     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20323     +    %if %sysfunc(exist(&DECMETA)) %then %do;
20324     +      data _null_;
20325     +       set &DECMETA(where=(_TYPE_="TARGET"));
20326     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20327     +      run;
20328     +    %end;
20329     +  %end;
20331     +  /* retrieve predicted var for targetEvent from decmeta */
20332     +  %let predTarget=;
20333     +  %let predLvl=;
20334     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20335     +    %if %sysfunc(exist(&DECMETA)) %then %do;
20336     +      data _null_;
20337     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
20338     +       call symput('predTarget', strip(VARIABLE));
20339     +       call symput('predLvl', strip(LEVEL));
20340     +      run;
20341     +    %end;
20342     +  %end;
20343     +  %else %do;
20344     +    %if %sysfunc(exist(&DECMETA)) %then %do;
20345     +      data _null_;
20346     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
20347     +       call symput('predTarget', strip(VARIABLE));
20348     +      run;
20349     +    %end;
20350     +  %end;
20352     +  /* create BelowText value */
20353     +  data belowtext;
20354     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
20355     +    keep node belowtext;
20356     +  run;
20358     +  /* replace belowtext with variable label if it exists */
20359     +  data belowtext2;
20360     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
20361     +    keep node belowtextlbl;
20362     +  run;
20364     +  proc sort data=belowtext; by node; run;
20365     +  proc sort data=belowtext2; by node; run;
20367     +  data belowtext;
20368     +    merge belowtext belowtext2(in=_a);
20369     +    by node;
20370     +    if _a then belowtext=belowtextlbl;
20371     +    keep node belowtext;
20372     +  run;
20374     +  /* create AboveText value */
20375     +  data abovetext;
20376     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
20377     +  run;
20378     +  proc sort data=abovetext; by node numeric_value; run;
20380     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
20381     +  data abovetext;
20382     +    set abovetext(rename=(node=parent));
20383     +    by parent numeric_value;
20384     +    retain abovetext tempstring flag branch origval origchar ;
20385     +    length abovetext $256;
20386     +    length tempstring origchar $64;
20388     +    if STAT in ("INTERVAL", "ORDINAL") then do;
20389     +      if first.parent then do;
20390     +        if missing(character_value) then do;
20391     +          numeric_value = round(numeric_value, &sp_precision);
20392     +          abovetext = "< "||strip(NUMERIC_VALUE);
20393     +          branch = 1;
20394     +          origval = numeric_value;
20395     +          output;
20396     +        end;
20397     +        else do;
20398     +          abovetext = "< "||strip(CHARACTER_VALUE);
20399     +          branch = 1;
20400     +          origchar = character_value;
20401     +          output;
20402     +        end;
20404     +        if first.parent AND last.parent then do;
20405     +          if missing(character_value) then do;
20406     +            numeric_value = round(numeric_value, &sp_precision);
20407     +            branch = branch + 1;
20408     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20409     +            output;
20410     +          end;
20411     +          else do;
20412     +            branch = branch + 1;
20413     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20414     +            output;
20415     +          end;
20416     +        end;
20417     +      end;
20418     +      else if last.parent then do;
20419     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20420     +          if missing(character_value) then do;
20421     +            numeric_value = round(numeric_value, &sp_precision);
20422     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20423     +          end;
20424     +          else do;
20425     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20426     +          end;
20427     +          branch = branch + 1;
20428     +          output;
20430     +          if missing(character_value) then do;
20431     +            numeric_value = round(numeric_value, &sp_precision);
20432     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20433     +          end;
20434     +          else do;
20435     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20436     +          end;
20437     +          branch = branch + 1;
20438     +          output;
20439     +        end;
20440     +        else do;
20441     +          if missing(character_value) then do;
20442     +            numeric_value = round(numeric_value, &sp_precision);
20443     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20444     +          end;
20445     +          else do;
20446     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20447     +          end;
20448     +          branch = branch + 1;
20449     +          output;
20450     +        end;
20451     +      end;
20452     +      else do;
20453     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20454     +          if missing(character_value) then do;
20455     +            numeric_value = round(numeric_value,&sp_precision);
20456     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20457     +            origval = numeric_value;
20458     +          end;
20459     +          else do;
20460     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20461     +            origchar = character_value;
20462     +          end;
20463     +          branch = branch + 1;
20464     +          output;
20466     +        end;
20467     +        else do;
20468     +          if missing(character_value) then do;
20469     +            numeric_value = round(numeric_value, &sp_precision);
20470     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20471     +            origval = numeric_value;
20472     +          end;
20473     +          else do;
20474     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20475     +            origval = character_value;
20476     +          end;
20477     +          branch = branch + 1;
20478     +          output;
20479     +        end;
20480     +      end;
20481     +    end;
20482     +    else do;
20483     +       if first.numeric_value then do;
20484     +         flag = 0;
20485     +         abovetext = strip(CHARACTER_VALUE);
20486     +         branch = numeric_value;
20487     +         if first.numeric_value AND last.numeric_value then do;
20488     +           output;
20489     +         end;
20490     +       end;
20491     +       else if last.numeric_value then do;
20492     +         if flag=0 then do;
20493     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20494     +           length = length(strip(tempstring));
20495     +           if length < 32 then do;
20496     +             abovetext = strip(tempstring);
20497     +           end;
20498     +           else do;
20499     +             abovetext = strip(abovetext)||", ...";
20500     +             flag = 1;
20501     +           end;
20502     +         end;
20503     +         branch = numeric_value;
20504     +         output;
20505     +       end;
20506     +       else do;
20507     +         if flag=0 then do;
20508     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20509     +           length = length(strip(tempstring));
20510     +           if length < 32 then do;
20511     +             abovetext = strip(tempstring);
20512     +           end;
20513     +           else do;
20514     +             abovetext = strip(abovetext)||", ...";
20515     +             flag=1;
20516     +           end;
20517     +         end;
20518     +         branch = numeric_value;
20519     +       end;
20520     +    end;
20521     +    keep parent branch abovetext;
20522     +  run;
20524     +  /* Missing value to abovetext */
20525     +  data tempmissing;
20526     +    set &EM_USER_OUTRULES;
20527     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20528     +    rename node=parent numeric_value=branch character_value=misschar;
20529     +  run;
20532     +  proc sort data=abovetext; by parent branch; run;
20533     +  proc sort data=tempmissing; by parent branch; run;
20534     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20536     +  data tempoutnodes;
20537     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20538     +    by parent branch;
20539     +    length traintotal validtotal 8;
20540     +    retain traintotal validtotal;
20542     +    if _a then do;
20543     +      if ^MISSING(abovetext) then do;
20544     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20545     +      end;
20546     +      else do;
20547     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20548     +      end;
20549     +    end;
20550     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20552     +    if node=1 then do;
20553     +      traintotal = N;
20554     +      validtotal=VN;
20555     +    end;
20557     +    drop role rank stat misschar belowtext;
20558     +  run;
20559     +  proc sort data=tempoutnodes; by node; run;
20560     +  proc sort data=belowtext; by node; run;
20562     +  data tempoutnodes;
20563     +    merge tempoutnodes belowtext;
20564     +    by node;
20566     +  run;
20568     +  /* determine if adjusted counts exists; if so, use these vs true counts */
20569     +  %let adjusted = N;
20570     +  %let npriors = 0;
20571     +  data _null_ ;
20572     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20573     +    if eof then do ;
20574     +      call symput("npriors" , strip(put(_N_,best.))) ;
20575     +    end;
20576     +  run;
20577     +  %if &npriors gt 0 %then %let adjusted=Y;
20580     +  /* create a table with targetUsed and targetLevel columns for each node */
20581     +  data temptarmeta;
20582     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20583     +    %if &multipleTar eq N %then %do;
20584     +      AND USE in ('D', 'Y')
20585     +    %end;
20586     +    ));
20587     +    length TARGET $32;
20588     +    Target=name;
20589     +    keep target level;
20590     +  run;
20592     +  %if &multipleTar eq Y %then %do;
20593     +    data temptargetused;
20594     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20595     +      keep node target;
20596     +    run;
20597     +    proc sort data=temptargetused; by target; run;
20598     +    proc sort data=temptarmeta; by target; run;
20599     +    data temptargetused;
20600     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20601     +      by target;
20602     +      if _a and _b;
20603     +    run;
20604     +  %end;
20605     +  %else %do;
20606     +    data temptargetused;
20607     +      set &EM_USER_OUTSTATS;
20608     +      length target $32 tarlevel $10;
20609     +      target="%EM_TARGET";
20610     +      tarlevel="%EM_TARGET_LEVEL";
20611     +      keep node target tarlevel;
20612     +    run;
20613     +    proc sort data=temptargetused nodupkey; by node; run;
20614     +  %end;
20616     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
20617     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20618     +  proc sort data=temptargetused; by node; run;
20621     +  /* create tables for all interval targets as well as all class targets */
20622     +  data tempinterval tempclass;
20623     +    merge tempoutstats temptargetused( rename=(target=targetused));
20624     +    by node;
20625     +    %if "&multipleTar" eq "Y" %then %do;
20626     +      if ((missing(Target)) OR (target=targetused ));
20627     +    %end;
20629     +    if tarlevel="INTERVAL" then output tempinterval;
20630     +    else output tempclass;
20631     +  run;
20633     +  /* initialize intTarget and classTarget flags */
20634     +  %let em_intNobs =0;
20635     +  %let em_classNobs = 0;
20636     +  %let em_intTarget= N;
20637     +  %let em_classTarget= N;
20639     +  proc sql;
20640     +    reset noprint;
20641     +    select count(*) into :em_intNobs from tempinterval;
20642     +  quit;
20643     +  proc sql;
20644     +    reset noprint;
20645     +    select count(*) into :em_classNobs from tempclass;
20646     +  quit;
20648     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20649     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20651     +  /* retrieve all information for interval targets */
20652     +  %if &em_intTarget eq Y %then %do;
20654     +    /* determine if leaf variable exists */
20655     +    %let dsid=%sysfunc(open(tempinterval,i));
20656     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20657     +    %let rc=%sysfunc(close(&dsid));
20659     +    proc transpose data=tempinterval
20660     +      %if &leafexists %then %do;
20661     +        (drop=leaf)
20662     +      %end;
20663     +      %if &validexist %then %do;
20664     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20665     +      %end;
20666     +      %else %do;
20667     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20668     +      %end;
20669     +      by node;
20670     +      id statname;
20671     +    run;
20672     +    data tempinterval;
20673     +      set tempinterval;
20674     +      if missing(N) then delete;
20675     +    run;
20676     +  %end;
20678     +  /* retrieve all information for class targets */
20679     +  %if &em_classTarget eq Y %then %do;
20680     +    proc sort data=tempclass; by node category; run;
20681     +    %if &validflag eq N %then %do;
20682     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20683     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20684     +    %end;
20685     +    %else %do;
20686     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20687     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20688     +    %end;
20689     +      set tempclass;
20691     +      %if &validflag eq N %then %do;
20692     +        %if "&adjusted" eq "N" %then %do;
20693     +          if statname="N" then output tempn;
20694     +        %end;
20695     +        %else %do;
20696     +          if statname="NPRIORS" then output tempn;
20697     +        %end;
20698     +        else if statname="PREDICTION" then output temppredict;
20699     +        else if statname="PROBABILITY" then output tempprob;
20700     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20701     +        else if statname="ALTERNATIVE LOSS" then output temploss;
20702     +      %end;
20703     +      %else %do;
20704     +        %if "&adjusted" eq "N" %then %do;
20705     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20706     +        %end;
20707     +        %else %do;
20708     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20709     +        %end;
20710     +        else if statname="PREDICTION" then output temppredict;
20711     +        else if statname="PROBABILITY" then output tempprob;
20712     +        else if statname="VALID: PROBABILITY" then output tempvprob;
20713     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20714     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20715     +      %end;
20716     +    run;
20719     +    /* determine if profit/loss exists in tempprofit */
20720     +    %let em_profitflag=0;
20721     +    %let em_lossflag=0;
20722     +    proc sql;
20723     +      reset noprint;
20724     +      select count(*) into :em_profitflag from tempprofit;
20725     +    quit;
20726     +    proc sql;
20727     +      reset noprint;
20728     +      select count(*) into :em_lossflag from temploss;
20729     +    quit;
20731     +    %if &validFlag eq Y %then %do;
20732     +      proc transpose data=tempn
20733     +        %if "&adjusted" eq "N" %then %do;
20734     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20735     +        %end;
20736     +        %else %do;
20737     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20738     +        %end;
20739     +        by node;
20740     +        id statname;
20741     +      run;
20742     +      %if &em_profitflag ne 0 %then %do;
20743     +        proc transpose data=tempprofit out=tempprofit;
20744     +          by node category;
20745     +          id statname ;
20746     +        run;
20747     +      %end;
20748     +      %if &em_lossflag ne 0 %then %do;
20749     +        proc transpose data=temploss out=temploss;
20750     +          by node category;
20751     +          id statname ;
20752     +        run;
20753     +      %end;
20754     +      data tempprob;
20755     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20756     +        by node
20757     +        %if &multipleTar eq Y %then %do;
20758     +          target
20759     +        %end;
20760     +        category;
20761     +      run;
20762     +    %end;
20764     +    /* store percentcorrect value */
20765     +    data temppredict;
20766     +      merge tempprob temppredict(in=_a);
20767     +      by node category;
20768     +      if _a then do;
20769     +        percentCorrect = statvalue;
20770     +        %if &validFlag eq Y %then %do;
20771     +          vpercentCorrect= vstatvalue;
20772     +        %end;
20773     +      end;
20774     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20775     +      %if &validFlag eq Y %then %do;
20776     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20777     +      %end;
20778     +      ;
20779     +      if missing(percentCorrect) then delete;
20780     +      drop target;
20781     +    run;
20783     +    /* build profittext */
20784     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20785     +      data tempprofittext(keep= node profittext profitloss);
20786     +        length profittext $800 profitloss 8.;
20787     +        retain profittext profitloss;
20789     +        merge tempprob
20790     +        %if &em_profitflag ne 0 %then %do;
20791     +          tempprofit
20792     +        %end;
20793     +        %else %if &em_lossflag ne 0 %then %do;
20794     +          temploss
20795     +        %end;
20796     +        ;
20797     +        by node category;
20799     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20800     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20801     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20802     +          %let profittype = ALL;
20803     +        %end;
20805     +        /* create the profitloss variable for nodecolor if selected */
20806     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20808     +        %if "&profittype" eq "ALL" %then %do;
20809     +          if strip(CATEGORY)="&targetEvent" then do;
20810     +            profitloss=statvalue;
20811     +          end;
20812     +          if first.node then do;
20813     +            %if &validFlag eq N %then %do;
20814     +             %if &em_profitflag ne 0 %then %do;
20815     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20816     +             %end;
20817     +             %if &em_lossflag ne 0 %then %do;
20818     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20819     +             %end;
20820     +            %end;
20821     +            %else %do;
20822     +             %if &em_profitflag ne 0 %then %do;
20823     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20823    !+14.&EM_PROPERTY_SPLITPRECISION);
20824     +             %end;
20825     +             %if &em_lossflag ne 0 %then %do;
20826     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20827     +             %end;
20828     +            %end;
20829     +          end;
20830     +          else if last.node then do;
20831     +            %if &validFlag eq N %then %do;
20832     +             %if &em_profitflag ne 0 %then %do;
20833     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20834     +             %end;
20835     +             %if &em_lossflag ne 0 %then %do;
20836     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20837     +             %end;
20838     +             /*if CATEGORY="&targetEvent" then do;
20839     +               profitloss=statvalue;
20840     +             end;*/
20841     +            %end;
20842     +            %else %do;
20843     +             %if &em_profitflag ne 0 %then %do;
20844     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20844    !+14.&EM_PROPERTY_SPLITPRECISION);
20845     +                if CATEGORY="&targetEvent" then do;
20846     +                 profitloss=ALTERNATIVE_PROFIT;
20847     +                end;
20848     +             %end;
20849     +             %if &em_lossflag ne 0 %then %do;
20850     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20850    !+14.&EM_PROPERTY_SPLITPRECISION);
20851     +                if CATEGORY="&targetEvent" then do;
20852     +                  profitloss=ALTERNATIVE_LOSS;
20853     +                end;
20854     +             %end;
20855     +            %end;
20856     +            output;
20857     +          end;
20858     +          else do;
20859     +            %if &validFlag eq N %then %do;
20860     +             %if &em_profitflag ne 0 %then %do;
20861     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20862     +             %end;
20863     +             %if &em_lossflag ne 0 %then %do;
20864     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20865     +             %end;
20866     +            %end;
20867     +            %else %do;
20868     +             %if &em_profitflag ne 0 %then %do;
20869     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20869    !+14.&EM_PROPERTY_SPLITPRECISION);
20870     +             %end;
20871     +             %if &em_lossflag ne 0 %then %do;
20872     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20872    !+14.&EM_PROPERTY_SPLITPRECISION);
20873     +             %end;
20874     +            %end;
20875     +          end;
20876     +        %end;
20877     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20878     +          if strip(CATEGORY) = "&targetevent" then do;
20879     +            %if &validFlag eq N %then %do;
20880     +             %if &em_profitflag ne 0 %then %do;
20881     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20882     +             %end;
20883     +             %if &em_lossflag ne 0 %then %do;
20884     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20885     +             %end;
20886     +             profitloss=statvalue;
20887     +            %end;
20888     +            %else %do;
20889     +             %if &em_profitflag ne 0 %then %do;
20890     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20890    !+14.&EM_PROPERTY_SPLITPRECISION);
20891     +                profitloss=ALTERNATIVE_PROFIT;
20892     +             %end;
20893     +             %if &em_lossflag ne 0 %then %do;
20894     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20895     +                profitloss=ALTERNATIVE_LOSS;
20896     +             %end;
20897     +            %end;
20898     +            output;
20899     +          end;
20900     +        %end;
20901     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20902     +          if strip(CATEGORY) = "&targetevent" then do;
20903     +            %if &validFlag eq N %then %do;
20904     +             profitloss=statvalue;
20905     +            %end;
20906     +            %else %do;
20907     +             %if &em_profitflag ne 0 %then %do;
20908     +                profitloss=ALTERNATIVE_PROFIT;
20909     +             %end;
20910     +             %if &em_lossflag ne 0 %then %do;
20911     +                profitloss=ALTERNATIVE_LOSS;
20912     +             %end;
20913     +            %end;
20914     +            output;
20915     +          end;
20916     +        %end;
20917     +      run;
20918     +    %end;
20920     +    data tempprob(keep= node probtext);
20921     +      length probtext $800;
20922     +      retain probtext;
20923     +      set tempprob ;
20924     +      by node;
20926     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20927     +      %let probtype = &EM_PROPERTY_TARGET;
20928     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20929     +        %let probtype = ALL;
20930     +      %end;
20932     +      %if "&probtype" eq "ALL" %then %do;
20933     +        if first.node then do;
20934     +          %if &validFlag eq N %then %do;
20935     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20936     +          %end;
20937     +          %else %do;
20938     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20939     +          %end;
20940     +        end;
20941     +        else if last.node then do;
20942     +          %if &validFlag eq N %then %do;
20943     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20944     +          %end;
20945     +          %else %do;
20946     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20947     +          %end;
20948     +          output;
20949     +        end;
20950     +        else do;
20951     +          %if &validFlag eq N %then %do;
20952     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20953     +          %end;
20954     +          %else %do;
20955     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20956     +          %end;
20957     +        end;
20958     +      %end;
20959     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20960     +        if strip(CATEGORY) = "&targetevent" then do;
20961     +          %if &validFlag eq N %then %do;
20962     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20963     +          %end;
20964     +          %else %do;
20965     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20966     +          %end;
20967     +          output;
20968     +        end;
20969     +      %end;
20970     +      %else %if "&probtype" eq "NONE" %then %do;
20971     +        if last.node then do;
20972     +          output;
20973     +        end;
20974     +      %end;
20975     +    run;
20976     +  %end;
20978     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20980     +  %let oldexists=0;
20981     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20982     +     data old_tree_plot;
20983     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20984     +        rename nodecolor=oldnodecolor;
20985     +     run;
20987     +     proc sort data=old_tree_plot;
20988     +        by node;
20989     +     run;
20991     +     %let oldexists=1;
20992     +  %end;
20994     +  data &EM_USER_TREE_PLOT;
20995     +    length textall $800;
20996     +    merge tempoutnodes temptargetused
20998     +    %if &em_intTarget eq Y %then %do;
20999     +      tempinterval
21000     +    %end;
21002     +    %if &em_classTarget eq Y %then %do;
21004     +      %if &validFlag eq N %then %do;
21005     +        tempn(rename=(statvalue=N))
21006     +      %end;
21007     +      %else %do;
21008     +        tempn
21009     +      %end;
21011     +      temppredict tempprob
21013     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
21014     +        tempprofittext
21015     +      %end;
21016     +    %end;
21017     +    ;
21018     +    by node;
21020     +    /* build nodetext based on user selection */
21021     +    textall="";
21023     +    %if &em_intTarget eq Y %then %do;
21024     +    if tarlevel="INTERVAL" then do;
21025     +      /* Nodeid */
21026     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
21027     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
21028     +      %end;
21030     +      /* Target identifier if multiple targets are used */
21031     +      %if "&multipleTar" eq "Y" %then %do;
21032     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
21033     +      %end;
21035     +      %if &validFlag eq Y %then %do;
21036     +         /* Column labels displayed in validflag eq Y only */
21037     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
21038     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
21038    !+ noquote ))";
21039     +         %end;
21041     +         /* Average values */
21042     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
21043     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
21044     +         %end;
21046     +         /* RASE */
21047     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
21048     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
21049     +         %end;
21051     +         /* Count */
21052     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21053     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
21054     +         %end;
21055     +      %end;
21056     +      %else %do;
21057     +         /* Average values */
21058     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
21059     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
21060     +         %end;
21062     +         /* RASE */
21063     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
21064     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
21065     +         %end;
21067     +         /* Count */
21068     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21069     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
21070     +         %end;
21071     +      %end;
21073     +      /* nodecolor */
21074     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
21075     +        nodecolor=PREDICTION;
21076     +      %end;
21077     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
21078     +        nodecolor=RASE;
21079     +      %end;
21080     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
21081     +        nodecolor=1;
21082     +      %end;
21084     +    end;
21085     +    %end;
21086     +    %if &em_classTarget eq Y %then %do;
21087     +    if tarlevel^="INTERVAL" then  do;
21089     +      /* Nodeid */
21090     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
21091     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
21092     +      %end;
21093     +      /* Target identifier if multiple targets are used */
21094     +      %if "&multipleTar" eq "Y" %then %do;
21095     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
21096     +      %end;
21098     +      /* Predicted values */
21099     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
21100     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
21101     +      %end;
21103     +      /* Column labels displayed in validflag eq Y only */
21104     +      %if "&ValidFlag" eq "Y" %then %do;
21105     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
21106     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
21106    !+ noquote ))";
21107     +        %end;
21108     +      %end;
21110     +      /* Target Values */
21111     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
21112     +        textall=strip(textall)||"0A"x||strip(probtext);
21113     +      %end;
21115     +      /* include profit or loss for all target levels */
21116     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
21117     +        textall=strip(textall)||"0A"x||strip(profittext);
21118     +      %end;
21120     +      %if &validFlag eq N %then %do;
21121     +        /* Percent Correct */
21122     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
21123     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
21124     +        %end;
21126     +         /* Count */
21127     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21128     +          %if "&adjusted" eq "N" %then %do;
21129     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
21130     +          %end;
21131     +          %else %do;
21132     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
21133     +          %end;
21134     +         %end;
21135     +      %end;
21136     +      %else %do;
21137     +        /* Percent Correct */
21138     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
21139     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
21140     +        %end;
21142     +         /* Count */
21143     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
21144     +          %if "&adjusted" eq "N" %then %do;
21145     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
21146     +          %end;
21147     +          %else %do;
21148     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
21149     +          %end;
21150     +         %end;
21151     +      %end;
21153     +      /* nodecolor */
21154     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
21155     +       %if &multipleTar ne Y %then %do;
21156     +        nodecolor=&predTarget;
21157     +       %end;
21158     +       %else %do;
21159     +         nodecolor=percentcorrect;
21160     +       %end;
21161     +      %end;
21162     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
21163     +        nodecolor=percentcorrect;
21164     +      %end;
21165     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
21166     +        nodecolor=1;
21167     +      %end;
21168     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
21169     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
21170     +          nodecolor=percentcorrect;
21171     +        %end;
21172     +        %else %do;
21173     +          nodecolor=profitloss;
21174     +        %end;
21175     +      %end;
21177     +    end;
21178     +    %end;
21179     +    %if &em_intTarget eq Y %then %do;
21180     +     drop  PREDICTION  TARGET TARLEVEL
21181     +     %if &ValidFlag eq Y %then %do;
21182     +         VPREDICTION
21183     +     %end;
21184     +     ;
21185     +    %end;
21186     +    %if &em_classTarget eq Y %then %do;
21187     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
21188     +     %if &ValidFlag eq Y %then %do;
21189     +         VSTATVALUE
21190     +     %end;
21191     +     ;
21192     +    %end;
21194     +  run;
21196     +  /* add leaf index information to plotds - based on primary target only*/
21197     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21198     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
21199     +      set &EM_USER_OUTSTATS;
21200     +      if ((statname="PROBABILITY"
21201     +      %if &validexist %then %do;
21202     +       or statname="VALID: PROBABILITY"
21203     +      %end;
21204     +      ) AND (CATEGORY="&TARGETEVENT")
21205     +      %if "&multipleTar" eq "Y" %then %do;
21206     +        AND (Target="%EM_TARGET")
21207     +      %end;
21208     +      );
21209     +    run;
21211     +    %if &validexist %then %do;
21212     +      proc sort data=tempprob; by node; run;
21213     +      %let vpredTarget = V%substr(&predTarget, 2);
21214     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
21215     +         by node;
21216     +         id statname;
21217     +      run;
21218     +    %end;
21219     +  %end;
21220     +  %else %do;
21221     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
21222     +      set &EM_USER_OUTSTATS;
21223     +      if ((statname="PREDICTION"
21224     +      %if &validexist %then %do;
21225     +       or statname="VALID: PREDICTION"
21226     +      %end;
21227     +      )
21228     +      %if "&multipleTar" eq "Y" %then %do;
21229     +        AND (Target="%EM_TARGET")
21230     +      %end;
21231     +      );
21232     +    run;
21233     +    %if &validexist %then %do;
21234     +      proc sort data=tempprob; by node; run;
21235     +      %let vpredTarget = V%substr(&predTarget, 2);
21236     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
21237     +         by node;
21238     +         id statname;
21239     +      run;
21240     +    %end;
21241     +  %end;
21243     +  proc sort data=tempprob; by node; run;
21244     +  data tempoutnodes;
21245     +    merge tempoutnodes tempprob;
21246     +    by node;
21247     +  run;
21249     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
21250     +  data tempnodes;
21251     +    retain traintotal validtotal;
21252     +    set tempnodes(where=(leaf ne . ));
21253     +    tprob=round(&predTarget, .01);
21254     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21255     +      percevent_train=round(tprob*100, .01);
21256     +    %end;
21257     +    %else %do;
21258     +      percevent_train=tprob;
21259     +    %end;
21261     +    perc_train=round((n/traintotal)*100, 0.01);
21262     +    /* leafwidth already has a *10 multiplier */
21263     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
21265     +    %if &validexist %then %do;
21266     +      %let vpredTarget = V%substr(&predTarget,2);
21267     +      vprob=round(&vpredTarget, .01);
21268     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21269     +        percevent_valid=round(vprob*100, .01);
21270     +      %end;
21271     +      %else %do;
21272     +        percevent_valid=vprob;
21273     +      %end;
21274     +      perc_valid=round((vn/validtotal)*100, .01);
21275     +    %end;
21277     +    index=_N_;
21278     +    keep node index tprob perc_train percevent_train
21279     +    %if &validexist %then %do;
21280     +        vprob percevent_valid perc_valid
21281     +    %end;
21282     +    ;
21283     +  run;
21284     +  proc sort data=tempnodes; by node; run;
21285     +  data &EM_USER_TREE_PLOT;
21286     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
21287     +    by node;
21288     +    if missing(node) then delete;
21289     +    %if &oldexists %then %do;
21290     +      if missing(nodecolor) then nodecolor=oldnodecolor;
21291     +      drop oldnodecolor;
21292     +    %end;
21293     +    abovetext = compbl(abovetext);
21295     +    /* add variable labels */
21296     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
21297     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
21298     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
21299     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
21300     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
21301     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
21303     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21304     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
21305     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
21306     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21307     +          %end;
21308     +          %else %do;
21309     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
21310     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
21311     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21312     +          %end;
21313     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
21315     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
21316     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
21317     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21318     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
21319     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21320     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
21321     +          %end;
21322     +          %else %do;
21323     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
21324     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21325     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
21326     +          %end;
21327     +    ;
21328     +  run;
21330     +  /* delete temporary tables */
21331     +  proc datasets lib=work nolist;
21332     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
21333     +  run;
21335     +%mend em_tree_makePlotDs;
21339     +%macro em_tree_report;
21341     +   /* report properties */
21342     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
21343     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
21344     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
21345     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
21346     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
21347     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
21348     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
21349     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
21350     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
21351     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
21352     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
21353     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
21354     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
21356     +   %let validexist=0;
21357     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
21358     +     %let validexist=1;
21359     +   %end;
21361     +   /* determine if multiple targets will be processed */
21362     +   %let em_tree_multipleTargets=N;
21363     +   %let em_tree_numTarget=1;
21364     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
21365     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
21366     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
21367     +         %let em_tree_multipleTargets=N;
21368     +      %end;
21369     +      %else %do;
21370     +        data _null_;
21371     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
21372     +          if eof then
21373     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
21374     +        run;
21376     +        %if &em_tree_numTarget gt 1 %then %do;
21377     +           %let em_tree_multipleTargets=Y;
21378     +        %end;
21379     +     %end;
21380     +   %end;
21382     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
21384     +   /* variable importance */
21385     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
21386     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
21388     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
21389     +     /* and the columns may not be generated                                                                                 */
21390     +     %let em_tree_cvexists=;
21391     +     %let em_tree_surrexists=.;
21392     +     data _null_;
21393     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
21394     +       if eof then do ;
21395     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
21396     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
21397     +       end;
21398     +     run;
21400     +     data &EM_USER_OUTIMPORT;
21401     +         set &EM_USER_OUTIMPORT;
21402     +         /* format columns based on Precison value specified */
21403     +         format importance 15.&EM_PROPERTY_PRECISION
21404     +              %if &validexist %then %do;
21405     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
21406     +              %end;
21407     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
21408     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
21409     +              %end;
21410     +         ;
21411     +     run;
21413     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
21414     +     proc print data=&EM_USER_OUTIMPORT
21415     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
21416     +          (where=((nrules>0) OR (nsurrogates>0)))
21417     +        %end;
21418     +        %else %do;
21419     +           (where=(nrules>0))
21420     +        %end;
21421     +        label noobs
21422     +        ;
21423     +     run;
21424     +     title10;
21426     +   %end;
21428     +   /* Sequence */
21429     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
21430     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
21431     +   data _null_ ;
21432     +      set &EM_USER_outseq (obs=2) end=eof ;
21433     +      if eof then do ;
21434     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
21435     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
21436     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
21437     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
21438     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
21439     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
21440     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
21441     +      end;
21442     +    run;
21444     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
21445     +      data &EM_USER_OUTSEQ;
21446     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
21447     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
21448     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21449     +           _XMISC_=_VMISC_
21450     +        %end;
21451     +        %if "&em_tree_aprof" ne "."  %then %do;
21452     +           _XAPROF_=_VAPROF_
21453     +           _XPROF_ = _VPROF_
21454     +        %end;
21455     +        %if "&em_tree_aloss" ne "."  %then %do;
21456     +           _XALOSS_=_VALOSS_
21457     +        %end;
21458     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
21459     +           _XPASE_ = _VPASE_
21460     +           _XPMISC_ = _VPMISC_
21461     +        %end;
21463     +        ));
21464     +     %end;
21465     +     %else %do;
21466     +        set &EM_USER_OUTSEQ;
21467     +     %end;
21469     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
21470     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21471     +            _MISC_   15.&EM_PROPERTY_PRECISION
21472     +         %end;
21473     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
21474     +            _PASE_  15.&EM_PROPERTY_PRECISION
21475     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
21476     +         %end;
21477     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
21478     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
21479     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21480     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21481     +            %end;
21482     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
21483     +              _VPASE_  15.&EM_PROPERTY_PRECISION
21484     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
21485     +            %end;
21486     +         %end;
21487     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
21488     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
21489     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21490     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21491     +            %end;
21492     +         %end;
21493     +         %if "&em_tree_seq" ne "." %then %do;
21494     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
21495     +         %end;
21496     +         %if "&em_tree_vseq" ne "." %then %do;
21497     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
21498     +         %end;
21499     +         %if "&em_tree_aprof" ne "." %then %do;
21500     +           _APROF_ 15.&EM_PROPERTY_PRECISION
21501     +           _PROF_ 15.&EM_PROPERTY_PRECISION
21502     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21503     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
21504     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
21505     +           %end;
21506     +         %end;
21507     +         %else %if "&em_tree_aloss" ne "." %then %do;
21508     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21509     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21510     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21511     +           %end;
21512     +         %end;
21513     +      ;
21514     +    run;
21515     +   %end;
21517     +   /* Observation Based Importance */
21518     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21520     +      /* need to check for 0 obs */
21521     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21522     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21523     +      %let rc=%sysfunc(close(&dsid));
21525     +      %if &onobs %then %do;
21526     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21527     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21529     +         data &EM_USER_OUTOBSIMP;
21530     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21531     +           if _a;
21532     +           by _INPUT1_;
21533     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21534     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21535     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21536     +                   %end;
21537     +                   ;
21538     +         run;
21539     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21540     +      %end;
21541     +   %end;
21543     +  %end;
21545     +  /* create dataset to support tree diagram and icicle plot */
21546     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21547     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21549     +  /* display tree diagram */
21550     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21551     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21553     +  /* display icicle diagram */
21554     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21555     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21557     +  /* Leaf Statistics Plot */
21558     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21560     +  /* print leaf information to output window */
21561     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21563     +     proc sort data=&EM_USER_TREE_PLOT out=t;
21564     +       by descending N;
21565     +     run;
21567     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21568     +     %local vn;
21569     +     data _null_;
21570     +       set t (obs=2) end=eof;
21571     +       if eof then do;
21572     +         call symput("vn", strip(put(vn, best.)));
21573     +       end;
21574     +     run;
21576     +     data t;
21577     +       set t;
21578     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21579     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21580     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21581     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21582     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21583     +       %end;
21584     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21585     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21586     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21587     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21588     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21589     +          %end;
21590     +       %end;
21591     +       ;
21592     +     run;
21594     +     /* determine if rase is found in t */
21595     +    %let dsid=%sysfunc(open(t,i));
21596     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21597     +    %let rc=%sysfunc(close(&dsid));
21599     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21600     +     proc print data=t noobs label;
21601     +       where tprob ne .;
21602     +       var node depth N tprob
21603     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21604     +         %if "&vn" ne "." %then %do;
21605     +           VN
21606     +         %end;
21607     +         vprob
21608     +       %end;
21609     +       %if &raseexists %then %do;
21610     +            RASE
21611     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21612     +              VRASE
21613     +            %end;
21614     +       %end;
21615     +       ;
21616     +     run;
21617     +     title10;
21618     +  %end;
21620     +  /* create plots that are done during training of node */
21621     +  /* display iterative plot, including reference line */
21622     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21623     +   /* %if &nleaves eq  %then %do; */
21624     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21625     +      data _null_;
21626     +        set &EM_USER_OUTTOPOLOGY end=eof;
21627     +        if eof then do;
21628     +          call symput('nleaves', LEAF);
21629     +        end;
21630     +      run;
21631     +   /* %end; */
21633     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21634     +    /*%EM_REPORT(view=1, Y=_ASE_); */
21635     +  %end;
21637     +  /* display leaf statistics */
21638     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21640     +  /* stats by node if multiple targets = Y */
21641     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21642     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21643     +    data &EM_USER_OUTSTATS;
21644     +      set &EM_USER_OUTSTATS;
21646     +     * if STATNAME="TARGET" then delete;
21647     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21648     +      drop leaf;
21649     +    run;
21650     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21652     +  %end;
21653     +  %else %do;
21654     +    /* add outstats and outdescribe to spk but not results */
21655     +    %EM_REPORT(viewtype=, key=OUTSTATS);
21656     +  %end;
21658     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 90 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 17 observations read from the data set EMWS4.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: The data set EMWS4.TREE_OUTSEQ has 25 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 24 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 24 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 24 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 24 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 48 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 631 observations read from the data set EMWS4.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 24 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 48 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 48 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 24 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 49 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 48 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 24 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 49 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 49 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 24 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 24 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 24 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 49 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS4.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 343 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 343 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 343 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 294 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 49 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 343 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 343 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 343 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 49 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 343 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 343 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 343 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 343 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 98 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 49 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 98 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 98 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 49 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPPROB.
NOTE: There were 98 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 98 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 98 observations read from the data set WORK.TEMPPROB.
NOTE: There were 49 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 49 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 49 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 49 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1167:196   
NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 49 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 49 observations read from the data set WORK.TEMPN.
NOTE: There were 49 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 49 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 49 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 343 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 98 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 98 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 49 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 49 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 49 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 49 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 49 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 25 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 25 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: There were 25 observations read from the data set WORK.TEMPNODES.
NOTE: There were 7 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 55 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 55 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 55 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 55 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 49 observations read from the data set EMWS4.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

21659      
21660      *------------------------------------------------------------*;
21661      * End REPORT: Tree;
21662      *------------------------------------------------------------*;

21663      /* Reset EM Options */
21664      options formchar="|----|+|---+=|-/\<>*";
21665      options nocenter ls=256 ps=10000;
21666      goptions reset=all device=GIF NODISPLAY;
21667      proc sort data=WORK.EM_USER_REPORT;
21668      by ID VIEW;
21669      run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21670      proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
21671      by NAME;
21672      run;

NOTE: There were 99 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21673      proc sort data=EMWS4.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21674      by NAME;
21675      run;

NOTE: There were 99 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21676      data WORK.ASSESS_META;
21677      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21678      by NAME;
21679      run;

NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21680      data EM_temp_assessMeta;
21681      set EMWS4.Tree_CMeta_TRAIN;
21682      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21683      run;

NOTE: There were 12 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21684      data EM_temp_assessdata;
21685      set EMWS4.Tree_TRAIN(keep=
21686      F_RESPOND
21687      I_RESPOND
21688      P_RESPOND0
21689      P_RESPOND1
21690      Q_RESPOND0
21691      Q_RESPOND1
21692      R_RESPOND0
21693      R_RESPOND1
21694      U_RESPOND
21695      V_RESPOND0
21696      V_RESPOND1
21697      _WARN_
21698      RESPOND
21699      );
21700      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.09 seconds
      
















25982      data EM_temp_assessMeta;
25983      set EMWS4.Tree_CMeta_TRAIN;
25984      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25985      run;

NOTE: There were 12 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

25986      data EM_temp_assessdata;
25987      set EMWS4.Tree_VALIDATE(keep=
25988      F_RESPOND
25989      I_RESPOND
25990      P_RESPOND0
25991      P_RESPOND1
25992      Q_RESPOND0
25993      Q_RESPOND1
25994      R_RESPOND0
25995      R_RESPOND1
25996      U_RESPOND
25997      V_RESPOND0
25998      V_RESPOND1
25999      _WARN_
26000      RESPOND
26001      );
26002      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 16121 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS4.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
















30293      %let _cn = %sysfunc(getoption(CENTER));
30294      options nocenter;
30295      proc print data=EMWS4.Tree_EMREPORTFIT noobs label;
30296      var STAT LABEL TRAIN
30297      VALIDATE
30298      ;
30299      by TARGET TARGETLABEL;
30300      title9 ' ';
30301      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
30302      run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30303      title10;
30304      options &_cn;
30305      proc sort data=EMWS4.Tree_EMCLASSIFICATION nothreads;
30306      by DATAROLE TARGET TARGETLABEL;
30307      run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30308      %let _cn = %sysfunc(getoption(CENTER));
30309      options nocenter;
30310      proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
30311      var from into pct_row pct_col count percent
30312      ;
30313      by DATAROLE TARGET TARGETLABEL;
30314      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
30315      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
30316      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
30317      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
30318      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
30319      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
30320      where _TYPE_='PREDICTION';
30321      title9 ' ';
30322      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
30323      run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30324      title9;
30325      title10;
30326      options &_cn;
30327      %let _cn = %sysfunc(getoption(CENTER));
30328      options nocenter;
30329      data EMWS4.Tree_EMEVENTREPORT;
30330      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
30331      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
30331    ! FALSEEVENT
30332      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
30333         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
30334      FALSEEVENT=0;
30335      FALSENEVENT=0;
30336      TRUEEVENT=0;
30337      TRUENEVENT=0;
30338      set EMWS4.Tree_EMEVENTREPORT;
30339      run;

NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30340      proc print data=EMWS4.Tree_EMEVENTREPORT noobs label;
30341      title9 ' ';
30342      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
30343      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
30344      run;

NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30345      title10;
30346      options &_cn;
30347      proc datasets library=EMWS4 nolist;
30348      modify Tree_EMRANK;
30349      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
30350      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30351      run;

NOTE: MODIFY was successful for EMWS4.TREE_EMRANK.DATA.
30352      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30353      %let _cn = %sysfunc(getoption(CENTER));
30354      options nocenter;
30355      proc print data=EMWS4.Tree_EMRANK label noobs;
30356      var
30357      decile gain lift liftc resp respc N _meanP_;
30358      by
30359      notsorted DATAROLE
30360      notsorted TARGET
30361      notsorted TARGETLABEL
30362      ;
30363      title9 ' ';
30364      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
30365      run;

NOTE: There were 40 observations read from the data set EMWS4.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

30366      title10;
30367      options &_cn;
30368      proc datasets library=EMWS4 nolist;
30369      modify Tree_EMSCOREDIST;
30370      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
30371      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30372      run;

NOTE: MODIFY was successful for EMWS4.TREE_EMSCOREDIST.DATA.
30373      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

31197      proc printto;
31198      run;

