*------------------------------------------------------------*
* Training Log
Date:                April 13, 2022
Time:                17:42:16
*------------------------------------------------------------*
15226  proc freq data=EMWS4.Tree_VariableSet noprint;
15227  table ROLE*LEVEL/out=WORK.TreeMETA;
15228  run;

NOTE: There were 99 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

15229  proc print data=WORK.TreeMETA label noobs;
15230  var ROLE LEVEL COUNT;
15231  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15232  title9 ' ';
15233  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15234  run;

NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15235  title10;

15236  %let EMNORLEN = %DMNORLEN;
EMWS4.Part_TRAIN EMWS4.Part_TRAIN 
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN 
EMWS4.Part_TRAIN EMWS4.Part_TRAIN 
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
15265  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15266  length ORDER $20;
15267  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15268     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15269  set EMWS4.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
15270  NumLevels=2;
15271  select(upcase(ORDER));
15272  when('DESC') ORDER = 'Descending';
15273  when('ASC') ORDER = 'Ascending';
15274  when('FMTDESC') ORDER = 'Formatted Descending';
15275  when('FMTASC') ORDER = 'Formatted Ascending';
15276  otherwise ORDER = 'Descending';
15277  end;
15278  output;
15279  run;

NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15280  title9 ' ';
15281  proc print data=WORK.Tree_EVENT noobs label;
15282  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15283  title9 ' ';
15284  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15285  run;

NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

15286  title10;

"No decisions defined for target "RESPOND"." 
15287  proc print data = EMWS4.Ids_RESPOND_DM noobs label;
15288  var _type_ variable label;
15289  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15290  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15291  title9 ' ';
15292  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15293  run;

NOTE: There were 7 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15294  title10;

15295  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15841  *------------------------------------------------------------*;
15842  * Tree: Generation of macros and macro variables;
15843  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15844  *------------------------------------------------------------*;

15845  %let EMEXCEPTIONSTRING=;
15846  *------------------------------------------------------------*;
15847  * TRAIN: Tree;
15848  *------------------------------------------------------------*;
15849  %let EM_ACTION = TRAIN;
15850  %let syscc = 0;
15851  %macro main;
15852  
15853    %if %upcase(&EM_ACTION) = CREATE %then %do;
15854      filename temp catalog 'sashelp.emmodl.tree_create.source';
15855      %include temp;
15856      filename temp;
15857  
15858      %em_tree_create;
15859    %end;
15860  
15861     %else
15862     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15863  
15864         filename temp catalog 'sashelp.emmodl.tree_train.source';
15865         %include temp;
15866         filename temp;
15867         %em_tree_train;
15868     %end;
15869  
15870    %else
15871    %if %upcase(&EM_ACTION) = SCORE %then %do;
15872      filename temp catalog 'sashelp.emmodl.tree_score.source';
15873      %include temp;
15874      filename temp;
15875  
15876      %em_tree_score;
15877  
15878    %end;
15879  
15880    %else
15881    %if %upcase(&EM_ACTION) = REPORT %then %do;
15882  
15883         filename temp catalog 'sashelp.emmodl.tree_report.source';
15884         %include temp;
15885         filename temp;
15886  
15887         %em_tree_report;
15888     %end;
15889  
15890    %else
15891    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15892  
15893         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15894         %include temp;
15895         filename temp;
15896         %EM_TREE_OPENTREEVIEWER;
15897  
15898     %end;
15899  
15900    %else
15901    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15902  
15903         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15904         %include temp;
15905         filename temp;
15906         %EM_TREE_CLOSETREEVIEWER;
15907  
15908     %end;
15909  
15910  
15911     %doendm:
15912  %mend main;
15913  
15914  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15916 +%macro em_tree_train;
15918 +   %if &EM_IMPORT_DATA eq %then %do;
15919 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15920 +       %put &em_codebar;
15921 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15922 +       %put &errormsg;
15923 +       %put &em_codebar;
15924 +       %goto doendm;
15925 +   %end;
15926 +   %else
15927 +       %let EMEXCEPTIONSTRING =;
15929 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15930 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15931 +        %put &em_codebar;
15932 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15933 +        %put &errormsg;
15934 +        %put &em_codebar;
15935 +        %goto doendm;
15936 +   %end;
15938 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15939 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15940 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15941 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15942 +        %put &em_codebar;
15943 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15944 +        %put &errormsg;
15945 +        %put &em_codebar;
15946 +        %goto doendm;
15947 +   %end;
15949 +   /* Initialize property macro variables */
15950 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15951 +   %include temp;
15952 +   filename temp;
15954 +   %EM_SetProperties;
15956 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15957 +   %EM_GETNAME(key=EMTREE, type=DATA);
15958 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15959 +     /* if import eq Y and no importtable defined, throw an exception */
15960 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15961 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15962 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15963 +         %put &em_codebar;
15964 +         %put &errmsg;
15965 +         %put &em_codebar;
15966 +         %goto doendm;
15967 +      %end;
15968 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15969 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15970 +         %put &em_codebar;
15971 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15972 +         %put &errormsg;
15973 +         %put &em_codebar;
15974 +         %goto doendm;
15975 +      %end;
15976 +      %else %do;
15977 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15978 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15979 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15980 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15981 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15982 +         %let dsid = %sysfunc(close(&dsid));
15983 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15984 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15985 +            %put &em_codebar;
15986 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15987 +            %put &errormsg;
15988 +            %put &em_codebar;
15989 +            %goto doendm;
15990 +         %end;
15991 +      %end;
15992 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15993 +         proc delete data=&EM_USER_EMTREE;
15994 +         run;
15995 +      %end;
15996 +   %end;
15997 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15998 +      proc delete data=&EM_USER_EMTREE;
15999 +      run;
16000 +   %end;
16002 +   /* load tree macros */
16003 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16004 +   %include temp;
16005 +   filename temp;
16007 +   /* data sets */
16008 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16009 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16010 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16012 +   /* files */
16013 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16015 +   /* check actual num of target levels */
16016 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16017 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16018 +                              nLevel=_nTargetLevel );
16019 +      %if &_nTargetLevel  > 2 %then %do;
16020 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16021 +        %put &em_codebar;
16022 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16023 +        %put &errormsg;
16024 +        %put &em_codebar;
16025 +        %goto doendm;
16026 +      %end;
16027 +   %end;
16029 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16030 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16031 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16032 +        %let costflag=0;
16033 +        data _null_;
16034 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16035 +          if eof then call symput("costflag", _N_);
16036 +        run;
16037 +        %if &costflag gt 0 %then %do;
16038 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16039 +          %put &em_codebar;
16040 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16041 +          %put &errormsg;
16042 +          %put &em_codebar;
16043 +          %goto doendm;
16044 +       %end;
16045 +     %end;
16046 +   %end;
16048 +   /* determine if multiple targets will be processed */
16049 +   %let em_tree_multipleTargets=N;
16050 +   %let em_tree_numTarget = 1;
16051 +   %let em_tree_targetVars=;
16053 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16054 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16055 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16056 +         %let em_tree_multipleTargets=N;
16057 +      %end;
16058 +      %else %do;
16059 +         /* create macro array of targets  */
16060 +         data _null_;
16061 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16062 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16063 +           if eof then
16064 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16065 +        run;
16067 +        %if &em_tree_numTarget gt 1 %then %do;
16068 +           %let em_tree_multipleTargets=Y;
16069 +        %end;
16070 +      %end;
16071 +   %end;
16073 +   /* create view of only necessary variable for performance reasons */
16074 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16075 +   data &tempData / view=&tempData;
16076 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16077 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16078 +       %EM_TARGET
16079 +     %end;
16080 +     %else %do;
16081 +       %if &em_tree_numTarget ne 0 %then %do;
16082 +         %do i=1 %to &em_tree_numTarget;
16083 +            &&em_tree_targetVars&i
16084 +         %end;
16085 +       %end;
16086 +     %end;
16087 +     );
16088 +   run;
16090 +   /* run Tree procedure */
16091 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16093 +   /* Check return code and throw exception if error is detected */
16094 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16095 +   %if &syserr %then %do;
16096 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16097 +     %goto doendm;
16098 +   %end;
16100 +   /* add decision score code if multiple targets are processed */
16101 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16102 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16103 +   %end;
16105 +   /* create outfit dataset if multiple score statements have been executed */
16106 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16108 +   /* create English Rules */
16109 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16110 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16111 +       %em_tree_makeEnglishRules;
16113 +       /* English Rules */
16114 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16116 +     %end;
16117 +   filename x;
16119 +   %doendm:
16120 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16121 +%macro EM_SetProperties;
16123 +   /* train properties */
16124 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16166 +   /* properties for interactive sample */
16167 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16172 +   /* report properties */
16173 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16187 +   /* score properties */
16188 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16191 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16193 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16194 +  %global &nLevel;
16195 +  proc dmdb batch data=&indata
16196 +    classout=_tmp_dmdbout;
16197 +    class &target;
16198 +  run;
16199 +  data _tmp_dmdbout;
16200 +    set _tmp_dmdbout;
16201 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16202 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16203 +  run;
16204 +  data _null_;
16205 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16206 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16207 +    %let dsid = %sysfunc(close(&dsid));
16208 +     call symput("&nLevel", put(&_obs, Best12.));
16209 +  run;
16211 +  proc datasets lib=work nolist;
16212 +     delete _tmp_dmdbout;
16213 +  run;
16214 +  quit;
16215 +%Mend EM_CheckBinaryTargetLevel;
16218 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16220 +  /* determine the number of obs in training data */
16221 +  proc sql;
16222 +    reset noprint;
16223 +    select count(*) into :em_nobs from &indata;
16224 +  quit;
16226 +  /* determine the number of input variables */
16227 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16228 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16230 +  /* retrieve targetEvent from decmeta */
16231 +  %let targetEvent=;
16232 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16233 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16234 +      data _null_;
16235 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16236 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16237 +      run;
16238 +    %end;
16239 +  %end;
16241 +  /* create targetTable if multipleTar eq Y */
16242 +  data temptarget;
16243 +    set &EM_DATA_VARIABLESET;
16244 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16245 +  run;
16247 + /* data sets */
16248 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16249 + %EM_GETNAME(key=EMTREE,        type=DATA);
16250 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16251 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16252 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16253 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16254 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16255 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16256 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16257 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16259 + /* files */
16260 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16261 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16263 + /* turn on pmml if requested */
16264 + %let nnpmml=0;
16265 + %if %symexist(EM_PMML) %then %do;
16266 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16267 +       %let nnpmml=1;
16269 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16270 +   %end;
16271 +%end;
16273 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16275 +%if &nnpmml or &numClassTarget %then %do;
16277 +    /* create dmdb needed for pmml generation */
16278 +    %let tree_maxlevel = 512;
16279 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16280 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16281 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16282 +      %end;
16283 +    %end;
16284 +    %if &tree_maxlevel gt 0 %then %do;
16285 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16286 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16287 +    %end;
16289 +    %let targetOrderString =;
16290 +    %let targetString = ;
16291 +    data _null_;
16292 +       length orderString nameString $10000;
16293 +       retain orderString nameString;
16294 +       set &em_data_variableset end=eof;
16295 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16296 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16297 +       %end;
16298 +       %else %do;
16299 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16300 +       %end;          select(order);
16301 +         when('')        order ='DESC';
16302 +         when('FMTASC')  order='ASCFMT';
16303 +         when('FMTDESC') order='DESFMT';
16304 +         otherwise;
16305 +       end;
16306 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16307 +       nameString = trim(nameString)!!' '!!trim(NAME);
16309 +       if eof then do;
16310 +          call symput('targetOrderString', trim(orderString));
16311 +          call symput('targetString', trim(nameString));
16312 +       end;
16313 +    run;
16315 +    %let arborkluge= "work._treeDMDB";
16317 +    proc dmdb batch data=&indata
16318 +    %if &nnpmml %then %do;
16319 +        PMML
16320 +    %end;
16321 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16323 +      %if &nnpmml %then %do;
16324 +           %if "%EM_ID" ne "" %then %do;
16325 +             id %EM_ID;
16326 +           %end;
16327 +           %if &EM_NUM_CLASS gt 0 %then %do;
16328 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16329 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16330 +                  &targetOrderString;
16331 +           %end;
16332 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16333 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16334 +           %end;
16335 +           target &targetString %EM_INTERVAL_TARGET;
16336 +           %if "%EM_FREQ" ne "" %then %do;
16337 +             freq %EM_FREQ;
16338 +           %end;
16339 +      %end;
16340 +      %else %do;
16341 +         class  &targetOrderString;
16342 +         target &targetString %EM_INTERVAL_TARGET;
16343 +      %end;
16344 +    run;
16345 +    quit;
16347 +    proc datasets lib=work nolist;
16348 +       delete classout varout;
16349 +    run;
16350 +    quit;
16352 + %end;
16355 + /* run Arbor procedure */
16356 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16357 +  proc arbor data=&INDATA
16359 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16360 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16361 +  %end;
16363 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16364 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16365 +  %end;
16367 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16368 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16369 +  %end;
16371 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16372 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16373 +  %end;
16375 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16376 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16377 +  %end;
16379 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16380 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16381 +  %end;
16382 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16383 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16384 +  %end;
16385 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16386 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16387 +  %end;
16389 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16390 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16391 +      alpha = &EM_PROPERTY_SIGLEVEL
16392 +    %end;
16393 +  %end;
16395 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16396 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16397 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16398 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16399 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16401 +        padjust =
16402 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16403 +          &chaid
16404 +        %end;
16405 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16406 +          DEPTH
16407 +        %end;
16408 +      %end;
16409 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16410 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16411 +         pvars = &num_inputs
16412 +      %end;
16413 +    %end;
16414 +  %end;
16415 +  %else %do;
16416 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16417 +         padjust = NONE
16418 +      %end;
16419 +  %end;
16421 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16422 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16423 +    Maxrules = &num_nrules
16424 +  %end;
16426 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16427 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16428 +    Maxsurrs = &num_nsurrs
16429 +  %end;
16431 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16432 +     Missing=&EM_PROPERTY_MISSINGVALUE
16433 +  %end;
16435 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16436 +     USEVARONCE
16437 +  %end;
16439 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16440 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16441 +  %end;
16444 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16445 +    event = "&targetEvent"
16446 +  %end;
16448 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16449 +     DECSEARCH
16450 +  %end;
16452 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16453 +     PRIORSSEARCH
16454 +  %end;
16456 +  %if &arbor_1 ne %then %do;
16457 +    &arbor_1
16458 +  %end;
16460 +  %if &em_arbor ne %then %do;
16461 +     &em_arbor
16462 +  %end;
16463 +  ;
16464 + %end;
16465 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16466 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +       interact;
16473 + %end;
16474 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16475 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16476 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16477 +    %put &em_codebar;
16478 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16479 +    %put &errormsg;
16480 +    %put &em_codebar;
16481 +    %goto doendm;
16482 +   %end;
16483 +   %else %do;
16484 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16485 +       Performance &EM_PROPERTY_PERFORMANCE
16486 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16487 +         nodesize=&EM_PROPERTY_NODESAMPLE
16488 +       %end;
16489 +       ;
16490 +       interact;
16491 +   %end;
16492 + %end;
16494 + %else %do;
16495 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16496 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16497 +    %put &em_codebar;
16498 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16499 +    %put &errormsg;
16500 +    %put &em_codebar;
16501 +    %goto doendm;
16502 +   %end;
16503 +   %else %do;
16504 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16505 +       Performance &EM_PROPERTY_PERFORMANCE
16506 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16507 +         nodesize=&EM_PROPERTY_NODESAMPLE
16508 +       %end;
16509 +       ;
16510 +        interact;
16511 +   %end;
16512 + %end;
16514 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16515 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16516 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16517 +    %end;
16519 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16520 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16521 +    %end;
16523 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16524 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16525 +    %end;
16527 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16528 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16529 +    %end;
16531 +    %if "%EM_FREQ" ne "" %then %do;
16532 +       freq %EM_FREQ;
16533 +    %end;
16535 +    %if "&multipleTar" eq "Y" %then %do;
16536 +       /* cycle through all target vars in variableset */
16537 +       %let tdsid = %sysfunc(open(temptarget));
16538 +       %if &tdsid %then %do;
16539 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16540 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16541 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16542 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16543 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16544 +             target &var / level = &lvl
16545 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16546 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16547 +             %end;
16548 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16549 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16550 +             %end;
16551 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16552 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16553 +             %end;
16554 +          %end;
16555 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16556 +       %end;
16557 +       useTarget variable = %EM_TARGET;
16558 +    %end;
16559 +    %else %do;
16560 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16561 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16562 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16563 +      %end;
16564 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16565 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16566 +      %end;
16567 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16568 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16569 +      %end;
16570 +    %end;
16572 +    %if "&multipleTar" eq "N" %then %do;
16573 +      &EM_DEC_STATEMENT;
16574 +    %end;
16576 +    Performance &EM_PROPERTY_PERFORMANCE
16577 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16578 +      nodesize=&EM_PROPERTY_NODESAMPLE
16579 +    %end;
16580 +    ;
16582 +    %if "&intFlag" eq "Y" %then %do;
16583 +       INTERACT Largest;
16584 +       Train maxnewdepth=0;
16585 +    %end;
16587 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16588 +         Assess
16589 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16590 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16591 +              %put &em_codebar;
16592 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16593 +              %put &errormsg;
16594 +              %put &em_codebar;
16595 +            %end;
16596 +            %else %do;
16597 +               Validata=&EM_IMPORT_VALIDATE
16598 +            %end;
16599 +         %end;
16600 +         %else %do;
16601 +           NoValidata
16602 +         %end;
16603 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16604 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16605 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16606 +               %if &dsid %then %do;
16607 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16608 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16609 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16610 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16611 +                   %else %do;
16612 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16613 +                      %else %let measure= MISC;
16614 +                   %end;
16615 +                 %end;
16616 +               %end;
16617 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16618 +            %end;
16619 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16620 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16621 +                 %let measure=ASE;
16622 +              %end;
16623 +              %else %do;
16624 +                 %let measure=MISC;
16625 +              %end;
16626 +            %end;
16627 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16628 +              %let measure=ASE;
16629 +            %end;
16630 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16631 +               %let measure = LIFT;
16632 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16633 +               %if &dsid %then %do;
16634 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16635 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16636 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16637 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16638 +                 %end;
16639 +               %end;
16640 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16641 +            %end;
16642 +            measure=&measure
16643 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16644 +               event = "&targetEvent"
16645 +            %end;
16646 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16647 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16648 +            %end;
16649 +         %end;
16650 +         %if "&multipleTar" eq "N" %then %do;
16651 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16652 +               CV
16653 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16654 +                 CVNITer = &EM_PROPERTY_CVNITER
16655 +               %end;
16656 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16657 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16658 +               %end;
16659 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16660 +                 CVSeed = &EM_PROPERTY_CVSEED
16661 +               %end;
16662 +            %end;
16663 +         %end;
16664 +       %end;
16665 +      ;
16667 +      %if "&intFlag" ne "Y" %then %do;
16668 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16669 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16670 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16671 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16673 +          SUBTREE &subtree
16674 +          %if "&subtree" eq "NLEAVES" %then %do;
16675 +            =&EM_PROPERTY_NSUBTREE
16676 +          %end;
16677 +          ;
16678 +        %end;
16680 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16681 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16682 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16683 +          %end;
16684 +       %end;
16685 +      %end;
16686 + %end;
16689 + MakeMacro nleaves = nleaves;
16690 + save
16691 + %if "&EM_USER_EMTREE" ne "" %then %do;
16692 +   MODEL=&EM_USER_EMTREE
16693 + %end;
16694 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16695 +   SEQUENCE=&EM_USER_OUTSEQ
16696 + %end;
16697 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16698 +   IMPORTANCE=&EM_USER_OUTIMPORT
16699 + %end;
16700 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16701 +   NODESTAT=&EM_USER_OUTNODES
16702 + %end;
16703 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16704 +   SUMMARY=&EM_USER_OUTSUMMARY
16705 + %end;
16706 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16707 +   STATSBYNODE=&EM_USER_OUTSTATS
16708 + %end;
16709 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16710 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16711 + %end;
16712 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16713 +   Pathlistnonmissing=&EM_USER_OUTPATH
16714 + %end;
16715 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16716 +   RULES = &EM_USER_OUTRULES
16717 + %end;
16718 + ;
16720 + %if "&intFlag" ne "Y" %then %do;
16722 +   %let lookupString = ;
16723 +   %if ^%symexist(EM_OPTION) %then
16724 +      %let EM_OPTION=;
16726 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16727 +      %let lookupString = LOOKUP=SELECT;
16728 +   %end;
16730 +   %let codetext=;
16731 +   %let norescodetxt=;
16733 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16734 +     %let codetext=&codetext DUMMY;
16735 +     %let norescodetxt=&norescodetxt DUMMY;
16736 +   %end;
16737 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16738 +     %let codetext=&codetext NOLEAFID;
16739 +     %let norescodetxt=&norescodetxt NOLEAFID;
16740 +   %end;
16741 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16742 +     %let norescodetxt=&norescodetxt NOPRED;
16743 +   %end;
16745 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16746 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16748 +   %if &nnpmml %then %do;
16749 +     code pmml;
16750 +   %end;
16752 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16753 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16754 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16755 +   %end;
16756 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16757 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16758 +   %end;
16759 + %end;
16761 + run;
16762 + quit;
16764 + /*%em_checkerror(); */
16765 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16766 +   /* Delete DMDB catalog */
16767 +   proc datasets lib=work nolist;
16768 +       delete _treeDMDB / mt=cat;
16769 +  run;
16770 +  %end;
16772 + %if &nnpmml %then %do;
16773 +    ods pmml close;
16774 + %end;
16776 +  %doendm:
16778 +%mend em_tree_runTreeProcedure;
16780 +%macro em_tree_createFitStats( multipleTar= );
16783 +  /* create targetTable is multipleTar eq Y */
16784 +  data temptarget;
16785 +    set &EM_DATA_VARIABLESET;
16786 +    where ROLE="TARGET";
16787 +  run;
16789 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16790 +   data &EM_USER_EMOUTFIT;
16791 +     length target $32;
16792 +     merge work.fit_train
16793 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16794 +       work.fit_valid
16795 +     %end;
16796 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16797 +       work.fit_test
16798 +     %end;
16799 +     ;
16800 +     %if "&multipleTar" eq "N" %then %do;
16801 +       target="%EM_TARGET";
16802 +     %end;
16803 +     %else %do;
16804 +       target = _TARGET_;
16805 +     %end;
16806 +     drop _NW_ _SUMW_
16807 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16808 +        _VSUMW_
16809 +     %end;
16810 +     ;
16811 +   run;
16813 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16814 +     proc datasets library=work nolist;
16815 +       delete fit_valid;
16816 +     run;
16817 +   %end;
16818 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16819 +     proc datasets library=work nolist;
16820 +       delete fit_test;
16821 +     run;
16822 +   %end;
16824 +%mend em_tree_createFitStats;
16827 +%macro em_tree_makeEnglishRules;
16829 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16830 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16832 +  /* verify that necessary tables exist and if not, skip processing */
16833 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16834 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16835 +    %goto doendm;
16836 +  %end;
16837 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16838 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16839 +    %goto doendm;
16840 +  %end;
16842 +  /* determine length of variable in outpath dataset */
16843 +  %let vlength= ;
16844 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16845 +  %if &dsid ne %then %do;
16846 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16847 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16848 +  %end;
16849 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16851 +  data tempoutpath;
16852 +    length varname $&vlength;
16853 +    retain varname;
16854 +    set &EM_USER_OUTPATH;
16856 +    if ^missing(variable) then varname=variable;
16857 +    else if ^missing(var_name) then varname=var_name;
16858 +    output;
16859 +  run;
16861 +  /* create an array of generated predicted variable names */
16862 +  %let tree_pred_vars = ;
16863 +  %let tree_pred_label = ;
16864 +  %let numpred= 0;
16865 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16867 +    data _null_;
16868 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16869 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16870 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16871 +     if eof then
16872 +       call symput('numpred', strip(put(_N_, BEST.)));
16873 +    run;
16874 +  %end;
16876 +  /* determine if NPRIORS exists in outnodes  */
16877 +  %local nprior_flag;
16878 +  data _null_;
16879 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16880 +    if eof then do;
16881 +      call symput('nprior_flag', strip(put(npriors, best.)));
16882 +    end;
16883 +  run;
16885 +  proc sort data=tempoutpath; by node; run;
16886 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16888 +  data tempoutpath;
16889 +    merge tempoutpath(in=_a) outnodes(keep= node
16890 +    %if "&nprior_flag" ne "." %then %do;
16891 +      NPRIORS
16892 +    %end;
16893 +    %else %do;
16894 +      N
16895 +    %end;
16896 +    %if &numpred gt 0 %then %do;
16897 +      %do i=1 %to &numpred;
16898 +        &&tree_pred_vars&i
16899 +      %end;
16900 +    %end;
16901 +    );
16902 +    by node;
16903 +    if _a;
16904 +  run;
16906 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16908 +  data _null_;
16909 +    file x;
16910 +    set tempoutpath;
16911 +    by node descending varname;
16912 +    retain origvar oldnode string;
16913 +    length origvar $32 oldnode 8 string $5000;
16915 +    if _N_ = 1 then do;
16916 +      origvar = varname;
16917 +      oldnode = node;
16918 +    end;
16920 +    if first.node then do;
16921 +       put "&EM_CODEBAR";
16922 +       put " Node = " node;
16923 +       put "&EM_CODEBAR";
16924 +    end;
16926 +      if first.varname then do;
16927 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16928 +            if MISSING(CHARACTER_VALUE) then do;
16929 +             if NUMERIC_VALUE ne .  then do;
16930 +              if ^first.node then do;
16931 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16932 +              end;
16933 +              else do;
16934 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16935 +              end;
16936 +             end;
16937 +            end;
16938 +            else do;
16939 +              if ^first.node then do;
16940 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16941 +              end;
16942 +              else do;
16943 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16944 +              end;
16945 +             end;
16946 +         end;
16947 +         else if RELATION in ("=") then do;
16948 +            if ^first.node then do;
16949 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16950 +            end;
16951 +            else do;
16952 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16953 +            end;
16954 +         end;
16955 +         else if RELATION in ("ISMISSING") then do;
16956 +            if ^first.node then do;
16957 +              string = " AND "|| strip(varname) || " equals Missing";
16958 +            end;
16959 +            else do;
16960 +              string = "if "|| strip(varname) ||" equals Missing";
16961 +            end;
16962 +         end;
16963 +         else if RELATION in ("ISNOTMISSING") then do;
16964 +            if ^first.node then do;
16965 +              string = " AND "|| strip(varname) || " equals All Values";
16966 +            end;
16967 +            else do;
16968 +              string = "if "|| strip(varname) ||" equals All Values";
16969 +            end;
16970 +         end;
16971 +         if ^missing(varname) then origvar = varname;
16972 +         oldnode=node;
16974 +      end;
16975 +      else do;
16976 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16977 +          if MISSING(CHARACTER_VALUE) then do;
16978 +           if  NUMERIC_VALUE ne .  then do;
16979 +            if ^MISSING(string) then
16980 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16981 +            else
16982 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16983 +           end;
16984 +          end;
16985 +          else do;
16986 +            if ^MISSING(string) then
16987 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16988 +            else
16989 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16990 +          end;
16992 +         end;
16993 +         else if RELATION in ("=") then do;
16994 +           string = strip(string)||", "||strip(character_value);
16995 +         end;
16996 +         else if RELATION in ("ISMISSING") then do;
16998 +         end;
16999 +         if ^missing(varname) then origvar = varname;
17000 +         oldnode=node;
17001 +      end;
17002 +      if last.varname then do;
17003 +         if RELATION in ("ISMISSING") then do;
17004 +           if ^first.varname then do;
17005 +             string = strip(string) || " or MISSING";
17006 +           end;
17007 +         end;
17008 +         put string;
17009 +         if ^missing(varname) then origvar = varname;
17010 +         oldnode=node;
17011 +      end;
17013 +      if last.node then do;
17014 +         put "then ";
17015 +         put " Tree Node Identifier   = " node;
17017 +         %if "&nprior_flag" ne "." %then %do;
17018 +           put " Number of Observations = " NPRIORS;
17019 +         %end;
17020 +         %else %do;
17021 +           put " Number of Observations = " N;
17022 +         %end;
17024 +         %if &numpred gt 0 %then %do;
17025 +           %do i=1 %to &numpred;
17026 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17027 +           %end;
17028 +         %end;
17030 +         put " ";
17031 +         if ^missing(varname) then origvar = varname;
17032 +         oldnode=node;
17033 +      end;
17035 +  run;
17037 +  proc datasets lib=work nolist;
17038 +    delete tempoutpath outnodes;
17039 +  run;
17041 +  %doendm:
17042 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS4.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: 1596463 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633729536 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS4.TREE_EMTREE has 2269 observations and 4 variables.
NOTE: The data set EMWS4.TREE_OUTNODES has 7 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS4.TREE_OUTRULES has 141 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS4.TREE_OUTSTATS has 49 observations and 5 variables.
NOTE: The data set EMWS4.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.


NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           2.18 seconds
      cpu time            2.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           2.20 seconds
      cpu time            2.06 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set EMWS4.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS4\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13Apr2022:17:42:20,
      Create Time=13Apr2022:17:42:20

NOTE: 45 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.
17044  
17045  *------------------------------------------------------------*;
17046  * End TRAIN: Tree;
17047  *------------------------------------------------------------*;

17048  *------------------------------------------------------------*;
17049  * Close any missing semi colons;
17050  *------------------------------------------------------------*;
17051  ;
17052  ;
17053  ;
17054  ;
17055  quit;
17056  *------------------------------------------------------------*;
17057  * Close any unbalanced quotes;
17058  *------------------------------------------------------------*;
17059  /*; *"; *'; */
17060  ;
17061  run;
17062  quit;
17063  /* Reset EM Options */
17064  options formchar="|----|+|---+=|-/\<>*";
17065  options nocenter ls=256 ps=10000;
17066  goptions reset=all device=GIF NODISPLAY;

17067  proc sort data=WORK.EM_USER_REPORT;
17068  by ID VIEW;
17069  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

