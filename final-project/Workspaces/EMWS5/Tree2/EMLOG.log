*------------------------------------------------------------*
User:                Kyle McLester
Date:                April 13, 2022
Time:                18:53:29
Site:                70080897
Platform:            X64_10HOME
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 13, 2022
Time:                18:53:24
*------------------------------------------------------------*
15226  proc freq data=EMWS5.Tree2_VariableSet noprint;
15227  table ROLE*LEVEL/out=WORK.Tree2META;
15228  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
15229  proc print data=WORK.Tree2META label noobs;
15230  var ROLE LEVEL COUNT;
15231  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15232  title9 ' ';
15233  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15234  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15235  title10;
 
15236  %let EMNORLEN = %DMNORLEN;
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15265  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15266  length ORDER $20;
15267  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15268     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15269  set EMWS5.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15270  NumLevels=2;
15271  select(upcase(ORDER));
15272  when('DESC') ORDER = 'Descending';
15273  when('ASC') ORDER = 'Ascending';
15274  when('FMTDESC') ORDER = 'Formatted Descending';
15275  when('FMTASC') ORDER = 'Formatted Ascending';
15276  otherwise ORDER = 'Descending';
15277  end;
15278  output;
15279  run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15280  title9 ' ';
15281  proc print data=WORK.Tree2_EVENT noobs label;
15282  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15283  title9 ' ';
15284  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15285  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15286  title10;
 
"No decisions defined for target "TargetBuy"."
15287  proc print data = EMWS5.Ids_TargetBuy_DM noobs label;
15288  var _type_ variable label;
15289  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15290  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15291  title9 ' ';
15292  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15293  run;
 
NOTE: There were 7 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15294  title10;
 
15295  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15803  *------------------------------------------------------------*;
15804  * Tree2: Generation of macros and macro variables;
15805  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15806  *------------------------------------------------------------*;
 
15807  %let EMEXCEPTIONSTRING=;
15808  *------------------------------------------------------------*;
15809  * TRAIN: Tree2;
15810  *------------------------------------------------------------*;
15811  %let EM_ACTION = TRAIN;
15812  %let syscc = 0;
15813  %macro main;
15814
15815    %if %upcase(&EM_ACTION) = CREATE %then %do;
15816      filename temp catalog 'sashelp.emmodl.tree_create.source';
15817      %include temp;
15818      filename temp;
15819
15820      %em_tree_create;
15821    %end;
15822
15823     %else
15824     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15825
15826         filename temp catalog 'sashelp.emmodl.tree_train.source';
15827         %include temp;
15828         filename temp;
15829         %em_tree_train;
15830     %end;
15831
15832    %else
15833    %if %upcase(&EM_ACTION) = SCORE %then %do;
15834      filename temp catalog 'sashelp.emmodl.tree_score.source';
15835      %include temp;
15836      filename temp;
15837
15838      %em_tree_score;
15839
15840    %end;
15841
15842    %else
15843    %if %upcase(&EM_ACTION) = REPORT %then %do;
15844
15845         filename temp catalog 'sashelp.emmodl.tree_report.source';
15846         %include temp;
15847         filename temp;
15848
15849         %em_tree_report;
15850     %end;
15851
15852    %else
15853    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15854
15855         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15856         %include temp;
15857         filename temp;
15858         %EM_TREE_OPENTREEVIEWER;
15859
15860     %end;
15861
15862    %else
15863    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15864
15865         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15866         %include temp;
15867         filename temp;
15868         %EM_TREE_CLOSETREEVIEWER;
15869
15870     %end;
15871
15872
15873     %doendm:
15874  %mend main;
15875
15876  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15878 +%macro em_tree_train;
15880 +   %if &EM_IMPORT_DATA eq %then %do;
15881 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15882 +       %put &em_codebar;
15883 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15884 +       %put &errormsg;
15885 +       %put &em_codebar;
15886 +       %goto doendm;
15887 +   %end;
15888 +   %else
15889 +       %let EMEXCEPTIONSTRING =;
15891 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15892 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15893 +        %put &em_codebar;
15894 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15895 +        %put &errormsg;
15896 +        %put &em_codebar;
15897 +        %goto doendm;
15898 +   %end;
15900 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15901 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15902 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15903 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15904 +        %put &em_codebar;
15905 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15906 +        %put &errormsg;
15907 +        %put &em_codebar;
15908 +        %goto doendm;
15909 +   %end;
15911 +   /* Initialize property macro variables */
15912 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15913 +   %include temp;
15914 +   filename temp;
15916 +   %EM_SetProperties;
15918 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15919 +   %EM_GETNAME(key=EMTREE, type=DATA);
15920 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15921 +     /* if import eq Y and no importtable defined, throw an exception */
15922 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15923 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15924 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15925 +         %put &em_codebar;
15926 +         %put &errmsg;
15927 +         %put &em_codebar;
15928 +         %goto doendm;
15929 +      %end;
15930 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15931 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15932 +         %put &em_codebar;
15933 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15934 +         %put &errormsg;
15935 +         %put &em_codebar;
15936 +         %goto doendm;
15937 +      %end;
15938 +      %else %do;
15939 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15940 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15941 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15942 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15943 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15944 +         %let dsid = %sysfunc(close(&dsid));
15945 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15946 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15947 +            %put &em_codebar;
15948 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15949 +            %put &errormsg;
15950 +            %put &em_codebar;
15951 +            %goto doendm;
15952 +         %end;
15953 +      %end;
15954 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15955 +         proc delete data=&EM_USER_EMTREE;
15956 +         run;
15957 +      %end;
15958 +   %end;
15959 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15960 +      proc delete data=&EM_USER_EMTREE;
15961 +      run;
15962 +   %end;
15964 +   /* load tree macros */
15965 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15966 +   %include temp;
15967 +   filename temp;
15969 +   /* data sets */
15970 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15971 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15972 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15974 +   /* files */
15975 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15977 +   /* check actual num of target levels */
15978 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15979 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15980 +                              nLevel=_nTargetLevel );
15981 +      %if &_nTargetLevel  > 2 %then %do;
15982 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15983 +        %put &em_codebar;
15984 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15985 +        %put &errormsg;
15986 +        %put &em_codebar;
15987 +        %goto doendm;
15988 +      %end;
15989 +   %end;
15991 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15992 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15993 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15994 +        %let costflag=0;
15995 +        data _null_;
15996 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15997 +          if eof then call symput("costflag", _N_);
15998 +        run;
15999 +        %if &costflag gt 0 %then %do;
16000 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16001 +          %put &em_codebar;
16002 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16003 +          %put &errormsg;
16004 +          %put &em_codebar;
16005 +          %goto doendm;
16006 +       %end;
16007 +     %end;
16008 +   %end;
16010 +   /* determine if multiple targets will be processed */
16011 +   %let em_tree_multipleTargets=N;
16012 +   %let em_tree_numTarget = 1;
16013 +   %let em_tree_targetVars=;
16015 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16016 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16017 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16018 +         %let em_tree_multipleTargets=N;
16019 +      %end;
16020 +      %else %do;
16021 +         /* create macro array of targets  */
16022 +         data _null_;
16023 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16024 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16025 +           if eof then
16026 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16027 +        run;
16029 +        %if &em_tree_numTarget gt 1 %then %do;
16030 +           %let em_tree_multipleTargets=Y;
16031 +        %end;
16032 +      %end;
16033 +   %end;
16035 +   /* create view of only necessary variable for performance reasons */
16036 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16037 +   data &tempData / view=&tempData;
16038 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16039 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16040 +       %EM_TARGET
16041 +     %end;
16042 +     %else %do;
16043 +       %if &em_tree_numTarget ne 0 %then %do;
16044 +         %do i=1 %to &em_tree_numTarget;
16045 +            &&em_tree_targetVars&i
16046 +         %end;
16047 +       %end;
16048 +     %end;
16049 +     );
16050 +   run;
16052 +   /* run Tree procedure */
16053 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16055 +   /* Check return code and throw exception if error is detected */
16056 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16057 +   %if &syserr %then %do;
16058 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16059 +     %goto doendm;
16060 +   %end;
16062 +   /* add decision score code if multiple targets are processed */
16063 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16064 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16065 +   %end;
16067 +   /* create outfit dataset if multiple score statements have been executed */
16068 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16070 +   /* create English Rules */
16071 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16072 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16073 +       %em_tree_makeEnglishRules;
16075 +       /* English Rules */
16076 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16078 +     %end;
16079 +   filename x;
16081 +   %doendm:
16082 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16083 +%macro EM_SetProperties;
16085 +   /* train properties */
16086 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16087 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16088 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16089 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16090 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16091 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16092 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16093 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16094 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16095 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16096 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16097 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16098 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16099 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16100 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16101 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16102 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16103 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16104 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16105 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16106 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16109 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16110 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16111 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16115 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16116 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16117 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16128 +   /* properties for interactive sample */
16129 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16134 +   /* report properties */
16135 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16149 +   /* score properties */
16150 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16153 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16155 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16156 +  %global &nLevel;
16157 +  proc dmdb batch data=&indata
16158 +    classout=_tmp_dmdbout;
16159 +    class &target;
16160 +  run;
16161 +  data _tmp_dmdbout;
16162 +    set _tmp_dmdbout;
16163 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16164 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16165 +  run;
16166 +  data _null_;
16167 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16168 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16169 +    %let dsid = %sysfunc(close(&dsid));
16170 +     call symput("&nLevel", put(&_obs, Best12.));
16171 +  run;
16173 +  proc datasets lib=work nolist;
16174 +     delete _tmp_dmdbout;
16175 +  run;
16176 +  quit;
16177 +%Mend EM_CheckBinaryTargetLevel;
16180 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16182 +  /* determine the number of obs in training data */
16183 +  proc sql;
16184 +    reset noprint;
16185 +    select count(*) into :em_nobs from &indata;
16186 +  quit;
16188 +  /* determine the number of input variables */
16189 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16190 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16192 +  /* retrieve targetEvent from decmeta */
16193 +  %let targetEvent=;
16194 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16195 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16196 +      data _null_;
16197 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16198 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16199 +      run;
16200 +    %end;
16201 +  %end;
16203 +  /* create targetTable if multipleTar eq Y */
16204 +  data temptarget;
16205 +    set &EM_DATA_VARIABLESET;
16206 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16207 +  run;
16209 + /* data sets */
16210 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16211 + %EM_GETNAME(key=EMTREE,        type=DATA);
16212 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16213 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16214 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16215 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16216 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16217 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16218 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16219 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16221 + /* files */
16222 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16223 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16225 + /* turn on pmml if requested */
16226 + %let nnpmml=0;
16227 + %if %symexist(EM_PMML) %then %do;
16228 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16229 +       %let nnpmml=1;
16231 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16232 +   %end;
16233 +%end;
16235 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16237 +%if &nnpmml or &numClassTarget %then %do;
16239 +    /* create dmdb needed for pmml generation */
16240 +    %let tree_maxlevel = 512;
16241 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16242 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16243 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16244 +      %end;
16245 +    %end;
16246 +    %if &tree_maxlevel gt 0 %then %do;
16247 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16248 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16249 +    %end;
16251 +    %let targetOrderString =;
16252 +    %let targetString = ;
16253 +    data _null_;
16254 +       length orderString nameString $10000;
16255 +       retain orderString nameString;
16256 +       set &em_data_variableset end=eof;
16257 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16258 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16259 +       %end;
16260 +       %else %do;
16261 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16262 +       %end;          select(order);
16263 +         when('')        order ='DESC';
16264 +         when('FMTASC')  order='ASCFMT';
16265 +         when('FMTDESC') order='DESFMT';
16266 +         otherwise;
16267 +       end;
16268 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16269 +       nameString = trim(nameString)!!' '!!trim(NAME);
16271 +       if eof then do;
16272 +          call symput('targetOrderString', trim(orderString));
16273 +          call symput('targetString', trim(nameString));
16274 +       end;
16275 +    run;
16277 +    %let arborkluge= "work._treeDMDB";
16279 +    proc dmdb batch data=&indata
16280 +    %if &nnpmml %then %do;
16281 +        PMML
16282 +    %end;
16283 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16285 +      %if &nnpmml %then %do;
16286 +           %if "%EM_ID" ne "" %then %do;
16287 +             id %EM_ID;
16288 +           %end;
16289 +           %if &EM_NUM_CLASS gt 0 %then %do;
16290 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16291 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16292 +                  &targetOrderString;
16293 +           %end;
16294 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16295 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16296 +           %end;
16297 +           target &targetString %EM_INTERVAL_TARGET;
16298 +           %if "%EM_FREQ" ne "" %then %do;
16299 +             freq %EM_FREQ;
16300 +           %end;
16301 +      %end;
16302 +      %else %do;
16303 +         class  &targetOrderString;
16304 +         target &targetString %EM_INTERVAL_TARGET;
16305 +      %end;
16306 +    run;
16307 +    quit;
16309 +    proc datasets lib=work nolist;
16310 +       delete classout varout;
16311 +    run;
16312 +    quit;
16314 + %end;
16317 + /* run Arbor procedure */
16318 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16319 +  proc arbor data=&INDATA
16321 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16322 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16323 +  %end;
16325 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16326 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16327 +  %end;
16329 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16330 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16331 +  %end;
16333 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16334 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16335 +  %end;
16337 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16338 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16339 +  %end;
16341 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16342 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16343 +  %end;
16344 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16345 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16346 +  %end;
16347 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16348 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16349 +  %end;
16351 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16352 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16353 +      alpha = &EM_PROPERTY_SIGLEVEL
16354 +    %end;
16355 +  %end;
16357 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16358 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16359 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16360 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16361 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16363 +        padjust =
16364 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16365 +          &chaid
16366 +        %end;
16367 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16368 +          DEPTH
16369 +        %end;
16370 +      %end;
16371 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16372 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16373 +         pvars = &num_inputs
16374 +      %end;
16375 +    %end;
16376 +  %end;
16377 +  %else %do;
16378 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16379 +         padjust = NONE
16380 +      %end;
16381 +  %end;
16383 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16384 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16385 +    Maxrules = &num_nrules
16386 +  %end;
16388 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16389 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16390 +    Maxsurrs = &num_nsurrs
16391 +  %end;
16393 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16394 +     Missing=&EM_PROPERTY_MISSINGVALUE
16395 +  %end;
16397 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16398 +     USEVARONCE
16399 +  %end;
16401 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16402 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16403 +  %end;
16406 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16407 +    event = "&targetEvent"
16408 +  %end;
16410 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16411 +     DECSEARCH
16412 +  %end;
16414 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16415 +     PRIORSSEARCH
16416 +  %end;
16418 +  %if &arbor_1 ne %then %do;
16419 +    &arbor_1
16420 +  %end;
16422 +  %if &em_arbor ne %then %do;
16423 +     &em_arbor
16424 +  %end;
16425 +  ;
16426 + %end;
16427 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16428 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16429 +       Performance &EM_PROPERTY_PERFORMANCE
16430 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16431 +         nodesize=&EM_PROPERTY_NODESAMPLE
16432 +       %end;
16433 +       ;
16434 +       interact;
16435 + %end;
16436 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16437 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16438 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16439 +    %put &em_codebar;
16440 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16441 +    %put &errormsg;
16442 +    %put &em_codebar;
16443 +    %goto doendm;
16444 +   %end;
16445 +   %else %do;
16446 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16447 +       Performance &EM_PROPERTY_PERFORMANCE
16448 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16449 +         nodesize=&EM_PROPERTY_NODESAMPLE
16450 +       %end;
16451 +       ;
16452 +       interact;
16453 +   %end;
16454 + %end;
16456 + %else %do;
16457 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16458 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16459 +    %put &em_codebar;
16460 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16461 +    %put &errormsg;
16462 +    %put &em_codebar;
16463 +    %goto doendm;
16464 +   %end;
16465 +   %else %do;
16466 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +        interact;
16473 +   %end;
16474 + %end;
16476 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16477 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16478 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16479 +    %end;
16481 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16482 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16483 +    %end;
16485 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16486 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16487 +    %end;
16489 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16490 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16491 +    %end;
16493 +    %if "%EM_FREQ" ne "" %then %do;
16494 +       freq %EM_FREQ;
16495 +    %end;
16497 +    %if "&multipleTar" eq "Y" %then %do;
16498 +       /* cycle through all target vars in variableset */
16499 +       %let tdsid = %sysfunc(open(temptarget));
16500 +       %if &tdsid %then %do;
16501 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16502 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16503 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16504 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16505 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16506 +             target &var / level = &lvl
16507 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16508 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16509 +             %end;
16510 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16511 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16512 +             %end;
16513 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16514 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16515 +             %end;
16516 +          %end;
16517 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16518 +       %end;
16519 +       useTarget variable = %EM_TARGET;
16520 +    %end;
16521 +    %else %do;
16522 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16523 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16524 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16525 +      %end;
16526 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16527 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16528 +      %end;
16529 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16530 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16531 +      %end;
16532 +    %end;
16534 +    %if "&multipleTar" eq "N" %then %do;
16535 +      &EM_DEC_STATEMENT;
16536 +    %end;
16538 +    Performance &EM_PROPERTY_PERFORMANCE
16539 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16540 +      nodesize=&EM_PROPERTY_NODESAMPLE
16541 +    %end;
16542 +    ;
16544 +    %if "&intFlag" eq "Y" %then %do;
16545 +       INTERACT Largest;
16546 +       Train maxnewdepth=0;
16547 +    %end;
16549 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16550 +         Assess
16551 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16552 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16553 +              %put &em_codebar;
16554 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16555 +              %put &errormsg;
16556 +              %put &em_codebar;
16557 +            %end;
16558 +            %else %do;
16559 +               Validata=&EM_IMPORT_VALIDATE
16560 +            %end;
16561 +         %end;
16562 +         %else %do;
16563 +           NoValidata
16564 +         %end;
16565 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16566 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16567 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16568 +               %if &dsid %then %do;
16569 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16570 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16571 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16572 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16573 +                   %else %do;
16574 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16575 +                      %else %let measure= MISC;
16576 +                   %end;
16577 +                 %end;
16578 +               %end;
16579 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16580 +            %end;
16581 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16582 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16583 +                 %let measure=ASE;
16584 +              %end;
16585 +              %else %do;
16586 +                 %let measure=MISC;
16587 +              %end;
16588 +            %end;
16589 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16590 +              %let measure=ASE;
16591 +            %end;
16592 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16593 +               %let measure = LIFT;
16594 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16595 +               %if &dsid %then %do;
16596 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16597 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16598 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16599 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16600 +                 %end;
16601 +               %end;
16602 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16603 +            %end;
16604 +            measure=&measure
16605 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16606 +               event = "&targetEvent"
16607 +            %end;
16608 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16609 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16610 +            %end;
16611 +         %end;
16612 +         %if "&multipleTar" eq "N" %then %do;
16613 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16614 +               CV
16615 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16616 +                 CVNITer = &EM_PROPERTY_CVNITER
16617 +               %end;
16618 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16619 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16620 +               %end;
16621 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16622 +                 CVSeed = &EM_PROPERTY_CVSEED
16623 +               %end;
16624 +            %end;
16625 +         %end;
16626 +       %end;
16627 +      ;
16629 +      %if "&intFlag" ne "Y" %then %do;
16630 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16631 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16632 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16633 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16635 +          SUBTREE &subtree
16636 +          %if "&subtree" eq "NLEAVES" %then %do;
16637 +            =&EM_PROPERTY_NSUBTREE
16638 +          %end;
16639 +          ;
16640 +        %end;
16642 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16643 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16644 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16645 +          %end;
16646 +       %end;
16647 +      %end;
16648 + %end;
16651 + MakeMacro nleaves = nleaves;
16652 + save
16653 + %if "&EM_USER_EMTREE" ne "" %then %do;
16654 +   MODEL=&EM_USER_EMTREE
16655 + %end;
16656 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16657 +   SEQUENCE=&EM_USER_OUTSEQ
16658 + %end;
16659 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16660 +   IMPORTANCE=&EM_USER_OUTIMPORT
16661 + %end;
16662 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16663 +   NODESTAT=&EM_USER_OUTNODES
16664 + %end;
16665 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16666 +   SUMMARY=&EM_USER_OUTSUMMARY
16667 + %end;
16668 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16669 +   STATSBYNODE=&EM_USER_OUTSTATS
16670 + %end;
16671 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16672 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16673 + %end;
16674 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16675 +   Pathlistnonmissing=&EM_USER_OUTPATH
16676 + %end;
16677 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16678 +   RULES = &EM_USER_OUTRULES
16679 + %end;
16680 + ;
16682 + %if "&intFlag" ne "Y" %then %do;
16684 +   %let lookupString = ;
16685 +   %if ^%symexist(EM_OPTION) %then
16686 +      %let EM_OPTION=;
16688 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16689 +      %let lookupString = LOOKUP=SELECT;
16690 +   %end;
16692 +   %let codetext=;
16693 +   %let norescodetxt=;
16695 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16696 +     %let codetext=&codetext DUMMY;
16697 +     %let norescodetxt=&norescodetxt DUMMY;
16698 +   %end;
16699 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16700 +     %let codetext=&codetext NOLEAFID;
16701 +     %let norescodetxt=&norescodetxt NOLEAFID;
16702 +   %end;
16703 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16704 +     %let norescodetxt=&norescodetxt NOPRED;
16705 +   %end;
16707 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16708 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16710 +   %if &nnpmml %then %do;
16711 +     code pmml;
16712 +   %end;
16714 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16715 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16716 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16717 +   %end;
16718 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16719 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16720 +   %end;
16721 + %end;
16723 + run;
16724 + quit;
16726 + /*%em_checkerror(); */
16727 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16728 +   /* Delete DMDB catalog */
16729 +   proc datasets lib=work nolist;
16730 +       delete _treeDMDB / mt=cat;
16731 +  run;
16732 +  %end;
16734 + %if &nnpmml %then %do;
16735 +    ods pmml close;
16736 + %end;
16738 +  %doendm:
16740 +%mend em_tree_runTreeProcedure;
16742 +%macro em_tree_createFitStats( multipleTar= );
16745 +  /* create targetTable is multipleTar eq Y */
16746 +  data temptarget;
16747 +    set &EM_DATA_VARIABLESET;
16748 +    where ROLE="TARGET";
16749 +  run;
16751 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16752 +   data &EM_USER_EMOUTFIT;
16753 +     length target $32;
16754 +     merge work.fit_train
16755 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16756 +       work.fit_valid
16757 +     %end;
16758 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16759 +       work.fit_test
16760 +     %end;
16761 +     ;
16762 +     %if "&multipleTar" eq "N" %then %do;
16763 +       target="%EM_TARGET";
16764 +     %end;
16765 +     %else %do;
16766 +       target = _TARGET_;
16767 +     %end;
16768 +     drop _NW_ _SUMW_
16769 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16770 +        _VSUMW_
16771 +     %end;
16772 +     ;
16773 +   run;
16775 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16776 +     proc datasets library=work nolist;
16777 +       delete fit_valid;
16778 +     run;
16779 +   %end;
16780 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16781 +     proc datasets library=work nolist;
16782 +       delete fit_test;
16783 +     run;
16784 +   %end;
16786 +%mend em_tree_createFitStats;
16789 +%macro em_tree_makeEnglishRules;
16791 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16792 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16794 +  /* verify that necessary tables exist and if not, skip processing */
16795 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16796 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16797 +    %goto doendm;
16798 +  %end;
16799 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16800 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16801 +    %goto doendm;
16802 +  %end;
16804 +  /* determine length of variable in outpath dataset */
16805 +  %let vlength= ;
16806 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16807 +  %if &dsid ne %then %do;
16808 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16809 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16810 +  %end;
16811 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16813 +  data tempoutpath;
16814 +    length varname $&vlength;
16815 +    retain varname;
16816 +    set &EM_USER_OUTPATH;
16818 +    if ^missing(variable) then varname=variable;
16819 +    else if ^missing(var_name) then varname=var_name;
16820 +    output;
16821 +  run;
16823 +  /* create an array of generated predicted variable names */
16824 +  %let tree_pred_vars = ;
16825 +  %let tree_pred_label = ;
16826 +  %let numpred= 0;
16827 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16829 +    data _null_;
16830 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16831 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16832 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16833 +     if eof then
16834 +       call symput('numpred', strip(put(_N_, BEST.)));
16835 +    run;
16836 +  %end;
16838 +  /* determine if NPRIORS exists in outnodes  */
16839 +  %local nprior_flag;
16840 +  data _null_;
16841 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16842 +    if eof then do;
16843 +      call symput('nprior_flag', strip(put(npriors, best.)));
16844 +    end;
16845 +  run;
16847 +  proc sort data=tempoutpath; by node; run;
16848 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16850 +  data tempoutpath;
16851 +    merge tempoutpath(in=_a) outnodes(keep= node
16852 +    %if "&nprior_flag" ne "." %then %do;
16853 +      NPRIORS
16854 +    %end;
16855 +    %else %do;
16856 +      N
16857 +    %end;
16858 +    %if &numpred gt 0 %then %do;
16859 +      %do i=1 %to &numpred;
16860 +        &&tree_pred_vars&i
16861 +      %end;
16862 +    %end;
16863 +    );
16864 +    by node;
16865 +    if _a;
16866 +  run;
16868 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16870 +  data _null_;
16871 +    file x;
16872 +    set tempoutpath;
16873 +    by node descending varname;
16874 +    retain origvar oldnode string;
16875 +    length origvar $32 oldnode 8 string $5000;
16877 +    if _N_ = 1 then do;
16878 +      origvar = varname;
16879 +      oldnode = node;
16880 +    end;
16882 +    if first.node then do;
16883 +       put "&EM_CODEBAR";
16884 +       put " Node = " node;
16885 +       put "&EM_CODEBAR";
16886 +    end;
16888 +      if first.varname then do;
16889 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16890 +            if MISSING(CHARACTER_VALUE) then do;
16891 +             if NUMERIC_VALUE ne .  then do;
16892 +              if ^first.node then do;
16893 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16894 +              end;
16895 +              else do;
16896 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16897 +              end;
16898 +             end;
16899 +            end;
16900 +            else do;
16901 +              if ^first.node then do;
16902 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16903 +              end;
16904 +              else do;
16905 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16906 +              end;
16907 +             end;
16908 +         end;
16909 +         else if RELATION in ("=") then do;
16910 +            if ^first.node then do;
16911 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16912 +            end;
16913 +            else do;
16914 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16915 +            end;
16916 +         end;
16917 +         else if RELATION in ("ISMISSING") then do;
16918 +            if ^first.node then do;
16919 +              string = " AND "|| strip(varname) || " equals Missing";
16920 +            end;
16921 +            else do;
16922 +              string = "if "|| strip(varname) ||" equals Missing";
16923 +            end;
16924 +         end;
16925 +         else if RELATION in ("ISNOTMISSING") then do;
16926 +            if ^first.node then do;
16927 +              string = " AND "|| strip(varname) || " equals All Values";
16928 +            end;
16929 +            else do;
16930 +              string = "if "|| strip(varname) ||" equals All Values";
16931 +            end;
16932 +         end;
16933 +         if ^missing(varname) then origvar = varname;
16934 +         oldnode=node;
16936 +      end;
16937 +      else do;
16938 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16939 +          if MISSING(CHARACTER_VALUE) then do;
16940 +           if  NUMERIC_VALUE ne .  then do;
16941 +            if ^MISSING(string) then
16942 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16943 +            else
16944 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16945 +           end;
16946 +          end;
16947 +          else do;
16948 +            if ^MISSING(string) then
16949 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16950 +            else
16951 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16952 +          end;
16954 +         end;
16955 +         else if RELATION in ("=") then do;
16956 +           string = strip(string)||", "||strip(character_value);
16957 +         end;
16958 +         else if RELATION in ("ISMISSING") then do;
16960 +         end;
16961 +         if ^missing(varname) then origvar = varname;
16962 +         oldnode=node;
16963 +      end;
16964 +      if last.varname then do;
16965 +         if RELATION in ("ISMISSING") then do;
16966 +           if ^first.varname then do;
16967 +             string = strip(string) || " or MISSING";
16968 +           end;
16969 +         end;
16970 +         put string;
16971 +         if ^missing(varname) then origvar = varname;
16972 +         oldnode=node;
16973 +      end;
16975 +      if last.node then do;
16976 +         put "then ";
16977 +         put " Tree Node Identifier   = " node;
16979 +         %if "&nprior_flag" ne "." %then %do;
16980 +           put " Number of Observations = " NPRIORS;
16981 +         %end;
16982 +         %else %do;
16983 +           put " Number of Observations = " N;
16984 +         %end;
16986 +         %if &numpred gt 0 %then %do;
16987 +           %do i=1 %to &numpred;
16988 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16989 +           %end;
16990 +         %end;
16992 +         put " ";
16993 +         if ^missing(varname) then origvar = varname;
16994 +         oldnode=node;
16995 +      end;
16997 +  run;
16999 +  proc datasets lib=work nolist;
17000 +    delete tempoutpath outnodes;
17001 +  run;
17003 +  %doendm:
17004 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596463 kilobytes of physical memory.
NOTE: Will use 14445 out of 14445 training cases.
NOTE: Using memory pool with 188175360 bytes.
NOTE: Passed training data 11 times.
NOTE: Training used 3707720 bytes of work memory.
NOTE: The subtree sequence contains 39 subtrees. The largest has 66 nodes and 41 leaves.
NOTE: Using subtree with 25 nodes and 16 leaves.
NOTE: Using subtree with 25 nodes and 16 leaves.
NOTE: Created macro variable NLEAVES equal to 16.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_EMTREE has 1628 observations and 4 variables.
NOTE: The data set EMWS5.TREE2_OUTNODES has 25 observations and 24 variables.
NOTE: The data set EMWS5.TREE2_OUTPATH has 93 observations and 7 variables.
NOTE: The data set EMWS5.TREE2_OUTRULES has 380 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_OUTSEQ has 39 observations and 20 variables.
NOTE: The data set EMWS5.TREE2_OUTSTATS has 175 observations and 5 variables.
NOTE: The data set EMWS5.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_OUTTOPOLOGY has 25 observations and 5 variables.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.45 seconds
      cpu time            0.43 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.46 seconds
      cpu time            0.46 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS5.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 93 observations read from the data set EMWS5.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13Apr2022:18:53:26,
      Create Time=13Apr2022:18:53:26
 
NOTE: 186 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17006
17007  *------------------------------------------------------------*;
17008  * End TRAIN: Tree2;
17009  *------------------------------------------------------------*;
 
17010  *------------------------------------------------------------*;
17011  * Close any missing semi colons;
17012  *------------------------------------------------------------*;
17013  ;
17014  ;
17015  ;
17016  ;
17017  quit;
17018  *------------------------------------------------------------*;
17019  * Close any unbalanced quotes;
17020  *------------------------------------------------------------*;
17021  /*; *"; *'; */
17022  ;
17023  run;
17024  quit;
17025  /* Reset EM Options */
17026  options formchar="|----|+|---+=|-/\<>*";
17027  options nocenter ls=256 ps=10000;
17028  goptions reset=all device=GIF NODISPLAY;
 
17029  proc sort data=WORK.EM_USER_REPORT;
17030  by ID VIEW;
17031  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 13, 2022
Time:                18:53:26
*------------------------------------------------------------*
17133  %let EMEXCEPTIONSTRING=;
17134  *------------------------------------------------------------*;
17135  * SCORE: Tree2;
17136  *------------------------------------------------------------*;
17137  %let EM_ACTION = SCORE;
17138  %let syscc = 0;
17139  %macro main;
17140
17141    %if %upcase(&EM_ACTION) = CREATE %then %do;
17142      filename temp catalog 'sashelp.emmodl.tree_create.source';
17143      %include temp;
17144      filename temp;
17145
17146      %em_tree_create;
17147    %end;
17148
17149     %else
17150     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17151
17152         filename temp catalog 'sashelp.emmodl.tree_train.source';
17153         %include temp;
17154         filename temp;
17155         %em_tree_train;
17156     %end;
17157
17158    %else
17159    %if %upcase(&EM_ACTION) = SCORE %then %do;
17160      filename temp catalog 'sashelp.emmodl.tree_score.source';
17161      %include temp;
17162      filename temp;
17163
17164      %em_tree_score;
17165
17166    %end;
17167
17168    %else
17169    %if %upcase(&EM_ACTION) = REPORT %then %do;
17170
17171         filename temp catalog 'sashelp.emmodl.tree_report.source';
17172         %include temp;
17173         filename temp;
17174
17175         %em_tree_report;
17176     %end;
17177
17178    %else
17179    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17180
17181         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17182         %include temp;
17183         filename temp;
17184         %EM_TREE_OPENTREEVIEWER;
17185
17186     %end;
17187
17188    %else
17189    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17190
17191         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17192         %include temp;
17193         filename temp;
17194         %EM_TREE_CLOSETREEVIEWER;
17195
17196     %end;
17197
17198
17199     %doendm:
17200  %mend main;
17201
17202  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17204 +%macro em_tree_score;
17206 +   /* determine if multiple targets will be processed */
17207 +   %let em_tree_multipleTargets=N;
17208 +   %let em_tree_numTarget=1;
17209 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17210 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17211 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17212 +         %let em_tree_multipleTargets=N;
17213 +      %end;
17214 +      %else %do;
17215 +         /* create macro array of targets  */
17216 +         data _null_;
17217 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17218 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17219 +           if eof then
17220 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17221 +        run;
17223 +        %if &em_tree_numTarget gt 1 %then %do;
17224 +           %let em_tree_multipleTargets=Y;
17225 +        %end;
17226 +      %end;
17227 +   %end;
17229 +   /* build flow and publish scoring code */
17230 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17231 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17233 +   filename treeflow "&EM_USER_TREEFLOW";
17234 +   filename treepub "&EM_USER_TREEPUBLISH";
17236 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17237 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17239 +   %em_copyfile(infref=treeflow, outfref=flowref);
17240 +   %em_copyfile(infref=treepub, outfref=pubref);
17242 +   filename treeflow;
17243 +   filename treepub;
17245 +   /* if priors are used, add code to generate unadjusted residuals in export */
17246 +   %let useAdjPriors = N;
17247 +   data _null_;
17248 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17249 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17250 +   run;
17251 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17252 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17253 +      %include temp;
17254 +      filename temp;
17256 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17257 +      filename adjref "&EM_USER_adjResidualCode";
17258 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17260 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17262 +      filename adjref;
17263 +   %end;
17265 +   /* LEAF */
17266 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17267 +      data _null_;
17268 +        file flowref mod;
17269 +        put 'drop _LEAF_;';
17270 +      run;
17272 +      data _null_;
17273 +        file pubref mod;
17274 +        put 'drop _LEAF_;';
17275 +      run;
17277 +   %end;
17279 +   filename flowref;
17280 +   filename pubref;
17282 +   /* em_metachange code */
17283 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17284 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17285 +   %end;
17287 +   /* variable selection based on importance stat    */
17288 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17289 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17290 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17291 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17292 +     %let obs = %sysfunc(fetch(&dsid));
17293 +     %do %while(&obs=0);
17294 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17295 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17296 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17297 +       %let obs = %sysfunc(fetch(&dsid));
17298 +     %end;
17299 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17300 +   %end;
17302 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17303 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17304 +    %let tree_pred_vars = ;
17305 +    %let tree_pred_lvl =;
17306 +    %let numpred= 0;
17308 +    data _null_;
17309 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17310 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17311 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17312 +     if eof then
17313 +       call symput('numpred', strip(put(_N_, BEST.)));
17314 +    run;
17315 +   %end;
17317 +   %if &numpred ne 0 %then %do;
17318 +    %do i=1 %to &numpred;
17319 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17320 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17321 +    %end;
17322 +   %end;
17324 +   /* determine if multiple targets will be processed */
17325 +   %let em_tree_multipleTargets=N;
17326 +   %let em_tree_numTarget=1;
17327 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17328 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17329 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17330 +         %let em_tree_multipleTargets=N;
17331 +      %end;
17332 +      %else %do;
17333 +        data _null_;
17334 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17335 +          if eof then
17336 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17337 +        run;
17339 +        %if &em_tree_numTarget gt 1 %then %do;
17340 +           %let em_tree_multipleTargets=Y;
17341 +        %end;
17342 +     %end;
17343 +   %end;
17345 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17346 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17348 +      /* variable importance */
17349 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17350 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17352 +         %let validexist=0;
17353 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17354 +           %let validexist=1;
17355 +         %end;
17357 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17358 +         /* and the columns may not be generated                                                                                 */
17359 +         %let em_tree_cvexists=;
17360 +         %let em_tree_surrexists=.;
17361 +         data _null_;
17362 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17363 +            if eof then do ;
17364 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17365 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17366 +            end;
17367 +         run;
17369 +         data &EM_USER_OUTIMPORT;
17370 +            set &EM_USER_OUTIMPORT;
17372 +            /* format columns based on Precison value specified */
17373 +            format importance 15.&EM_PROPERTY_PRECISION
17374 +                 %if &validexist %then %do;
17375 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17376 +                 %end;
17377 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17378 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17379 +                 %end;
17380 +            ;
17381 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17382 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17383 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17384 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17385 +                 %if "&em_tree_surrexists" ne "" %then %do;
17386 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17387 +                 %end;
17388 +                 %if &validexist %then %do;
17389 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17390 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17391 +                 %end;
17392 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17393 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17394 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17395 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17396 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17397 +                 %end;
17398 +            ;
17399 +         run;
17401 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17402 +      %end;
17403 +   %end;
17405 +   %doendm:
17406 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:53:26,
      Create Time=13Apr2022:18:52:25
 
NOTE: 283 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:53:26,
      Create Time=13Apr2022:18:52:25
 
NOTE: 261 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10415,
      Last Modified=13Apr2022:18:53:26,
      Create Time=13Apr2022:18:52:25
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9742,
      Last Modified=13Apr2022:18:53:26,
      Create Time=13Apr2022:18:52:25
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17407
17408  *------------------------------------------------------------*;
17409  * End SCORE: Tree2;
17410  *------------------------------------------------------------*;
 
17411  proc sort data=WORK.EM_METACHANGE;
17412  by key uname;
17413  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17414  filename x "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas";
17415  data _null_;
17416  file x;
17417  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
17418  put 'ROLE = "REJECTED";';
17419  put 'end;';
17420  put 'else ';
17421  put 'if upcase(NAME) = "DEMREG" then do;';
17422  put 'ROLE = "REJECTED";';
17423  put 'end;';
17424  put 'else ';
17425  put 'if upcase(NAME) = "DEMTVREG" then do;';
17426  put 'ROLE = "REJECTED";';
17427  put 'end;';
17428  put 'else ';
17429  put 'if upcase(NAME) = "PROMCLASS" then do;';
17430  put 'ROLE = "REJECTED";';
17431  put 'end;';
17432  put 'else ';
17433  put 'if upcase(NAME) = "PROMSPEND" then do;';
17434  put 'ROLE = "REJECTED";';
17435  put 'end;';
17436  put 'else ';
17437  put 'if upcase(NAME) = "PROMTIME" then do;';
17438  put 'ROLE = "REJECTED";';
17439  put 'end;';
17440  put 'else ';
17441  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17442  put 'ROLE = "ASSESS";';
17443  put 'end;';
17444  put 'else ';
17445  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17446  put 'ROLE = "ASSESS";';
17447  put 'end;';
17448  put 'else ';
17449  put 'if upcase(NAME) = "_NODE_" then do;';
17450  put 'ROLE = "SEGMENT";';
17451  put 'LEVEL = "NOMINAL";';
17452  put 'end;';
17453  run;
 
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13Apr2022:18:53:26,
      Create Time=13Apr2022:18:52:25
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17454  filename x;
NOTE: Fileref X has been deassigned.
 
17455  filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
17456  *------------------------------------------------------------*;
17457  * Tree2: Scoring DATA data;
17458  *------------------------------------------------------------*;
17459  data EMWS5.Tree2_TRAIN
17460  / view=EMWS5.Tree2_TRAIN
17461  ;
17462  set EMWS5.Part_TRAIN
17463  ;
17464  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas.
17465 +****************************************************************;
17466 +******             DECISION TREE SCORING CODE             ******;
17467 +****************************************************************;
17468 +
17469 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17470 +LENGTH F_TargetBuy  $   12;
17471 +LENGTH I_TargetBuy  $   12;
17472 +LENGTH _WARN_  $    4;
17473 +
17474 +******              LABELS FOR NEW VARIABLES              ******;
17475 +label _NODE_ = 'Node' ;
17476 +label _LEAF_ = 'Leaf' ;
17477 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17478 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17479 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17480 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17481 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17482 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17483 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17484 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17485 +label F_TargetBuy = 'From: TargetBuy' ;
17486 +label I_TargetBuy = 'Into: TargetBuy' ;
17487 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17488 +label _WARN_ = 'Warnings' ;
17489 +
17490 +
17491 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17492 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17493 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17494 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17495 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17496 +
17497 +
17498 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17499 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17500 +
17501 +******             ASSIGN OBSERVATION TO NODE             ******;
17502 +IF  NOT MISSING(DemAge ) AND
17503 +  DemAge  <                 39.5 THEN DO;
17504 +  IF  NOT MISSING(DemAffl ) AND
17505 +    DemAffl  <                  9.5 THEN DO;
17506 +    _ARBFMT_1 = PUT( DemGender , $1.);
17507 +     %DMNORMIP( _ARBFMT_1);
17508 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17509 +      _NODE_  =                   14;
17510 +      _LEAF_  =                    1;
17511 +      P_TargetBuy0  =     0.45839416058394;
17512 +      P_TargetBuy1  =     0.54160583941605;
17513 +      Q_TargetBuy0  =     0.45839416058394;
17514 +      Q_TargetBuy1  =     0.54160583941605;
17515 +      V_TargetBuy0  =     0.40431266846361;
17516 +      V_TargetBuy1  =     0.59568733153638;
17517 +      I_TargetBuy  = '1' ;
17518 +      U_TargetBuy  =                    1;
17519 +      END;
17520 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17521 +      _NODE_  =                   15;
17522 +      _LEAF_  =                    2;
17523 +      P_TargetBuy0  =     0.64157706093189;
17524 +      P_TargetBuy1  =      0.3584229390681;
17525 +      Q_TargetBuy0  =     0.64157706093189;
17526 +      Q_TargetBuy1  =      0.3584229390681;
17527 +      V_TargetBuy0  =                 0.64;
17528 +      V_TargetBuy1  =                 0.36;
17529 +      I_TargetBuy  = '0' ;
17530 +      U_TargetBuy  =                    0;
17531 +      END;
17532 +    ELSE DO;
17533 +      _NODE_  =                   16;
17534 +      _LEAF_  =                    3;
17535 +      P_TargetBuy0  =     0.84615384615384;
17536 +      P_TargetBuy1  =     0.15384615384615;
17537 +      Q_TargetBuy0  =     0.84615384615384;
17538 +      Q_TargetBuy1  =     0.15384615384615;
17539 +      V_TargetBuy0  =     0.85483870967741;
17540 +      V_TargetBuy1  =     0.14516129032258;
17541 +      I_TargetBuy  = '0' ;
17542 +      U_TargetBuy  =                    0;
17543 +      END;
17544 +    END;
17545 +  ELSE IF  NOT MISSING(DemAffl ) AND
17546 +                    14.5 <= DemAffl  THEN DO;
17547 +    _NODE_  =                    7;
17548 +    _LEAF_  =                    6;
17549 +    P_TargetBuy0  =     0.05220883534136;
17550 +    P_TargetBuy1  =     0.94779116465863;
17551 +    Q_TargetBuy0  =     0.05220883534136;
17552 +    Q_TargetBuy1  =     0.94779116465863;
17553 +    V_TargetBuy0  =     0.05839416058394;
17554 +    V_TargetBuy1  =     0.94160583941605;
17555 +    I_TargetBuy  = '1' ;
17556 +    U_TargetBuy  =                    1;
17557 +    END;
17558 +  ELSE DO;
17559 +    _ARBFMT_1 = PUT( DemGender , $1.);
17560 +     %DMNORMIP( _ARBFMT_1);
17561 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17562 +      _NODE_  =                   17;
17563 +      _LEAF_  =                    4;
17564 +      P_TargetBuy0  =      0.2125850340136;
17565 +      P_TargetBuy1  =     0.78741496598639;
17566 +      Q_TargetBuy0  =      0.2125850340136;
17567 +      Q_TargetBuy1  =     0.78741496598639;
17568 +      V_TargetBuy0  =     0.21518987341772;
17569 +      V_TargetBuy1  =     0.78481012658227;
17570 +      I_TargetBuy  = '1' ;
17571 +      U_TargetBuy  =                    1;
17572 +      END;
17573 +    ELSE DO;
17574 +      _NODE_  =                   18;
17575 +      _LEAF_  =                    5;
17576 +      P_TargetBuy0  =     0.50574712643678;
17577 +      P_TargetBuy1  =     0.49425287356321;
17578 +      Q_TargetBuy0  =     0.50574712643678;
17579 +      Q_TargetBuy1  =     0.49425287356321;
17580 +      V_TargetBuy0  =      0.5563909774436;
17581 +      V_TargetBuy1  =     0.44360902255639;
17582 +      I_TargetBuy  = '0' ;
17583 +      U_TargetBuy  =                    0;
17584 +      END;
17585 +    END;
17586 +  END;
17587 +ELSE IF  NOT MISSING(DemAge ) AND
17588 +                  44.5 <= DemAge  THEN DO;
17589 +  IF  NOT MISSING(DemAffl ) AND
17590 +                    10.5 <= DemAffl  AND
17591 +    DemAffl  <                 15.5 THEN DO;
17592 +    _NODE_  =                   12;
17593 +    _LEAF_  =                   13;
17594 +    P_TargetBuy0  =     0.73689516129032;
17595 +    P_TargetBuy1  =     0.26310483870967;
17596 +    Q_TargetBuy0  =     0.73689516129032;
17597 +    Q_TargetBuy1  =     0.26310483870967;
17598 +    V_TargetBuy0  =     0.71123491179201;
17599 +    V_TargetBuy1  =     0.28876508820798;
17600 +    I_TargetBuy  = '0' ;
17601 +    U_TargetBuy  =                    0;
17602 +    END;
17603 +  ELSE IF  NOT MISSING(DemAffl ) AND
17604 +                    15.5 <= DemAffl  THEN DO;
17605 +    IF  NOT MISSING(DemAffl ) AND
17606 +                      18.5 <= DemAffl  THEN DO;
17607 +      _NODE_  =                   33;
17608 +      _LEAF_  =                   16;
17609 +      P_TargetBuy0  =     0.04166666666666;
17610 +      P_TargetBuy1  =     0.95833333333333;
17611 +      Q_TargetBuy0  =     0.04166666666666;
17612 +      Q_TargetBuy1  =     0.95833333333333;
17613 +      V_TargetBuy0  =                 0.08;
17614 +      V_TargetBuy1  =                 0.92;
17615 +      I_TargetBuy  = '1' ;
17616 +      U_TargetBuy  =                    1;
17617 +      END;
17618 +    ELSE DO;
17619 +      _ARBFMT_1 = PUT( DemGender , $1.);
17620 +       %DMNORMIP( _ARBFMT_1);
17621 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17622 +        _NODE_  =                   57;
17623 +        _LEAF_  =                   14;
17624 +        P_TargetBuy0  =     0.29473684210526;
17625 +        P_TargetBuy1  =     0.70526315789473;
17626 +        Q_TargetBuy0  =     0.29473684210526;
17627 +        Q_TargetBuy1  =     0.70526315789473;
17628 +        V_TargetBuy0  =     0.31818181818181;
17629 +        V_TargetBuy1  =     0.68181818181818;
17630 +        I_TargetBuy  = '1' ;
17631 +        U_TargetBuy  =                    1;
17632 +        END;
17633 +      ELSE DO;
17634 +        _NODE_  =                   58;
17635 +        _LEAF_  =                   15;
17636 +        P_TargetBuy0  =      0.5820895522388;
17637 +        P_TargetBuy1  =     0.41791044776119;
17638 +        Q_TargetBuy0  =      0.5820895522388;
17639 +        Q_TargetBuy1  =     0.41791044776119;
17640 +        V_TargetBuy0  =     0.78787878787878;
17641 +        V_TargetBuy1  =     0.21212121212121;
17642 +        I_TargetBuy  = '0' ;
17643 +        U_TargetBuy  =                    0;
17644 +        END;
17645 +      END;
17646 +    END;
17647 +  ELSE DO;
17648 +    _NODE_  =                   11;
17649 +    _LEAF_  =                   12;
17650 +    P_TargetBuy0  =     0.89773169151004;
17651 +    P_TargetBuy1  =     0.10226830848995;
17652 +    Q_TargetBuy0  =     0.89773169151004;
17653 +    Q_TargetBuy1  =     0.10226830848995;
17654 +    V_TargetBuy0  =     0.90019333011116;
17655 +    V_TargetBuy1  =     0.09980666988883;
17656 +    I_TargetBuy  = '0' ;
17657 +    U_TargetBuy  =                    0;
17658 +    END;
17659 +  END;
17660 +ELSE DO;
17661 +  IF  NOT MISSING(DemAffl ) AND
17662 +    DemAffl  <                  9.5 THEN DO;
17663 +    _NODE_  =                    8;
17664 +    _LEAF_  =                    7;
17665 +    P_TargetBuy0  =     0.76952236542835;
17666 +    P_TargetBuy1  =     0.23047763457164;
17667 +    Q_TargetBuy0  =     0.76952236542835;
17668 +    Q_TargetBuy1  =     0.23047763457164;
17669 +    V_TargetBuy0  =     0.76997245179063;
17670 +    V_TargetBuy1  =     0.23002754820936;
17671 +    I_TargetBuy  = '0' ;
17672 +    U_TargetBuy  =                    0;
17673 +    END;
17674 +  ELSE IF  NOT MISSING(DemAffl ) AND
17675 +                    14.5 <= DemAffl  THEN DO;
17676 +    _NODE_  =                   10;
17677 +    _LEAF_  =                   11;
17678 +    P_TargetBuy0  =     0.21804511278195;
17679 +    P_TargetBuy1  =     0.78195488721804;
17680 +    Q_TargetBuy0  =     0.21804511278195;
17681 +    Q_TargetBuy1  =     0.78195488721804;
17682 +    V_TargetBuy0  =      0.1917808219178;
17683 +    V_TargetBuy1  =     0.80821917808219;
17684 +    I_TargetBuy  = '1' ;
17685 +    U_TargetBuy  =                    1;
17686 +    END;
17687 +  ELSE DO;
17688 +    _ARBFMT_1 = PUT( DemGender , $1.);
17689 +     %DMNORMIP( _ARBFMT_1);
17690 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17691 +      _NODE_  =                   23;
17692 +      _LEAF_  =                    8;
17693 +      P_TargetBuy0  =     0.42231075697211;
17694 +      P_TargetBuy1  =     0.57768924302788;
17695 +      Q_TargetBuy0  =     0.42231075697211;
17696 +      Q_TargetBuy1  =     0.57768924302788;
17697 +      V_TargetBuy0  =                  0.4;
17698 +      V_TargetBuy1  =                  0.6;
17699 +      I_TargetBuy  = '1' ;
17700 +      U_TargetBuy  =                    1;
17701 +      END;
17702 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17703 +      _NODE_  =                   24;
17704 +      _LEAF_  =                    9;
17705 +      P_TargetBuy0  =     0.64150943396226;
17706 +      P_TargetBuy1  =     0.35849056603773;
17707 +      Q_TargetBuy0  =     0.64150943396226;
17708 +      Q_TargetBuy1  =     0.35849056603773;
17709 +      V_TargetBuy0  =     0.73228346456692;
17710 +      V_TargetBuy1  =     0.26771653543307;
17711 +      I_TargetBuy  = '0' ;
17712 +      U_TargetBuy  =                    0;
17713 +      END;
17714 +    ELSE DO;
17715 +      _NODE_  =                   25;
17716 +      _LEAF_  =                   10;
17717 +      P_TargetBuy0  =      0.8015873015873;
17718 +      P_TargetBuy1  =     0.19841269841269;
17719 +      Q_TargetBuy0  =      0.8015873015873;
17720 +      Q_TargetBuy1  =     0.19841269841269;
17721 +      V_TargetBuy0  =     0.86486486486486;
17722 +      V_TargetBuy1  =     0.13513513513513;
17723 +      I_TargetBuy  = '0' ;
17724 +      U_TargetBuy  =                    0;
17725 +      END;
17726 +    END;
17727 +  END;
17728 +
17729 +*****  RESIDUALS R_ *************;
17730 +IF  F_TargetBuy  NE '0'
17731 +AND F_TargetBuy  NE '1'  THEN DO;
17732 +        R_TargetBuy0  = .;
17733 +        R_TargetBuy1  = .;
17734 + END;
17735 + ELSE DO;
17736 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17737 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17738 +       SELECT( F_TargetBuy  );
17739 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17740 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17741 +       END;
17742 + END;
17743 +
17744 +****************************************************************;
17745 +******          END OF DECISION TREE SCORING CODE         ******;
17746 +****************************************************************;
17747 +
17748 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17749  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17750  quit;
17751  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17752  filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
17753  *------------------------------------------------------------*;
17754  * Tree2: Scoring VALIDATE data;
17755  *------------------------------------------------------------*;
17756  data EMWS5.Tree2_VALIDATE
17757  / view=EMWS5.Tree2_VALIDATE
17758  ;
17759  set EMWS5.Part_VALIDATE
17760  ;
17761  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas.
17762 +****************************************************************;
17763 +******             DECISION TREE SCORING CODE             ******;
17764 +****************************************************************;
17765 +
17766 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17767 +LENGTH F_TargetBuy  $   12;
17768 +LENGTH I_TargetBuy  $   12;
17769 +LENGTH _WARN_  $    4;
17770 +
17771 +******              LABELS FOR NEW VARIABLES              ******;
17772 +label _NODE_ = 'Node' ;
17773 +label _LEAF_ = 'Leaf' ;
17774 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17775 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17776 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17777 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17778 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17779 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17780 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17781 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17782 +label F_TargetBuy = 'From: TargetBuy' ;
17783 +label I_TargetBuy = 'Into: TargetBuy' ;
17784 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17785 +label _WARN_ = 'Warnings' ;
17786 +
17787 +
17788 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17789 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17790 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17791 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17792 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17793 +
17794 +
17795 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17796 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17797 +
17798 +******             ASSIGN OBSERVATION TO NODE             ******;
17799 +IF  NOT MISSING(DemAge ) AND
17800 +  DemAge  <                 39.5 THEN DO;
17801 +  IF  NOT MISSING(DemAffl ) AND
17802 +    DemAffl  <                  9.5 THEN DO;
17803 +    _ARBFMT_1 = PUT( DemGender , $1.);
17804 +     %DMNORMIP( _ARBFMT_1);
17805 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17806 +      _NODE_  =                   14;
17807 +      _LEAF_  =                    1;
17808 +      P_TargetBuy0  =     0.45839416058394;
17809 +      P_TargetBuy1  =     0.54160583941605;
17810 +      Q_TargetBuy0  =     0.45839416058394;
17811 +      Q_TargetBuy1  =     0.54160583941605;
17812 +      V_TargetBuy0  =     0.40431266846361;
17813 +      V_TargetBuy1  =     0.59568733153638;
17814 +      I_TargetBuy  = '1' ;
17815 +      U_TargetBuy  =                    1;
17816 +      END;
17817 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17818 +      _NODE_  =                   15;
17819 +      _LEAF_  =                    2;
17820 +      P_TargetBuy0  =     0.64157706093189;
17821 +      P_TargetBuy1  =      0.3584229390681;
17822 +      Q_TargetBuy0  =     0.64157706093189;
17823 +      Q_TargetBuy1  =      0.3584229390681;
17824 +      V_TargetBuy0  =                 0.64;
17825 +      V_TargetBuy1  =                 0.36;
17826 +      I_TargetBuy  = '0' ;
17827 +      U_TargetBuy  =                    0;
17828 +      END;
17829 +    ELSE DO;
17830 +      _NODE_  =                   16;
17831 +      _LEAF_  =                    3;
17832 +      P_TargetBuy0  =     0.84615384615384;
17833 +      P_TargetBuy1  =     0.15384615384615;
17834 +      Q_TargetBuy0  =     0.84615384615384;
17835 +      Q_TargetBuy1  =     0.15384615384615;
17836 +      V_TargetBuy0  =     0.85483870967741;
17837 +      V_TargetBuy1  =     0.14516129032258;
17838 +      I_TargetBuy  = '0' ;
17839 +      U_TargetBuy  =                    0;
17840 +      END;
17841 +    END;
17842 +  ELSE IF  NOT MISSING(DemAffl ) AND
17843 +                    14.5 <= DemAffl  THEN DO;
17844 +    _NODE_  =                    7;
17845 +    _LEAF_  =                    6;
17846 +    P_TargetBuy0  =     0.05220883534136;
17847 +    P_TargetBuy1  =     0.94779116465863;
17848 +    Q_TargetBuy0  =     0.05220883534136;
17849 +    Q_TargetBuy1  =     0.94779116465863;
17850 +    V_TargetBuy0  =     0.05839416058394;
17851 +    V_TargetBuy1  =     0.94160583941605;
17852 +    I_TargetBuy  = '1' ;
17853 +    U_TargetBuy  =                    1;
17854 +    END;
17855 +  ELSE DO;
17856 +    _ARBFMT_1 = PUT( DemGender , $1.);
17857 +     %DMNORMIP( _ARBFMT_1);
17858 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17859 +      _NODE_  =                   17;
17860 +      _LEAF_  =                    4;
17861 +      P_TargetBuy0  =      0.2125850340136;
17862 +      P_TargetBuy1  =     0.78741496598639;
17863 +      Q_TargetBuy0  =      0.2125850340136;
17864 +      Q_TargetBuy1  =     0.78741496598639;
17865 +      V_TargetBuy0  =     0.21518987341772;
17866 +      V_TargetBuy1  =     0.78481012658227;
17867 +      I_TargetBuy  = '1' ;
17868 +      U_TargetBuy  =                    1;
17869 +      END;
17870 +    ELSE DO;
17871 +      _NODE_  =                   18;
17872 +      _LEAF_  =                    5;
17873 +      P_TargetBuy0  =     0.50574712643678;
17874 +      P_TargetBuy1  =     0.49425287356321;
17875 +      Q_TargetBuy0  =     0.50574712643678;
17876 +      Q_TargetBuy1  =     0.49425287356321;
17877 +      V_TargetBuy0  =      0.5563909774436;
17878 +      V_TargetBuy1  =     0.44360902255639;
17879 +      I_TargetBuy  = '0' ;
17880 +      U_TargetBuy  =                    0;
17881 +      END;
17882 +    END;
17883 +  END;
17884 +ELSE IF  NOT MISSING(DemAge ) AND
17885 +                  44.5 <= DemAge  THEN DO;
17886 +  IF  NOT MISSING(DemAffl ) AND
17887 +                    10.5 <= DemAffl  AND
17888 +    DemAffl  <                 15.5 THEN DO;
17889 +    _NODE_  =                   12;
17890 +    _LEAF_  =                   13;
17891 +    P_TargetBuy0  =     0.73689516129032;
17892 +    P_TargetBuy1  =     0.26310483870967;
17893 +    Q_TargetBuy0  =     0.73689516129032;
17894 +    Q_TargetBuy1  =     0.26310483870967;
17895 +    V_TargetBuy0  =     0.71123491179201;
17896 +    V_TargetBuy1  =     0.28876508820798;
17897 +    I_TargetBuy  = '0' ;
17898 +    U_TargetBuy  =                    0;
17899 +    END;
17900 +  ELSE IF  NOT MISSING(DemAffl ) AND
17901 +                    15.5 <= DemAffl  THEN DO;
17902 +    IF  NOT MISSING(DemAffl ) AND
17903 +                      18.5 <= DemAffl  THEN DO;
17904 +      _NODE_  =                   33;
17905 +      _LEAF_  =                   16;
17906 +      P_TargetBuy0  =     0.04166666666666;
17907 +      P_TargetBuy1  =     0.95833333333333;
17908 +      Q_TargetBuy0  =     0.04166666666666;
17909 +      Q_TargetBuy1  =     0.95833333333333;
17910 +      V_TargetBuy0  =                 0.08;
17911 +      V_TargetBuy1  =                 0.92;
17912 +      I_TargetBuy  = '1' ;
17913 +      U_TargetBuy  =                    1;
17914 +      END;
17915 +    ELSE DO;
17916 +      _ARBFMT_1 = PUT( DemGender , $1.);
17917 +       %DMNORMIP( _ARBFMT_1);
17918 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17919 +        _NODE_  =                   57;
17920 +        _LEAF_  =                   14;
17921 +        P_TargetBuy0  =     0.29473684210526;
17922 +        P_TargetBuy1  =     0.70526315789473;
17923 +        Q_TargetBuy0  =     0.29473684210526;
17924 +        Q_TargetBuy1  =     0.70526315789473;
17925 +        V_TargetBuy0  =     0.31818181818181;
17926 +        V_TargetBuy1  =     0.68181818181818;
17927 +        I_TargetBuy  = '1' ;
17928 +        U_TargetBuy  =                    1;
17929 +        END;
17930 +      ELSE DO;
17931 +        _NODE_  =                   58;
17932 +        _LEAF_  =                   15;
17933 +        P_TargetBuy0  =      0.5820895522388;
17934 +        P_TargetBuy1  =     0.41791044776119;
17935 +        Q_TargetBuy0  =      0.5820895522388;
17936 +        Q_TargetBuy1  =     0.41791044776119;
17937 +        V_TargetBuy0  =     0.78787878787878;
17938 +        V_TargetBuy1  =     0.21212121212121;
17939 +        I_TargetBuy  = '0' ;
17940 +        U_TargetBuy  =                    0;
17941 +        END;
17942 +      END;
17943 +    END;
17944 +  ELSE DO;
17945 +    _NODE_  =                   11;
17946 +    _LEAF_  =                   12;
17947 +    P_TargetBuy0  =     0.89773169151004;
17948 +    P_TargetBuy1  =     0.10226830848995;
17949 +    Q_TargetBuy0  =     0.89773169151004;
17950 +    Q_TargetBuy1  =     0.10226830848995;
17951 +    V_TargetBuy0  =     0.90019333011116;
17952 +    V_TargetBuy1  =     0.09980666988883;
17953 +    I_TargetBuy  = '0' ;
17954 +    U_TargetBuy  =                    0;
17955 +    END;
17956 +  END;
17957 +ELSE DO;
17958 +  IF  NOT MISSING(DemAffl ) AND
17959 +    DemAffl  <                  9.5 THEN DO;
17960 +    _NODE_  =                    8;
17961 +    _LEAF_  =                    7;
17962 +    P_TargetBuy0  =     0.76952236542835;
17963 +    P_TargetBuy1  =     0.23047763457164;
17964 +    Q_TargetBuy0  =     0.76952236542835;
17965 +    Q_TargetBuy1  =     0.23047763457164;
17966 +    V_TargetBuy0  =     0.76997245179063;
17967 +    V_TargetBuy1  =     0.23002754820936;
17968 +    I_TargetBuy  = '0' ;
17969 +    U_TargetBuy  =                    0;
17970 +    END;
17971 +  ELSE IF  NOT MISSING(DemAffl ) AND
17972 +                    14.5 <= DemAffl  THEN DO;
17973 +    _NODE_  =                   10;
17974 +    _LEAF_  =                   11;
17975 +    P_TargetBuy0  =     0.21804511278195;
17976 +    P_TargetBuy1  =     0.78195488721804;
17977 +    Q_TargetBuy0  =     0.21804511278195;
17978 +    Q_TargetBuy1  =     0.78195488721804;
17979 +    V_TargetBuy0  =      0.1917808219178;
17980 +    V_TargetBuy1  =     0.80821917808219;
17981 +    I_TargetBuy  = '1' ;
17982 +    U_TargetBuy  =                    1;
17983 +    END;
17984 +  ELSE DO;
17985 +    _ARBFMT_1 = PUT( DemGender , $1.);
17986 +     %DMNORMIP( _ARBFMT_1);
17987 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17988 +      _NODE_  =                   23;
17989 +      _LEAF_  =                    8;
17990 +      P_TargetBuy0  =     0.42231075697211;
17991 +      P_TargetBuy1  =     0.57768924302788;
17992 +      Q_TargetBuy0  =     0.42231075697211;
17993 +      Q_TargetBuy1  =     0.57768924302788;
17994 +      V_TargetBuy0  =                  0.4;
17995 +      V_TargetBuy1  =                  0.6;
17996 +      I_TargetBuy  = '1' ;
17997 +      U_TargetBuy  =                    1;
17998 +      END;
17999 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
18000 +      _NODE_  =                   24;
18001 +      _LEAF_  =                    9;
18002 +      P_TargetBuy0  =     0.64150943396226;
18003 +      P_TargetBuy1  =     0.35849056603773;
18004 +      Q_TargetBuy0  =     0.64150943396226;
18005 +      Q_TargetBuy1  =     0.35849056603773;
18006 +      V_TargetBuy0  =     0.73228346456692;
18007 +      V_TargetBuy1  =     0.26771653543307;
18008 +      I_TargetBuy  = '0' ;
18009 +      U_TargetBuy  =                    0;
18010 +      END;
18011 +    ELSE DO;
18012 +      _NODE_  =                   25;
18013 +      _LEAF_  =                   10;
18014 +      P_TargetBuy0  =      0.8015873015873;
18015 +      P_TargetBuy1  =     0.19841269841269;
18016 +      Q_TargetBuy0  =      0.8015873015873;
18017 +      Q_TargetBuy1  =     0.19841269841269;
18018 +      V_TargetBuy0  =     0.86486486486486;
18019 +      V_TargetBuy1  =     0.13513513513513;
18020 +      I_TargetBuy  = '0' ;
18021 +      U_TargetBuy  =                    0;
18022 +      END;
18023 +    END;
18024 +  END;
18025 +
18026 +*****  RESIDUALS R_ *************;
18027 +IF  F_TargetBuy  NE '0'
18028 +AND F_TargetBuy  NE '1'  THEN DO;
18029 +        R_TargetBuy0  = .;
18030 +        R_TargetBuy1  = .;
18031 + END;
18032 + ELSE DO;
18033 +       R_TargetBuy0  =  -P_TargetBuy0 ;
18034 +       R_TargetBuy1  =  -P_TargetBuy1 ;
18035 +       SELECT( F_TargetBuy  );
18036 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
18037 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
18038 +       END;
18039 + END;
18040 +
18041 +****************************************************************;
18042 +******          END OF DECISION TREE SCORING CODE         ******;
18043 +****************************************************************;
18044 +
18045 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18046  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18047  quit;
18048  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18050  proc sort data=WORK.EM_USER_REPORT;
18051  by ID VIEW;
18052  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18053  *------------------------------------------------------------*;
18054  * Tree2: Computing metadata for TRAIN data;
18055  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18436  data EMWS5.Tree2_EMINFO;
18437  length TARGET KEY $32 DATA $43;
18438  input TARGET KEY DATA $;
18439  cards;
 
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18443  run;
18444  proc sort data = EMWS5.Tree2_EMINFO NOTHREADS;
18445  by TARGET KEY;
18446  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18447  proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18448  by TARGET KEY;
18449  run;
 
NOTE: There were 3 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18450  proc sort data = EMWS5.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18451  by TARGET KEY;
18452  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18453  data EMWS5.Tree2_EMINFO;
18454  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18455  by TARGET KEY;
18456  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18457  proc datasets lib=work nolist;
18458  delete TEMP_INFO SORTEDEMINFO;
18459  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18460  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS5.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 13, 2022
Time:                18:53:27
*------------------------------------------------------------*
18484  data EMWS5.Tree2_EMOUTFIT;
18485  set EMWS5.Tree2_EMOUTFIT;
18486  length TargetLabel $200;
18487  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18488  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18489  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMOUTFIT.
NOTE: The data set EMWS5.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18490  proc sort data=EMWS5.Tree2_EMREPORTFIT nothreads;
18491  by TARGET;
18492  run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMREPORTFIT.
NOTE: The data set EMWS5.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18493  %let _EMwarndup = 0;
18494  %let _EMtargetdup =;
18495  %let _EMASEtargetdup =;
18496  data _null_;
18497  set EMWS5.Tree2_EMOUTFIT;
18498  if .<_ASE_<0.000001 then do;
18499  call symput('_EMwarndup', '1');
18500  call symput('_EMtargetdup', target);
18501  call symput('_EMASEtargetdup', put(_ASE_, best.));
18502  end;
18503  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18504  %let EMEXCEPTIONSTRING=;
18505  *------------------------------------------------------------*;
18506  * REPORT: Tree2;
18507  *------------------------------------------------------------*;
18508  %let EM_ACTION = REPORT;
18509  %let syscc = 0;
18510  %macro main;
18511
18512    %if %upcase(&EM_ACTION) = CREATE %then %do;
18513      filename temp catalog 'sashelp.emmodl.tree_create.source';
18514      %include temp;
18515      filename temp;
18516
18517      %em_tree_create;
18518    %end;
18519
18520     %else
18521     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18522
18523         filename temp catalog 'sashelp.emmodl.tree_train.source';
18524         %include temp;
18525         filename temp;
18526         %em_tree_train;
18527     %end;
18528
18529    %else
18530    %if %upcase(&EM_ACTION) = SCORE %then %do;
18531      filename temp catalog 'sashelp.emmodl.tree_score.source';
18532      %include temp;
18533      filename temp;
18534
18535      %em_tree_score;
18536
18537    %end;
18538
18539    %else
18540    %if %upcase(&EM_ACTION) = REPORT %then %do;
18541
18542         filename temp catalog 'sashelp.emmodl.tree_report.source';
18543         %include temp;
18544         filename temp;
18545
18546         %em_tree_report;
18547     %end;
18548
18549    %else
18550    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18551
18552         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18553         %include temp;
18554         filename temp;
18555         %EM_TREE_OPENTREEVIEWER;
18556
18557     %end;
18558
18559    %else
18560    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18561
18562         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18563         %include temp;
18564         filename temp;
18565         %EM_TREE_CLOSETREEVIEWER;
18566
18567     %end;
18568
18569
18570     %doendm:
18571  %mend main;
18572
18573  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18575 +%macro em_tree_makePlotDs( multipleTar= );
18577 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18578 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18579 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18580 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18582 +  /* determine if validation statistics will be displayed */
18583 +  %let validflag=N;
18584 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18585 +    /* determine if validation data exists */
18586 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18587 +      %let validflag=Y;
18588 +    %end;
18589 +  %end;
18591 +   /* retrieve name of decmeta even in presence of multiple targets */
18592 +   %let decmeta = ;
18593 +   %if &EM_DEC_DECMETA eq %then %do;
18594 +     data _Target;
18595 +       set &em_data_variableset;
18596 +       where ROLE='TARGET' and USE in('D', 'Y');
18597 +       keep NAME;
18598 +     run;
18599 +     proc sort data=_Target;
18600 +       by NAME;
18601 +     run;
18602 +     proc sort data=EM_TARGETDECINFO;
18603 +       by TARGET;
18604 +     run;
18605 +     data _Target;
18606 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18607 +       by NAME;
18608 +       if _a then do;
18609 +         call symput('decmeta', trim(DECMETA));
18610 +       end;
18611 +     run;
18612 +     proc delete data=_Target;run;
18613 +   %end;
18614 +   %else %let decmeta = &EM_DEC_DECMETA;
18617 +  /* retrieve targetEvent from decmeta */
18618 +  %let targetEvent=;
18619 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18620 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18621 +      data _null_;
18622 +       set &DECMETA(where=(_TYPE_="TARGET"));
18623 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18624 +      run;
18625 +    %end;
18626 +  %end;
18628 +  /* retrieve predicted var for targetEvent from decmeta */
18629 +  %let predTarget=;
18630 +  %let predLvl=;
18631 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18632 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18633 +      data _null_;
18634 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18635 +       call symput('predTarget', strip(VARIABLE));
18636 +       call symput('predLvl', strip(LEVEL));
18637 +      run;
18638 +    %end;
18639 +  %end;
18640 +  %else %do;
18641 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18642 +      data _null_;
18643 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18644 +       call symput('predTarget', strip(VARIABLE));
18645 +      run;
18646 +    %end;
18647 +  %end;
18649 +  /* create BelowText value */
18650 +  data belowtext;
18651 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18652 +    keep node belowtext;
18653 +  run;
18655 +  /* replace belowtext with variable label if it exists */
18656 +  data belowtext2;
18657 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18658 +    keep node belowtextlbl;
18659 +  run;
18661 +  proc sort data=belowtext; by node; run;
18662 +  proc sort data=belowtext2; by node; run;
18664 +  data belowtext;
18665 +    merge belowtext belowtext2(in=_a);
18666 +    by node;
18667 +    if _a then belowtext=belowtextlbl;
18668 +    keep node belowtext;
18669 +  run;
18671 +  /* create AboveText value */
18672 +  data abovetext;
18673 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18674 +  run;
18675 +  proc sort data=abovetext; by node numeric_value; run;
18677 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18678 +  data abovetext;
18679 +    set abovetext(rename=(node=parent));
18680 +    by parent numeric_value;
18681 +    retain abovetext tempstring flag branch origval origchar ;
18682 +    length abovetext $256;
18683 +    length tempstring origchar $64;
18685 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18686 +      if first.parent then do;
18687 +        if missing(character_value) then do;
18688 +          numeric_value = round(numeric_value, &sp_precision);
18689 +          abovetext = "< "||strip(NUMERIC_VALUE);
18690 +          branch = 1;
18691 +          origval = numeric_value;
18692 +          output;
18693 +        end;
18694 +        else do;
18695 +          abovetext = "< "||strip(CHARACTER_VALUE);
18696 +          branch = 1;
18697 +          origchar = character_value;
18698 +          output;
18699 +        end;
18701 +        if first.parent AND last.parent then do;
18702 +          if missing(character_value) then do;
18703 +            numeric_value = round(numeric_value, &sp_precision);
18704 +            branch = branch + 1;
18705 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18706 +            output;
18707 +          end;
18708 +          else do;
18709 +            branch = branch + 1;
18710 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18711 +            output;
18712 +          end;
18713 +        end;
18714 +      end;
18715 +      else if last.parent then do;
18716 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18717 +          if missing(character_value) then do;
18718 +            numeric_value = round(numeric_value, &sp_precision);
18719 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18720 +          end;
18721 +          else do;
18722 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18723 +          end;
18724 +          branch = branch + 1;
18725 +          output;
18727 +          if missing(character_value) then do;
18728 +            numeric_value = round(numeric_value, &sp_precision);
18729 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18730 +          end;
18731 +          else do;
18732 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18733 +          end;
18734 +          branch = branch + 1;
18735 +          output;
18736 +        end;
18737 +        else do;
18738 +          if missing(character_value) then do;
18739 +            numeric_value = round(numeric_value, &sp_precision);
18740 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18741 +          end;
18742 +          else do;
18743 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18744 +          end;
18745 +          branch = branch + 1;
18746 +          output;
18747 +        end;
18748 +      end;
18749 +      else do;
18750 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18751 +          if missing(character_value) then do;
18752 +            numeric_value = round(numeric_value,&sp_precision);
18753 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18754 +            origval = numeric_value;
18755 +          end;
18756 +          else do;
18757 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18758 +            origchar = character_value;
18759 +          end;
18760 +          branch = branch + 1;
18761 +          output;
18763 +        end;
18764 +        else do;
18765 +          if missing(character_value) then do;
18766 +            numeric_value = round(numeric_value, &sp_precision);
18767 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18768 +            origval = numeric_value;
18769 +          end;
18770 +          else do;
18771 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18772 +            origval = character_value;
18773 +          end;
18774 +          branch = branch + 1;
18775 +          output;
18776 +        end;
18777 +      end;
18778 +    end;
18779 +    else do;
18780 +       if first.numeric_value then do;
18781 +         flag = 0;
18782 +         abovetext = strip(CHARACTER_VALUE);
18783 +         branch = numeric_value;
18784 +         if first.numeric_value AND last.numeric_value then do;
18785 +           output;
18786 +         end;
18787 +       end;
18788 +       else if last.numeric_value then do;
18789 +         if flag=0 then do;
18790 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18791 +           length = length(strip(tempstring));
18792 +           if length < 32 then do;
18793 +             abovetext = strip(tempstring);
18794 +           end;
18795 +           else do;
18796 +             abovetext = strip(abovetext)||", ...";
18797 +             flag = 1;
18798 +           end;
18799 +         end;
18800 +         branch = numeric_value;
18801 +         output;
18802 +       end;
18803 +       else do;
18804 +         if flag=0 then do;
18805 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18806 +           length = length(strip(tempstring));
18807 +           if length < 32 then do;
18808 +             abovetext = strip(tempstring);
18809 +           end;
18810 +           else do;
18811 +             abovetext = strip(abovetext)||", ...";
18812 +             flag=1;
18813 +           end;
18814 +         end;
18815 +         branch = numeric_value;
18816 +       end;
18817 +    end;
18818 +    keep parent branch abovetext;
18819 +  run;
18821 +  /* Missing value to abovetext */
18822 +  data tempmissing;
18823 +    set &EM_USER_OUTRULES;
18824 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18825 +    rename node=parent numeric_value=branch character_value=misschar;
18826 +  run;
18829 +  proc sort data=abovetext; by parent branch; run;
18830 +  proc sort data=tempmissing; by parent branch; run;
18831 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18833 +  data tempoutnodes;
18834 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18835 +    by parent branch;
18836 +    length traintotal validtotal 8;
18837 +    retain traintotal validtotal;
18839 +    if _a then do;
18840 +      if ^MISSING(abovetext) then do;
18841 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18842 +      end;
18843 +      else do;
18844 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18845 +      end;
18846 +    end;
18847 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18849 +    if node=1 then do;
18850 +      traintotal = N;
18851 +      validtotal=VN;
18852 +    end;
18854 +    drop role rank stat misschar belowtext;
18855 +  run;
18856 +  proc sort data=tempoutnodes; by node; run;
18857 +  proc sort data=belowtext; by node; run;
18859 +  data tempoutnodes;
18860 +    merge tempoutnodes belowtext;
18861 +    by node;
18863 +  run;
18865 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18866 +  %let adjusted = N;
18867 +  %let npriors = 0;
18868 +  data _null_ ;
18869 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18870 +    if eof then do ;
18871 +      call symput("npriors" , strip(put(_N_,best.))) ;
18872 +    end;
18873 +  run;
18874 +  %if &npriors gt 0 %then %let adjusted=Y;
18877 +  /* create a table with targetUsed and targetLevel columns for each node */
18878 +  data temptarmeta;
18879 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18880 +    %if &multipleTar eq N %then %do;
18881 +      AND USE in ('D', 'Y')
18882 +    %end;
18883 +    ));
18884 +    length TARGET $32;
18885 +    Target=name;
18886 +    keep target level;
18887 +  run;
18889 +  %if &multipleTar eq Y %then %do;
18890 +    data temptargetused;
18891 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18892 +      keep node target;
18893 +    run;
18894 +    proc sort data=temptargetused; by target; run;
18895 +    proc sort data=temptarmeta; by target; run;
18896 +    data temptargetused;
18897 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18898 +      by target;
18899 +      if _a and _b;
18900 +    run;
18901 +  %end;
18902 +  %else %do;
18903 +    data temptargetused;
18904 +      set &EM_USER_OUTSTATS;
18905 +      length target $32 tarlevel $10;
18906 +      target="%EM_TARGET";
18907 +      tarlevel="%EM_TARGET_LEVEL";
18908 +      keep node target tarlevel;
18909 +    run;
18910 +    proc sort data=temptargetused nodupkey; by node; run;
18911 +  %end;
18913 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18914 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18915 +  proc sort data=temptargetused; by node; run;
18918 +  /* create tables for all interval targets as well as all class targets */
18919 +  data tempinterval tempclass;
18920 +    merge tempoutstats temptargetused( rename=(target=targetused));
18921 +    by node;
18922 +    %if "&multipleTar" eq "Y" %then %do;
18923 +      if ((missing(Target)) OR (target=targetused ));
18924 +    %end;
18926 +    if tarlevel="INTERVAL" then output tempinterval;
18927 +    else output tempclass;
18928 +  run;
18930 +  /* initialize intTarget and classTarget flags */
18931 +  %let em_intNobs =0;
18932 +  %let em_classNobs = 0;
18933 +  %let em_intTarget= N;
18934 +  %let em_classTarget= N;
18936 +  proc sql;
18937 +    reset noprint;
18938 +    select count(*) into :em_intNobs from tempinterval;
18939 +  quit;
18940 +  proc sql;
18941 +    reset noprint;
18942 +    select count(*) into :em_classNobs from tempclass;
18943 +  quit;
18945 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18946 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18948 +  /* retrieve all information for interval targets */
18949 +  %if &em_intTarget eq Y %then %do;
18951 +    /* determine if leaf variable exists */
18952 +    %let dsid=%sysfunc(open(tempinterval,i));
18953 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18954 +    %let rc=%sysfunc(close(&dsid));
18956 +    proc transpose data=tempinterval
18957 +      %if &leafexists %then %do;
18958 +        (drop=leaf)
18959 +      %end;
18960 +      %if &validexist %then %do;
18961 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18962 +      %end;
18963 +      %else %do;
18964 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18965 +      %end;
18966 +      by node;
18967 +      id statname;
18968 +    run;
18969 +    data tempinterval;
18970 +      set tempinterval;
18971 +      if missing(N) then delete;
18972 +    run;
18973 +  %end;
18975 +  /* retrieve all information for class targets */
18976 +  %if &em_classTarget eq Y %then %do;
18977 +    proc sort data=tempclass; by node category; run;
18978 +    %if &validflag eq N %then %do;
18979 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18980 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18981 +    %end;
18982 +    %else %do;
18983 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18984 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18985 +    %end;
18986 +      set tempclass;
18988 +      %if &validflag eq N %then %do;
18989 +        %if "&adjusted" eq "N" %then %do;
18990 +          if statname="N" then output tempn;
18991 +        %end;
18992 +        %else %do;
18993 +          if statname="NPRIORS" then output tempn;
18994 +        %end;
18995 +        else if statname="PREDICTION" then output temppredict;
18996 +        else if statname="PROBABILITY" then output tempprob;
18997 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18998 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18999 +      %end;
19000 +      %else %do;
19001 +        %if "&adjusted" eq "N" %then %do;
19002 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19003 +        %end;
19004 +        %else %do;
19005 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19006 +        %end;
19007 +        else if statname="PREDICTION" then output temppredict;
19008 +        else if statname="PROBABILITY" then output tempprob;
19009 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19010 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19011 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19012 +      %end;
19013 +    run;
19016 +    /* determine if profit/loss exists in tempprofit */
19017 +    %let em_profitflag=0;
19018 +    %let em_lossflag=0;
19019 +    proc sql;
19020 +      reset noprint;
19021 +      select count(*) into :em_profitflag from tempprofit;
19022 +    quit;
19023 +    proc sql;
19024 +      reset noprint;
19025 +      select count(*) into :em_lossflag from temploss;
19026 +    quit;
19028 +    %if &validFlag eq Y %then %do;
19029 +      proc transpose data=tempn
19030 +        %if "&adjusted" eq "N" %then %do;
19031 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19032 +        %end;
19033 +        %else %do;
19034 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19035 +        %end;
19036 +        by node;
19037 +        id statname;
19038 +      run;
19039 +      %if &em_profitflag ne 0 %then %do;
19040 +        proc transpose data=tempprofit out=tempprofit;
19041 +          by node category;
19042 +          id statname ;
19043 +        run;
19044 +      %end;
19045 +      %if &em_lossflag ne 0 %then %do;
19046 +        proc transpose data=temploss out=temploss;
19047 +          by node category;
19048 +          id statname ;
19049 +        run;
19050 +      %end;
19051 +      data tempprob;
19052 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19053 +        by node
19054 +        %if &multipleTar eq Y %then %do;
19055 +          target
19056 +        %end;
19057 +        category;
19058 +      run;
19059 +    %end;
19061 +    /* store percentcorrect value */
19062 +    data temppredict;
19063 +      merge tempprob temppredict(in=_a);
19064 +      by node category;
19065 +      if _a then do;
19066 +        percentCorrect = statvalue;
19067 +        %if &validFlag eq Y %then %do;
19068 +          vpercentCorrect= vstatvalue;
19069 +        %end;
19070 +      end;
19071 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19072 +      %if &validFlag eq Y %then %do;
19073 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19074 +      %end;
19075 +      ;
19076 +      if missing(percentCorrect) then delete;
19077 +      drop target;
19078 +    run;
19080 +    /* build profittext */
19081 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19082 +      data tempprofittext(keep= node profittext profitloss);
19083 +        length profittext $800 profitloss 8.;
19084 +        retain profittext profitloss;
19086 +        merge tempprob
19087 +        %if &em_profitflag ne 0 %then %do;
19088 +          tempprofit
19089 +        %end;
19090 +        %else %if &em_lossflag ne 0 %then %do;
19091 +          temploss
19092 +        %end;
19093 +        ;
19094 +        by node category;
19096 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19097 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19098 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19099 +          %let profittype = ALL;
19100 +        %end;
19102 +        /* create the profitloss variable for nodecolor if selected */
19103 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19105 +        %if "&profittype" eq "ALL" %then %do;
19106 +          if strip(CATEGORY)="&targetEvent" then do;
19107 +            profitloss=statvalue;
19108 +          end;
19109 +          if first.node then do;
19110 +            %if &validFlag eq N %then %do;
19111 +             %if &em_profitflag ne 0 %then %do;
19112 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19113 +             %end;
19114 +             %if &em_lossflag ne 0 %then %do;
19115 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19116 +             %end;
19117 +            %end;
19118 +            %else %do;
19119 +             %if &em_profitflag ne 0 %then %do;
19120 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19120!+;
19121 +             %end;
19122 +             %if &em_lossflag ne 0 %then %do;
19123 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19124 +             %end;
19125 +            %end;
19126 +          end;
19127 +          else if last.node then do;
19128 +            %if &validFlag eq N %then %do;
19129 +             %if &em_profitflag ne 0 %then %do;
19130 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19131 +             %end;
19132 +             %if &em_lossflag ne 0 %then %do;
19133 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19134 +             %end;
19135 +             /*if CATEGORY="&targetEvent" then do;
19136 +               profitloss=statvalue;
19137 +             end;*/
19138 +            %end;
19139 +            %else %do;
19140 +             %if &em_profitflag ne 0 %then %do;
19141 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19141!+14.&EM_PROPERTY_SPLITPRECISION);
19142 +                if CATEGORY="&targetEvent" then do;
19143 +                 profitloss=ALTERNATIVE_PROFIT;
19144 +                end;
19145 +             %end;
19146 +             %if &em_lossflag ne 0 %then %do;
19147 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19147!+14.&EM_PROPERTY_SPLITPRECISION);
19148 +                if CATEGORY="&targetEvent" then do;
19149 +                  profitloss=ALTERNATIVE_LOSS;
19150 +                end;
19151 +             %end;
19152 +            %end;
19153 +            output;
19154 +          end;
19155 +          else do;
19156 +            %if &validFlag eq N %then %do;
19157 +             %if &em_profitflag ne 0 %then %do;
19158 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19159 +             %end;
19160 +             %if &em_lossflag ne 0 %then %do;
19161 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19162 +             %end;
19163 +            %end;
19164 +            %else %do;
19165 +             %if &em_profitflag ne 0 %then %do;
19166 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19166!+14.&EM_PROPERTY_SPLITPRECISION);
19167 +             %end;
19168 +             %if &em_lossflag ne 0 %then %do;
19169 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19169!+14.&EM_PROPERTY_SPLITPRECISION);
19170 +             %end;
19171 +            %end;
19172 +          end;
19173 +        %end;
19174 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19175 +          if strip(CATEGORY) = "&targetevent" then do;
19176 +            %if &validFlag eq N %then %do;
19177 +             %if &em_profitflag ne 0 %then %do;
19178 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19179 +             %end;
19180 +             %if &em_lossflag ne 0 %then %do;
19181 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19182 +             %end;
19183 +             profitloss=statvalue;
19184 +            %end;
19185 +            %else %do;
19186 +             %if &em_profitflag ne 0 %then %do;
19187 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19187!+;
19188 +                profitloss=ALTERNATIVE_PROFIT;
19189 +             %end;
19190 +             %if &em_lossflag ne 0 %then %do;
19191 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19192 +                profitloss=ALTERNATIVE_LOSS;
19193 +             %end;
19194 +            %end;
19195 +            output;
19196 +          end;
19197 +        %end;
19198 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19199 +          if strip(CATEGORY) = "&targetevent" then do;
19200 +            %if &validFlag eq N %then %do;
19201 +             profitloss=statvalue;
19202 +            %end;
19203 +            %else %do;
19204 +             %if &em_profitflag ne 0 %then %do;
19205 +                profitloss=ALTERNATIVE_PROFIT;
19206 +             %end;
19207 +             %if &em_lossflag ne 0 %then %do;
19208 +                profitloss=ALTERNATIVE_LOSS;
19209 +             %end;
19210 +            %end;
19211 +            output;
19212 +          end;
19213 +        %end;
19214 +      run;
19215 +    %end;
19217 +    data tempprob(keep= node probtext);
19218 +      length probtext $800;
19219 +      retain probtext;
19220 +      set tempprob ;
19221 +      by node;
19223 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19224 +      %let probtype = &EM_PROPERTY_TARGET;
19225 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19226 +        %let probtype = ALL;
19227 +      %end;
19229 +      %if "&probtype" eq "ALL" %then %do;
19230 +        if first.node then do;
19231 +          %if &validFlag eq N %then %do;
19232 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19233 +          %end;
19234 +          %else %do;
19235 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19236 +          %end;
19237 +        end;
19238 +        else if last.node then do;
19239 +          %if &validFlag eq N %then %do;
19240 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19241 +          %end;
19242 +          %else %do;
19243 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19244 +          %end;
19245 +          output;
19246 +        end;
19247 +        else do;
19248 +          %if &validFlag eq N %then %do;
19249 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19250 +          %end;
19251 +          %else %do;
19252 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19253 +          %end;
19254 +        end;
19255 +      %end;
19256 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19257 +        if strip(CATEGORY) = "&targetevent" then do;
19258 +          %if &validFlag eq N %then %do;
19259 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19260 +          %end;
19261 +          %else %do;
19262 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19263 +          %end;
19264 +          output;
19265 +        end;
19266 +      %end;
19267 +      %else %if "&probtype" eq "NONE" %then %do;
19268 +        if last.node then do;
19269 +          output;
19270 +        end;
19271 +      %end;
19272 +    run;
19273 +  %end;
19275 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19277 +  %let oldexists=0;
19278 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19279 +     data old_tree_plot;
19280 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19281 +        rename nodecolor=oldnodecolor;
19282 +     run;
19284 +     proc sort data=old_tree_plot;
19285 +        by node;
19286 +     run;
19288 +     %let oldexists=1;
19289 +  %end;
19291 +  data &EM_USER_TREE_PLOT;
19292 +    length textall $800;
19293 +    merge tempoutnodes temptargetused
19295 +    %if &em_intTarget eq Y %then %do;
19296 +      tempinterval
19297 +    %end;
19299 +    %if &em_classTarget eq Y %then %do;
19301 +      %if &validFlag eq N %then %do;
19302 +        tempn(rename=(statvalue=N))
19303 +      %end;
19304 +      %else %do;
19305 +        tempn
19306 +      %end;
19308 +      temppredict tempprob
19310 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19311 +        tempprofittext
19312 +      %end;
19313 +    %end;
19314 +    ;
19315 +    by node;
19317 +    /* build nodetext based on user selection */
19318 +    textall="";
19320 +    %if &em_intTarget eq Y %then %do;
19321 +    if tarlevel="INTERVAL" then do;
19322 +      /* Nodeid */
19323 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19324 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19325 +      %end;
19327 +      /* Target identifier if multiple targets are used */
19328 +      %if "&multipleTar" eq "Y" %then %do;
19329 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19330 +      %end;
19332 +      %if &validFlag eq Y %then %do;
19333 +         /* Column labels displayed in validflag eq Y only */
19334 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19335 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19335!+noquote ))";
19336 +         %end;
19338 +         /* Average values */
19339 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19340 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19341 +         %end;
19343 +         /* RASE */
19344 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19345 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19346 +         %end;
19348 +         /* Count */
19349 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19350 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19351 +         %end;
19352 +      %end;
19353 +      %else %do;
19354 +         /* Average values */
19355 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19356 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19357 +         %end;
19359 +         /* RASE */
19360 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19361 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19362 +         %end;
19364 +         /* Count */
19365 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19366 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19367 +         %end;
19368 +      %end;
19370 +      /* nodecolor */
19371 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19372 +        nodecolor=PREDICTION;
19373 +      %end;
19374 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19375 +        nodecolor=RASE;
19376 +      %end;
19377 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19378 +        nodecolor=1;
19379 +      %end;
19381 +    end;
19382 +    %end;
19383 +    %if &em_classTarget eq Y %then %do;
19384 +    if tarlevel^="INTERVAL" then  do;
19386 +      /* Nodeid */
19387 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19388 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19389 +      %end;
19390 +      /* Target identifier if multiple targets are used */
19391 +      %if "&multipleTar" eq "Y" %then %do;
19392 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19393 +      %end;
19395 +      /* Predicted values */
19396 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19397 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19398 +      %end;
19400 +      /* Column labels displayed in validflag eq Y only */
19401 +      %if "&ValidFlag" eq "Y" %then %do;
19402 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19403 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19403!+noquote ))";
19404 +        %end;
19405 +      %end;
19407 +      /* Target Values */
19408 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19409 +        textall=strip(textall)||"0A"x||strip(probtext);
19410 +      %end;
19412 +      /* include profit or loss for all target levels */
19413 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19414 +        textall=strip(textall)||"0A"x||strip(profittext);
19415 +      %end;
19417 +      %if &validFlag eq N %then %do;
19418 +        /* Percent Correct */
19419 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19420 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19421 +        %end;
19423 +         /* Count */
19424 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19425 +          %if "&adjusted" eq "N" %then %do;
19426 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19427 +          %end;
19428 +          %else %do;
19429 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19430 +          %end;
19431 +         %end;
19432 +      %end;
19433 +      %else %do;
19434 +        /* Percent Correct */
19435 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19436 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19437 +        %end;
19439 +         /* Count */
19440 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19441 +          %if "&adjusted" eq "N" %then %do;
19442 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19443 +          %end;
19444 +          %else %do;
19445 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19446 +          %end;
19447 +         %end;
19448 +      %end;
19450 +      /* nodecolor */
19451 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19452 +       %if &multipleTar ne Y %then %do;
19453 +        nodecolor=&predTarget;
19454 +       %end;
19455 +       %else %do;
19456 +         nodecolor=percentcorrect;
19457 +       %end;
19458 +      %end;
19459 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19460 +        nodecolor=percentcorrect;
19461 +      %end;
19462 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19463 +        nodecolor=1;
19464 +      %end;
19465 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19466 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19467 +          nodecolor=percentcorrect;
19468 +        %end;
19469 +        %else %do;
19470 +          nodecolor=profitloss;
19471 +        %end;
19472 +      %end;
19474 +    end;
19475 +    %end;
19476 +    %if &em_intTarget eq Y %then %do;
19477 +     drop  PREDICTION  TARGET TARLEVEL
19478 +     %if &ValidFlag eq Y %then %do;
19479 +         VPREDICTION
19480 +     %end;
19481 +     ;
19482 +    %end;
19483 +    %if &em_classTarget eq Y %then %do;
19484 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19485 +     %if &ValidFlag eq Y %then %do;
19486 +         VSTATVALUE
19487 +     %end;
19488 +     ;
19489 +    %end;
19491 +  run;
19493 +  /* add leaf index information to plotds - based on primary target only*/
19494 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19495 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19496 +      set &EM_USER_OUTSTATS;
19497 +      if ((statname="PROBABILITY"
19498 +      %if &validexist %then %do;
19499 +       or statname="VALID: PROBABILITY"
19500 +      %end;
19501 +      ) AND (CATEGORY="&TARGETEVENT")
19502 +      %if "&multipleTar" eq "Y" %then %do;
19503 +        AND (Target="%EM_TARGET")
19504 +      %end;
19505 +      );
19506 +    run;
19508 +    %if &validexist %then %do;
19509 +      proc sort data=tempprob; by node; run;
19510 +      %let vpredTarget = V%substr(&predTarget, 2);
19511 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19512 +         by node;
19513 +         id statname;
19514 +      run;
19515 +    %end;
19516 +  %end;
19517 +  %else %do;
19518 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19519 +      set &EM_USER_OUTSTATS;
19520 +      if ((statname="PREDICTION"
19521 +      %if &validexist %then %do;
19522 +       or statname="VALID: PREDICTION"
19523 +      %end;
19524 +      )
19525 +      %if "&multipleTar" eq "Y" %then %do;
19526 +        AND (Target="%EM_TARGET")
19527 +      %end;
19528 +      );
19529 +    run;
19530 +    %if &validexist %then %do;
19531 +      proc sort data=tempprob; by node; run;
19532 +      %let vpredTarget = V%substr(&predTarget, 2);
19533 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19534 +         by node;
19535 +         id statname;
19536 +      run;
19537 +    %end;
19538 +  %end;
19540 +  proc sort data=tempprob; by node; run;
19541 +  data tempoutnodes;
19542 +    merge tempoutnodes tempprob;
19543 +    by node;
19544 +  run;
19546 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19547 +  data tempnodes;
19548 +    retain traintotal validtotal;
19549 +    set tempnodes(where=(leaf ne . ));
19550 +    tprob=round(&predTarget, .01);
19551 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19552 +      percevent_train=round(tprob*100, .01);
19553 +    %end;
19554 +    %else %do;
19555 +      percevent_train=tprob;
19556 +    %end;
19558 +    perc_train=round((n/traintotal)*100, 0.01);
19559 +    /* leafwidth already has a *10 multiplier */
19560 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19562 +    %if &validexist %then %do;
19563 +      %let vpredTarget = V%substr(&predTarget,2);
19564 +      vprob=round(&vpredTarget, .01);
19565 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19566 +        percevent_valid=round(vprob*100, .01);
19567 +      %end;
19568 +      %else %do;
19569 +        percevent_valid=vprob;
19570 +      %end;
19571 +      perc_valid=round((vn/validtotal)*100, .01);
19572 +    %end;
19574 +    index=_N_;
19575 +    keep node index tprob perc_train percevent_train
19576 +    %if &validexist %then %do;
19577 +        vprob percevent_valid perc_valid
19578 +    %end;
19579 +    ;
19580 +  run;
19581 +  proc sort data=tempnodes; by node; run;
19582 +  data &EM_USER_TREE_PLOT;
19583 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19584 +    by node;
19585 +    if missing(node) then delete;
19586 +    %if &oldexists %then %do;
19587 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19588 +      drop oldnodecolor;
19589 +    %end;
19590 +    abovetext = compbl(abovetext);
19592 +    /* add variable labels */
19593 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19594 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19595 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19596 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19597 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19598 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19600 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19601 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19602 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19603 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19604 +          %end;
19605 +          %else %do;
19606 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19607 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19608 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19609 +          %end;
19610 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19612 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19613 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19614 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19615 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19616 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19617 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19618 +          %end;
19619 +          %else %do;
19620 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19621 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19622 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19623 +          %end;
19624 +    ;
19625 +  run;
19627 +  /* delete temporary tables */
19628 +  proc datasets lib=work nolist;
19629 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19630 +  run;
19632 +%mend em_tree_makePlotDs;
19636 +%macro em_tree_report;
19638 +   /* report properties */
19639 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19640 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19641 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19642 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19643 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19644 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19645 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19646 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19647 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19648 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19649 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19650 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19651 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19653 +   %let validexist=0;
19654 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19655 +     %let validexist=1;
19656 +   %end;
19658 +   /* determine if multiple targets will be processed */
19659 +   %let em_tree_multipleTargets=N;
19660 +   %let em_tree_numTarget=1;
19661 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19662 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19663 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19664 +         %let em_tree_multipleTargets=N;
19665 +      %end;
19666 +      %else %do;
19667 +        data _null_;
19668 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19669 +          if eof then
19670 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19671 +        run;
19673 +        %if &em_tree_numTarget gt 1 %then %do;
19674 +           %let em_tree_multipleTargets=Y;
19675 +        %end;
19676 +     %end;
19677 +   %end;
19679 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19681 +   /* variable importance */
19682 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19683 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19685 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19686 +     /* and the columns may not be generated                                                                                 */
19687 +     %let em_tree_cvexists=;
19688 +     %let em_tree_surrexists=.;
19689 +     data _null_;
19690 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19691 +       if eof then do ;
19692 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19693 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19694 +       end;
19695 +     run;
19697 +     data &EM_USER_OUTIMPORT;
19698 +         set &EM_USER_OUTIMPORT;
19699 +         /* format columns based on Precison value specified */
19700 +         format importance 15.&EM_PROPERTY_PRECISION
19701 +              %if &validexist %then %do;
19702 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19703 +              %end;
19704 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19705 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19706 +              %end;
19707 +         ;
19708 +     run;
19710 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19711 +     proc print data=&EM_USER_OUTIMPORT
19712 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19713 +          (where=((nrules>0) OR (nsurrogates>0)))
19714 +        %end;
19715 +        %else %do;
19716 +           (where=(nrules>0))
19717 +        %end;
19718 +        label noobs
19719 +        ;
19720 +     run;
19721 +     title10;
19723 +   %end;
19725 +   /* Sequence */
19726 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19727 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19728 +   data _null_ ;
19729 +      set &EM_USER_outseq (obs=2) end=eof ;
19730 +      if eof then do ;
19731 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19732 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19733 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19734 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19735 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19736 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19737 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19738 +      end;
19739 +    run;
19741 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19742 +      data &EM_USER_OUTSEQ;
19743 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19744 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19745 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19746 +           _XMISC_=_VMISC_
19747 +        %end;
19748 +        %if "&em_tree_aprof" ne "."  %then %do;
19749 +           _XAPROF_=_VAPROF_
19750 +           _XPROF_ = _VPROF_
19751 +        %end;
19752 +        %if "&em_tree_aloss" ne "."  %then %do;
19753 +           _XALOSS_=_VALOSS_
19754 +        %end;
19755 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19756 +           _XPASE_ = _VPASE_
19757 +           _XPMISC_ = _VPMISC_
19758 +        %end;
19760 +        ));
19761 +     %end;
19762 +     %else %do;
19763 +        set &EM_USER_OUTSEQ;
19764 +     %end;
19766 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19767 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19768 +            _MISC_   15.&EM_PROPERTY_PRECISION
19769 +         %end;
19770 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19771 +            _PASE_  15.&EM_PROPERTY_PRECISION
19772 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19773 +         %end;
19774 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19775 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19776 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19777 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19778 +            %end;
19779 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19780 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19781 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19782 +            %end;
19783 +         %end;
19784 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19785 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19786 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19787 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19788 +            %end;
19789 +         %end;
19790 +         %if "&em_tree_seq" ne "." %then %do;
19791 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19792 +         %end;
19793 +         %if "&em_tree_vseq" ne "." %then %do;
19794 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19795 +         %end;
19796 +         %if "&em_tree_aprof" ne "." %then %do;
19797 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19798 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19799 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19800 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19801 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19802 +           %end;
19803 +         %end;
19804 +         %else %if "&em_tree_aloss" ne "." %then %do;
19805 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19806 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19807 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19808 +           %end;
19809 +         %end;
19810 +      ;
19811 +    run;
19812 +   %end;
19814 +   /* Observation Based Importance */
19815 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19817 +      /* need to check for 0 obs */
19818 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19819 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19820 +      %let rc=%sysfunc(close(&dsid));
19822 +      %if &onobs %then %do;
19823 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19824 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19826 +         data &EM_USER_OUTOBSIMP;
19827 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19828 +           if _a;
19829 +           by _INPUT1_;
19830 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19831 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19832 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19833 +                   %end;
19834 +                   ;
19835 +         run;
19836 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19837 +      %end;
19838 +   %end;
19840 +  %end;
19842 +  /* create dataset to support tree diagram and icicle plot */
19843 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19844 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19846 +  /* display tree diagram */
19847 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19848 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19850 +  /* display icicle diagram */
19851 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19852 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19854 +  /* Leaf Statistics Plot */
19855 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19857 +  /* print leaf information to output window */
19858 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19860 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19861 +       by descending N;
19862 +     run;
19864 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19865 +     %local vn;
19866 +     data _null_;
19867 +       set t (obs=2) end=eof;
19868 +       if eof then do;
19869 +         call symput("vn", strip(put(vn, best.)));
19870 +       end;
19871 +     run;
19873 +     data t;
19874 +       set t;
19875 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19876 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19877 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19878 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19879 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19880 +       %end;
19881 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19882 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19883 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19884 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19885 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19886 +          %end;
19887 +       %end;
19888 +       ;
19889 +     run;
19891 +     /* determine if rase is found in t */
19892 +    %let dsid=%sysfunc(open(t,i));
19893 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19894 +    %let rc=%sysfunc(close(&dsid));
19896 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19897 +     proc print data=t noobs label;
19898 +       where tprob ne .;
19899 +       var node depth N tprob
19900 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19901 +         %if "&vn" ne "." %then %do;
19902 +           VN
19903 +         %end;
19904 +         vprob
19905 +       %end;
19906 +       %if &raseexists %then %do;
19907 +            RASE
19908 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19909 +              VRASE
19910 +            %end;
19911 +       %end;
19912 +       ;
19913 +     run;
19914 +     title10;
19915 +  %end;
19917 +  /* create plots that are done during training of node */
19918 +  /* display iterative plot, including reference line */
19919 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19920 +   /* %if &nleaves eq  %then %do; */
19921 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19922 +      data _null_;
19923 +        set &EM_USER_OUTTOPOLOGY end=eof;
19924 +        if eof then do;
19925 +          call symput('nleaves', LEAF);
19926 +        end;
19927 +      run;
19928 +   /* %end; */
19930 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19931 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19932 +  %end;
19934 +  /* display leaf statistics */
19935 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19937 +  /* stats by node if multiple targets = Y */
19938 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19939 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19940 +    data &EM_USER_OUTSTATS;
19941 +      set &EM_USER_OUTSTATS;
19943 +     * if STATNAME="TARGET" then delete;
19944 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19945 +      drop leaf;
19946 +    run;
19947 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19949 +  %end;
19950 +  %else %do;
19951 +    /* add outstats and outdescribe to spk but not results */
19952 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19953 +  %end;
19955 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS5.TREE2_OUTSEQ.
NOTE: The data set EMWS5.TREE2_OUTSEQ has 39 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 380 observations read from the data set EMWS5.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 175 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 150 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 175 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 50 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 25 observations read from the data set WORK.TEMPN.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE2_TREE_PLOT has 25 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 16 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 16 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_TREE_PLOT.
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE2_TREE_PLOT has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 25 observations read from the data set EMWS5.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19956
19957  *------------------------------------------------------------*;
19958  * End REPORT: Tree2;
19959  *------------------------------------------------------------*;
 
19960  /* Reset EM Options */
19961  options formchar="|----|+|---+=|-/\<>*";
19962  options nocenter ls=256 ps=10000;
19963  goptions reset=all device=GIF NODISPLAY;
 
19964  proc sort data=WORK.EM_USER_REPORT;
19965  by ID VIEW;
19966  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19967  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19968  by NAME;
19969  run;
 
NOTE: There were 14 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19970  proc sort data=EMWS5.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19971  by NAME;
19972  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19973  data WORK.ASSESS_META;
19974  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19975  by NAME;
19976  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19977  data EM_temp_assessMeta;
19978  set EMWS5.Tree2_CMeta_TRAIN;
19979  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19980  run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19981  data EM_temp_assessdata;
19982  set EMWS5.Tree2_TRAIN(keep=
19983  F_TargetBuy
19984  I_TargetBuy
19985  P_TargetBuy0
19986  P_TargetBuy1
19987  Q_TargetBuy0
19988  Q_TargetBuy1
19989  R_TargetBuy0
19990  R_TargetBuy1
19991  U_TargetBuy
19992  V_TargetBuy0
19993  V_TargetBuy1
19994  _WARN_
19995  TargetBuy
19996  );
19997  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24279   data EM_temp_assessMeta;
24280   set EMWS5.Tree2_CMeta_TRAIN;
24281   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24282   run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24283   data EM_temp_assessdata;
24284   set EMWS5.Tree2_VALIDATE(keep=
24285   F_TargetBuy
24286   I_TargetBuy
24287   P_TargetBuy0
24288   P_TargetBuy1
24289   Q_TargetBuy0
24290   Q_TargetBuy1
24291   R_TargetBuy0
24292   R_TargetBuy1
24293   U_TargetBuy
24294   V_TargetBuy0
24295   V_TargetBuy1
24296   _WARN_
24297   TargetBuy
24298   );
24299   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 7778 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS5.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28590   %let _cn = %sysfunc(getoption(CENTER));
28591   options nocenter;
28592   proc print data=EMWS5.Tree2_EMREPORTFIT noobs label;
28593   var STAT LABEL TRAIN
28594   VALIDATE
28595   ;
28596   by TARGET TARGETLABEL;
28597   title9 ' ';
28598   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28599   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28600   title10;
28601   options &_cn;
 
28602   proc sort data=EMWS5.Tree2_EMCLASSIFICATION nothreads;
28603   by DATAROLE TARGET TARGETLABEL;
28604   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28605   %let _cn = %sysfunc(getoption(CENTER));
28606   options nocenter;
28607   proc print data=EMWS5.Tree2_EMCLASSIFICATION noobs label;
28608   var from into pct_row pct_col count percent
28609   ;
28610   by DATAROLE TARGET TARGETLABEL;
28611   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28612   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28613   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28614   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28615   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28616   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28617   where _TYPE_='PREDICTION';
28618   title9 ' ';
28619   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28620   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28621   title9;
28622   title10;
28623   options &_cn;
 
28624   %let _cn = %sysfunc(getoption(CENTER));
28625   options nocenter;
28626   data EMWS5.Tree2_EMEVENTREPORT;
28627   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28628   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28628 ! FALSEEVENT
28629   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28630      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28631   FALSEEVENT=0;
28632   FALSENEVENT=0;
28633   TRUEEVENT=0;
28634   TRUENEVENT=0;
28635   set EMWS5.Tree2_EMEVENTREPORT;
28636   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28637   proc print data=EMWS5.Tree2_EMEVENTREPORT noobs label;
28638   title9 ' ';
28639   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28640   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28641   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28642   title10;
28643   options &_cn;
 
28644   proc datasets library=EMWS5 nolist;
28645   modify Tree2_EMRANK;
28646   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28647   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28648   run;
 
NOTE: MODIFY was successful for EMWS5.TREE2_EMRANK.DATA.
28649   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28650   %let _cn = %sysfunc(getoption(CENTER));
28651   options nocenter;
28652   proc print data=EMWS5.Tree2_EMRANK label noobs;
28653   var
28654   decile gain lift liftc resp respc N _meanP_;
28655   by
28656   notsorted DATAROLE
28657   notsorted TARGET
28658   notsorted TARGETLABEL
28659   ;
28660   title9 ' ';
28661   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28662   run;
 
NOTE: There were 40 observations read from the data set EMWS5.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28663   title10;
28664   options &_cn;
 
28665   proc datasets library=EMWS5 nolist;
28666   modify Tree2_EMSCOREDIST;
28667   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28668   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28669   run;
 
NOTE: MODIFY was successful for EMWS5.TREE2_EMSCOREDIST.DATA.
28670   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
