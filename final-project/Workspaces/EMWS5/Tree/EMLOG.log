*------------------------------------------------------------*
User:                Kyle McLester
Date:                April 13, 2022
Time:                18:21:30
Site:                70080897
Platform:            X64_10HOME
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 13, 2022
Time:                18:21:24
*------------------------------------------------------------*
15226  proc freq data=EMWS5.Tree_VariableSet noprint;
15227  table ROLE*LEVEL/out=WORK.TreeMETA;
15228  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
15229  proc print data=WORK.TreeMETA label noobs;
15230  var ROLE LEVEL COUNT;
15231  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15232  title9 ' ';
15233  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15234  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15235  title10;
 
15236  %let EMNORLEN = %DMNORLEN;
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15265  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15266  length ORDER $20;
15267  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15268     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15269  set EMWS5.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15270  NumLevels=2;
15271  select(upcase(ORDER));
15272  when('DESC') ORDER = 'Descending';
15273  when('ASC') ORDER = 'Ascending';
15274  when('FMTDESC') ORDER = 'Formatted Descending';
15275  when('FMTASC') ORDER = 'Formatted Ascending';
15276  otherwise ORDER = 'Descending';
15277  end;
15278  output;
15279  run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15280  title9 ' ';
15281  proc print data=WORK.Tree_EVENT noobs label;
15282  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15283  title9 ' ';
15284  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15285  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15286  title10;
 
"No decisions defined for target "TargetBuy"."
15287  proc print data = EMWS5.Ids_TargetBuy_DM noobs label;
15288  var _type_ variable label;
15289  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15290  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15291  title9 ' ';
15292  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15293  run;
 
NOTE: There were 7 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15294  title10;
 
15295  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15803  *------------------------------------------------------------*;
15804  * Tree: Generation of macros and macro variables;
15805  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15806  *------------------------------------------------------------*;
 
15807  %let EMEXCEPTIONSTRING=;
15808  *------------------------------------------------------------*;
15809  * TRAIN: Tree;
15810  *------------------------------------------------------------*;
15811  %let EM_ACTION = TRAIN;
15812  %let syscc = 0;
15813  %macro main;
15814
15815    %if %upcase(&EM_ACTION) = CREATE %then %do;
15816      filename temp catalog 'sashelp.emmodl.tree_create.source';
15817      %include temp;
15818      filename temp;
15819
15820      %em_tree_create;
15821    %end;
15822
15823     %else
15824     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15825
15826         filename temp catalog 'sashelp.emmodl.tree_train.source';
15827         %include temp;
15828         filename temp;
15829         %em_tree_train;
15830     %end;
15831
15832    %else
15833    %if %upcase(&EM_ACTION) = SCORE %then %do;
15834      filename temp catalog 'sashelp.emmodl.tree_score.source';
15835      %include temp;
15836      filename temp;
15837
15838      %em_tree_score;
15839
15840    %end;
15841
15842    %else
15843    %if %upcase(&EM_ACTION) = REPORT %then %do;
15844
15845         filename temp catalog 'sashelp.emmodl.tree_report.source';
15846         %include temp;
15847         filename temp;
15848
15849         %em_tree_report;
15850     %end;
15851
15852    %else
15853    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15854
15855         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15856         %include temp;
15857         filename temp;
15858         %EM_TREE_OPENTREEVIEWER;
15859
15860     %end;
15861
15862    %else
15863    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15864
15865         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15866         %include temp;
15867         filename temp;
15868         %EM_TREE_CLOSETREEVIEWER;
15869
15870     %end;
15871
15872
15873     %doendm:
15874  %mend main;
15875
15876  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15878 +%macro em_tree_train;
15880 +   %if &EM_IMPORT_DATA eq %then %do;
15881 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15882 +       %put &em_codebar;
15883 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15884 +       %put &errormsg;
15885 +       %put &em_codebar;
15886 +       %goto doendm;
15887 +   %end;
15888 +   %else
15889 +       %let EMEXCEPTIONSTRING =;
15891 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15892 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15893 +        %put &em_codebar;
15894 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15895 +        %put &errormsg;
15896 +        %put &em_codebar;
15897 +        %goto doendm;
15898 +   %end;
15900 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15901 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15902 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15903 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15904 +        %put &em_codebar;
15905 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15906 +        %put &errormsg;
15907 +        %put &em_codebar;
15908 +        %goto doendm;
15909 +   %end;
15911 +   /* Initialize property macro variables */
15912 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15913 +   %include temp;
15914 +   filename temp;
15916 +   %EM_SetProperties;
15918 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15919 +   %EM_GETNAME(key=EMTREE, type=DATA);
15920 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15921 +     /* if import eq Y and no importtable defined, throw an exception */
15922 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15923 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15924 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15925 +         %put &em_codebar;
15926 +         %put &errmsg;
15927 +         %put &em_codebar;
15928 +         %goto doendm;
15929 +      %end;
15930 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15931 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15932 +         %put &em_codebar;
15933 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15934 +         %put &errormsg;
15935 +         %put &em_codebar;
15936 +         %goto doendm;
15937 +      %end;
15938 +      %else %do;
15939 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15940 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15941 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15942 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15943 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15944 +         %let dsid = %sysfunc(close(&dsid));
15945 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15946 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15947 +            %put &em_codebar;
15948 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15949 +            %put &errormsg;
15950 +            %put &em_codebar;
15951 +            %goto doendm;
15952 +         %end;
15953 +      %end;
15954 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15955 +         proc delete data=&EM_USER_EMTREE;
15956 +         run;
15957 +      %end;
15958 +   %end;
15959 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15960 +      proc delete data=&EM_USER_EMTREE;
15961 +      run;
15962 +   %end;
15964 +   /* load tree macros */
15965 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15966 +   %include temp;
15967 +   filename temp;
15969 +   /* data sets */
15970 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15971 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15972 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15974 +   /* files */
15975 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15977 +   /* check actual num of target levels */
15978 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15979 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15980 +                              nLevel=_nTargetLevel );
15981 +      %if &_nTargetLevel  > 2 %then %do;
15982 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15983 +        %put &em_codebar;
15984 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15985 +        %put &errormsg;
15986 +        %put &em_codebar;
15987 +        %goto doendm;
15988 +      %end;
15989 +   %end;
15991 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15992 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15993 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15994 +        %let costflag=0;
15995 +        data _null_;
15996 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15997 +          if eof then call symput("costflag", _N_);
15998 +        run;
15999 +        %if &costflag gt 0 %then %do;
16000 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16001 +          %put &em_codebar;
16002 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16003 +          %put &errormsg;
16004 +          %put &em_codebar;
16005 +          %goto doendm;
16006 +       %end;
16007 +     %end;
16008 +   %end;
16010 +   /* determine if multiple targets will be processed */
16011 +   %let em_tree_multipleTargets=N;
16012 +   %let em_tree_numTarget = 1;
16013 +   %let em_tree_targetVars=;
16015 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16016 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16017 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16018 +         %let em_tree_multipleTargets=N;
16019 +      %end;
16020 +      %else %do;
16021 +         /* create macro array of targets  */
16022 +         data _null_;
16023 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16024 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16025 +           if eof then
16026 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16027 +        run;
16029 +        %if &em_tree_numTarget gt 1 %then %do;
16030 +           %let em_tree_multipleTargets=Y;
16031 +        %end;
16032 +      %end;
16033 +   %end;
16035 +   /* create view of only necessary variable for performance reasons */
16036 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16037 +   data &tempData / view=&tempData;
16038 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16039 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16040 +       %EM_TARGET
16041 +     %end;
16042 +     %else %do;
16043 +       %if &em_tree_numTarget ne 0 %then %do;
16044 +         %do i=1 %to &em_tree_numTarget;
16045 +            &&em_tree_targetVars&i
16046 +         %end;
16047 +       %end;
16048 +     %end;
16049 +     );
16050 +   run;
16052 +   /* run Tree procedure */
16053 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16055 +   /* Check return code and throw exception if error is detected */
16056 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16057 +   %if &syserr %then %do;
16058 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16059 +     %goto doendm;
16060 +   %end;
16062 +   /* add decision score code if multiple targets are processed */
16063 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16064 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16065 +   %end;
16067 +   /* create outfit dataset if multiple score statements have been executed */
16068 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16070 +   /* create English Rules */
16071 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16072 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16073 +       %em_tree_makeEnglishRules;
16075 +       /* English Rules */
16076 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16078 +     %end;
16079 +   filename x;
16081 +   %doendm:
16082 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16083 +%macro EM_SetProperties;
16085 +   /* train properties */
16086 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16087 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16088 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16089 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16090 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16091 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16092 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16093 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16094 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16095 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16096 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16097 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16098 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16099 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16100 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16101 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16102 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16103 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16104 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16105 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16106 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16109 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16110 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16111 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16115 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16116 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16117 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16128 +   /* properties for interactive sample */
16129 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16134 +   /* report properties */
16135 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16149 +   /* score properties */
16150 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16153 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16155 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16156 +  %global &nLevel;
16157 +  proc dmdb batch data=&indata
16158 +    classout=_tmp_dmdbout;
16159 +    class &target;
16160 +  run;
16161 +  data _tmp_dmdbout;
16162 +    set _tmp_dmdbout;
16163 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16164 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16165 +  run;
16166 +  data _null_;
16167 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16168 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16169 +    %let dsid = %sysfunc(close(&dsid));
16170 +     call symput("&nLevel", put(&_obs, Best12.));
16171 +  run;
16173 +  proc datasets lib=work nolist;
16174 +     delete _tmp_dmdbout;
16175 +  run;
16176 +  quit;
16177 +%Mend EM_CheckBinaryTargetLevel;
16180 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16182 +  /* determine the number of obs in training data */
16183 +  proc sql;
16184 +    reset noprint;
16185 +    select count(*) into :em_nobs from &indata;
16186 +  quit;
16188 +  /* determine the number of input variables */
16189 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16190 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16192 +  /* retrieve targetEvent from decmeta */
16193 +  %let targetEvent=;
16194 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16195 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16196 +      data _null_;
16197 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16198 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16199 +      run;
16200 +    %end;
16201 +  %end;
16203 +  /* create targetTable if multipleTar eq Y */
16204 +  data temptarget;
16205 +    set &EM_DATA_VARIABLESET;
16206 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16207 +  run;
16209 + /* data sets */
16210 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16211 + %EM_GETNAME(key=EMTREE,        type=DATA);
16212 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16213 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16214 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16215 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16216 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16217 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16218 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16219 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16221 + /* files */
16222 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16223 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16225 + /* turn on pmml if requested */
16226 + %let nnpmml=0;
16227 + %if %symexist(EM_PMML) %then %do;
16228 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16229 +       %let nnpmml=1;
16231 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16232 +   %end;
16233 +%end;
16235 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16237 +%if &nnpmml or &numClassTarget %then %do;
16239 +    /* create dmdb needed for pmml generation */
16240 +    %let tree_maxlevel = 512;
16241 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16242 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16243 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16244 +      %end;
16245 +    %end;
16246 +    %if &tree_maxlevel gt 0 %then %do;
16247 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16248 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16249 +    %end;
16251 +    %let targetOrderString =;
16252 +    %let targetString = ;
16253 +    data _null_;
16254 +       length orderString nameString $10000;
16255 +       retain orderString nameString;
16256 +       set &em_data_variableset end=eof;
16257 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16258 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16259 +       %end;
16260 +       %else %do;
16261 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16262 +       %end;          select(order);
16263 +         when('')        order ='DESC';
16264 +         when('FMTASC')  order='ASCFMT';
16265 +         when('FMTDESC') order='DESFMT';
16266 +         otherwise;
16267 +       end;
16268 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16269 +       nameString = trim(nameString)!!' '!!trim(NAME);
16271 +       if eof then do;
16272 +          call symput('targetOrderString', trim(orderString));
16273 +          call symput('targetString', trim(nameString));
16274 +       end;
16275 +    run;
16277 +    %let arborkluge= "work._treeDMDB";
16279 +    proc dmdb batch data=&indata
16280 +    %if &nnpmml %then %do;
16281 +        PMML
16282 +    %end;
16283 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16285 +      %if &nnpmml %then %do;
16286 +           %if "%EM_ID" ne "" %then %do;
16287 +             id %EM_ID;
16288 +           %end;
16289 +           %if &EM_NUM_CLASS gt 0 %then %do;
16290 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16291 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16292 +                  &targetOrderString;
16293 +           %end;
16294 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16295 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16296 +           %end;
16297 +           target &targetString %EM_INTERVAL_TARGET;
16298 +           %if "%EM_FREQ" ne "" %then %do;
16299 +             freq %EM_FREQ;
16300 +           %end;
16301 +      %end;
16302 +      %else %do;
16303 +         class  &targetOrderString;
16304 +         target &targetString %EM_INTERVAL_TARGET;
16305 +      %end;
16306 +    run;
16307 +    quit;
16309 +    proc datasets lib=work nolist;
16310 +       delete classout varout;
16311 +    run;
16312 +    quit;
16314 + %end;
16317 + /* run Arbor procedure */
16318 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16319 +  proc arbor data=&INDATA
16321 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16322 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16323 +  %end;
16325 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16326 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16327 +  %end;
16329 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16330 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16331 +  %end;
16333 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16334 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16335 +  %end;
16337 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16338 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16339 +  %end;
16341 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16342 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16343 +  %end;
16344 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16345 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16346 +  %end;
16347 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16348 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16349 +  %end;
16351 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16352 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16353 +      alpha = &EM_PROPERTY_SIGLEVEL
16354 +    %end;
16355 +  %end;
16357 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16358 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16359 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16360 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16361 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16363 +        padjust =
16364 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16365 +          &chaid
16366 +        %end;
16367 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16368 +          DEPTH
16369 +        %end;
16370 +      %end;
16371 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16372 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16373 +         pvars = &num_inputs
16374 +      %end;
16375 +    %end;
16376 +  %end;
16377 +  %else %do;
16378 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16379 +         padjust = NONE
16380 +      %end;
16381 +  %end;
16383 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16384 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16385 +    Maxrules = &num_nrules
16386 +  %end;
16388 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16389 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16390 +    Maxsurrs = &num_nsurrs
16391 +  %end;
16393 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16394 +     Missing=&EM_PROPERTY_MISSINGVALUE
16395 +  %end;
16397 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16398 +     USEVARONCE
16399 +  %end;
16401 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16402 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16403 +  %end;
16406 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16407 +    event = "&targetEvent"
16408 +  %end;
16410 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16411 +     DECSEARCH
16412 +  %end;
16414 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16415 +     PRIORSSEARCH
16416 +  %end;
16418 +  %if &arbor_1 ne %then %do;
16419 +    &arbor_1
16420 +  %end;
16422 +  %if &em_arbor ne %then %do;
16423 +     &em_arbor
16424 +  %end;
16425 +  ;
16426 + %end;
16427 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16428 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16429 +       Performance &EM_PROPERTY_PERFORMANCE
16430 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16431 +         nodesize=&EM_PROPERTY_NODESAMPLE
16432 +       %end;
16433 +       ;
16434 +       interact;
16435 + %end;
16436 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16437 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16438 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16439 +    %put &em_codebar;
16440 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16441 +    %put &errormsg;
16442 +    %put &em_codebar;
16443 +    %goto doendm;
16444 +   %end;
16445 +   %else %do;
16446 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16447 +       Performance &EM_PROPERTY_PERFORMANCE
16448 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16449 +         nodesize=&EM_PROPERTY_NODESAMPLE
16450 +       %end;
16451 +       ;
16452 +       interact;
16453 +   %end;
16454 + %end;
16456 + %else %do;
16457 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16458 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16459 +    %put &em_codebar;
16460 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16461 +    %put &errormsg;
16462 +    %put &em_codebar;
16463 +    %goto doendm;
16464 +   %end;
16465 +   %else %do;
16466 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +        interact;
16473 +   %end;
16474 + %end;
16476 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16477 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16478 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16479 +    %end;
16481 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16482 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16483 +    %end;
16485 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16486 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16487 +    %end;
16489 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16490 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16491 +    %end;
16493 +    %if "%EM_FREQ" ne "" %then %do;
16494 +       freq %EM_FREQ;
16495 +    %end;
16497 +    %if "&multipleTar" eq "Y" %then %do;
16498 +       /* cycle through all target vars in variableset */
16499 +       %let tdsid = %sysfunc(open(temptarget));
16500 +       %if &tdsid %then %do;
16501 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16502 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16503 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16504 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16505 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16506 +             target &var / level = &lvl
16507 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16508 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16509 +             %end;
16510 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16511 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16512 +             %end;
16513 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16514 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16515 +             %end;
16516 +          %end;
16517 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16518 +       %end;
16519 +       useTarget variable = %EM_TARGET;
16520 +    %end;
16521 +    %else %do;
16522 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16523 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16524 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16525 +      %end;
16526 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16527 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16528 +      %end;
16529 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16530 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16531 +      %end;
16532 +    %end;
16534 +    %if "&multipleTar" eq "N" %then %do;
16535 +      &EM_DEC_STATEMENT;
16536 +    %end;
16538 +    Performance &EM_PROPERTY_PERFORMANCE
16539 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16540 +      nodesize=&EM_PROPERTY_NODESAMPLE
16541 +    %end;
16542 +    ;
16544 +    %if "&intFlag" eq "Y" %then %do;
16545 +       INTERACT Largest;
16546 +       Train maxnewdepth=0;
16547 +    %end;
16549 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16550 +         Assess
16551 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16552 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16553 +              %put &em_codebar;
16554 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16555 +              %put &errormsg;
16556 +              %put &em_codebar;
16557 +            %end;
16558 +            %else %do;
16559 +               Validata=&EM_IMPORT_VALIDATE
16560 +            %end;
16561 +         %end;
16562 +         %else %do;
16563 +           NoValidata
16564 +         %end;
16565 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16566 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16567 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16568 +               %if &dsid %then %do;
16569 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16570 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16571 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16572 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16573 +                   %else %do;
16574 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16575 +                      %else %let measure= MISC;
16576 +                   %end;
16577 +                 %end;
16578 +               %end;
16579 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16580 +            %end;
16581 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16582 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16583 +                 %let measure=ASE;
16584 +              %end;
16585 +              %else %do;
16586 +                 %let measure=MISC;
16587 +              %end;
16588 +            %end;
16589 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16590 +              %let measure=ASE;
16591 +            %end;
16592 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16593 +               %let measure = LIFT;
16594 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16595 +               %if &dsid %then %do;
16596 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16597 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16598 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16599 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16600 +                 %end;
16601 +               %end;
16602 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16603 +            %end;
16604 +            measure=&measure
16605 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16606 +               event = "&targetEvent"
16607 +            %end;
16608 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16609 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16610 +            %end;
16611 +         %end;
16612 +         %if "&multipleTar" eq "N" %then %do;
16613 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16614 +               CV
16615 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16616 +                 CVNITer = &EM_PROPERTY_CVNITER
16617 +               %end;
16618 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16619 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16620 +               %end;
16621 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16622 +                 CVSeed = &EM_PROPERTY_CVSEED
16623 +               %end;
16624 +            %end;
16625 +         %end;
16626 +       %end;
16627 +      ;
16629 +      %if "&intFlag" ne "Y" %then %do;
16630 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16631 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16632 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16633 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16635 +          SUBTREE &subtree
16636 +          %if "&subtree" eq "NLEAVES" %then %do;
16637 +            =&EM_PROPERTY_NSUBTREE
16638 +          %end;
16639 +          ;
16640 +        %end;
16642 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16643 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16644 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16645 +          %end;
16646 +       %end;
16647 +      %end;
16648 + %end;
16651 + MakeMacro nleaves = nleaves;
16652 + save
16653 + %if "&EM_USER_EMTREE" ne "" %then %do;
16654 +   MODEL=&EM_USER_EMTREE
16655 + %end;
16656 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16657 +   SEQUENCE=&EM_USER_OUTSEQ
16658 + %end;
16659 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16660 +   IMPORTANCE=&EM_USER_OUTIMPORT
16661 + %end;
16662 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16663 +   NODESTAT=&EM_USER_OUTNODES
16664 + %end;
16665 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16666 +   SUMMARY=&EM_USER_OUTSUMMARY
16667 + %end;
16668 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16669 +   STATSBYNODE=&EM_USER_OUTSTATS
16670 + %end;
16671 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16672 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16673 + %end;
16674 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16675 +   Pathlistnonmissing=&EM_USER_OUTPATH
16676 + %end;
16677 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16678 +   RULES = &EM_USER_OUTRULES
16679 + %end;
16680 + ;
16682 + %if "&intFlag" ne "Y" %then %do;
16684 +   %let lookupString = ;
16685 +   %if ^%symexist(EM_OPTION) %then
16686 +      %let EM_OPTION=;
16688 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16689 +      %let lookupString = LOOKUP=SELECT;
16690 +   %end;
16692 +   %let codetext=;
16693 +   %let norescodetxt=;
16695 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16696 +     %let codetext=&codetext DUMMY;
16697 +     %let norescodetxt=&norescodetxt DUMMY;
16698 +   %end;
16699 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16700 +     %let codetext=&codetext NOLEAFID;
16701 +     %let norescodetxt=&norescodetxt NOLEAFID;
16702 +   %end;
16703 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16704 +     %let norescodetxt=&norescodetxt NOPRED;
16705 +   %end;
16707 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16708 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16710 +   %if &nnpmml %then %do;
16711 +     code pmml;
16712 +   %end;
16714 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16715 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16716 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16717 +   %end;
16718 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16719 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16720 +   %end;
16721 + %end;
16723 + run;
16724 + quit;
16726 + /*%em_checkerror(); */
16727 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16728 +   /* Delete DMDB catalog */
16729 +   proc datasets lib=work nolist;
16730 +       delete _treeDMDB / mt=cat;
16731 +  run;
16732 +  %end;
16734 + %if &nnpmml %then %do;
16735 +    ods pmml close;
16736 + %end;
16738 +  %doendm:
16740 +%mend em_tree_runTreeProcedure;
16742 +%macro em_tree_createFitStats( multipleTar= );
16745 +  /* create targetTable is multipleTar eq Y */
16746 +  data temptarget;
16747 +    set &EM_DATA_VARIABLESET;
16748 +    where ROLE="TARGET";
16749 +  run;
16751 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16752 +   data &EM_USER_EMOUTFIT;
16753 +     length target $32;
16754 +     merge work.fit_train
16755 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16756 +       work.fit_valid
16757 +     %end;
16758 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16759 +       work.fit_test
16760 +     %end;
16761 +     ;
16762 +     %if "&multipleTar" eq "N" %then %do;
16763 +       target="%EM_TARGET";
16764 +     %end;
16765 +     %else %do;
16766 +       target = _TARGET_;
16767 +     %end;
16768 +     drop _NW_ _SUMW_
16769 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16770 +        _VSUMW_
16771 +     %end;
16772 +     ;
16773 +   run;
16775 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16776 +     proc datasets library=work nolist;
16777 +       delete fit_valid;
16778 +     run;
16779 +   %end;
16780 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16781 +     proc datasets library=work nolist;
16782 +       delete fit_test;
16783 +     run;
16784 +   %end;
16786 +%mend em_tree_createFitStats;
16789 +%macro em_tree_makeEnglishRules;
16791 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16792 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16794 +  /* verify that necessary tables exist and if not, skip processing */
16795 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16796 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16797 +    %goto doendm;
16798 +  %end;
16799 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16800 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16801 +    %goto doendm;
16802 +  %end;
16804 +  /* determine length of variable in outpath dataset */
16805 +  %let vlength= ;
16806 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16807 +  %if &dsid ne %then %do;
16808 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16809 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16810 +  %end;
16811 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16813 +  data tempoutpath;
16814 +    length varname $&vlength;
16815 +    retain varname;
16816 +    set &EM_USER_OUTPATH;
16818 +    if ^missing(variable) then varname=variable;
16819 +    else if ^missing(var_name) then varname=var_name;
16820 +    output;
16821 +  run;
16823 +  /* create an array of generated predicted variable names */
16824 +  %let tree_pred_vars = ;
16825 +  %let tree_pred_label = ;
16826 +  %let numpred= 0;
16827 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16829 +    data _null_;
16830 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16831 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16832 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16833 +     if eof then
16834 +       call symput('numpred', strip(put(_N_, BEST.)));
16835 +    run;
16836 +  %end;
16838 +  /* determine if NPRIORS exists in outnodes  */
16839 +  %local nprior_flag;
16840 +  data _null_;
16841 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16842 +    if eof then do;
16843 +      call symput('nprior_flag', strip(put(npriors, best.)));
16844 +    end;
16845 +  run;
16847 +  proc sort data=tempoutpath; by node; run;
16848 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16850 +  data tempoutpath;
16851 +    merge tempoutpath(in=_a) outnodes(keep= node
16852 +    %if "&nprior_flag" ne "." %then %do;
16853 +      NPRIORS
16854 +    %end;
16855 +    %else %do;
16856 +      N
16857 +    %end;
16858 +    %if &numpred gt 0 %then %do;
16859 +      %do i=1 %to &numpred;
16860 +        &&tree_pred_vars&i
16861 +      %end;
16862 +    %end;
16863 +    );
16864 +    by node;
16865 +    if _a;
16866 +  run;
16868 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16870 +  data _null_;
16871 +    file x;
16872 +    set tempoutpath;
16873 +    by node descending varname;
16874 +    retain origvar oldnode string;
16875 +    length origvar $32 oldnode 8 string $5000;
16877 +    if _N_ = 1 then do;
16878 +      origvar = varname;
16879 +      oldnode = node;
16880 +    end;
16882 +    if first.node then do;
16883 +       put "&EM_CODEBAR";
16884 +       put " Node = " node;
16885 +       put "&EM_CODEBAR";
16886 +    end;
16888 +      if first.varname then do;
16889 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16890 +            if MISSING(CHARACTER_VALUE) then do;
16891 +             if NUMERIC_VALUE ne .  then do;
16892 +              if ^first.node then do;
16893 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16894 +              end;
16895 +              else do;
16896 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16897 +              end;
16898 +             end;
16899 +            end;
16900 +            else do;
16901 +              if ^first.node then do;
16902 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16903 +              end;
16904 +              else do;
16905 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16906 +              end;
16907 +             end;
16908 +         end;
16909 +         else if RELATION in ("=") then do;
16910 +            if ^first.node then do;
16911 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16912 +            end;
16913 +            else do;
16914 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16915 +            end;
16916 +         end;
16917 +         else if RELATION in ("ISMISSING") then do;
16918 +            if ^first.node then do;
16919 +              string = " AND "|| strip(varname) || " equals Missing";
16920 +            end;
16921 +            else do;
16922 +              string = "if "|| strip(varname) ||" equals Missing";
16923 +            end;
16924 +         end;
16925 +         else if RELATION in ("ISNOTMISSING") then do;
16926 +            if ^first.node then do;
16927 +              string = " AND "|| strip(varname) || " equals All Values";
16928 +            end;
16929 +            else do;
16930 +              string = "if "|| strip(varname) ||" equals All Values";
16931 +            end;
16932 +         end;
16933 +         if ^missing(varname) then origvar = varname;
16934 +         oldnode=node;
16936 +      end;
16937 +      else do;
16938 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16939 +          if MISSING(CHARACTER_VALUE) then do;
16940 +           if  NUMERIC_VALUE ne .  then do;
16941 +            if ^MISSING(string) then
16942 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16943 +            else
16944 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16945 +           end;
16946 +          end;
16947 +          else do;
16948 +            if ^MISSING(string) then
16949 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16950 +            else
16951 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16952 +          end;
16954 +         end;
16955 +         else if RELATION in ("=") then do;
16956 +           string = strip(string)||", "||strip(character_value);
16957 +         end;
16958 +         else if RELATION in ("ISMISSING") then do;
16960 +         end;
16961 +         if ^missing(varname) then origvar = varname;
16962 +         oldnode=node;
16963 +      end;
16964 +      if last.varname then do;
16965 +         if RELATION in ("ISMISSING") then do;
16966 +           if ^first.varname then do;
16967 +             string = strip(string) || " or MISSING";
16968 +           end;
16969 +         end;
16970 +         put string;
16971 +         if ^missing(varname) then origvar = varname;
16972 +         oldnode=node;
16973 +      end;
16975 +      if last.node then do;
16976 +         put "then ";
16977 +         put " Tree Node Identifier   = " node;
16979 +         %if "&nprior_flag" ne "." %then %do;
16980 +           put " Number of Observations = " NPRIORS;
16981 +         %end;
16982 +         %else %do;
16983 +           put " Number of Observations = " N;
16984 +         %end;
16986 +         %if &numpred gt 0 %then %do;
16987 +           %do i=1 %to &numpred;
16988 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16989 +           %end;
16990 +         %end;
16992 +         put " ";
16993 +         if ^missing(varname) then origvar = varname;
16994 +         oldnode=node;
16995 +      end;
16997 +  run;
16999 +  proc datasets lib=work nolist;
17000 +    delete tempoutpath outnodes;
17001 +  run;
17003 +  %doendm:
17004 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596463 kilobytes of physical memory.
NOTE: Will use 14445 out of 14445 training cases.
NOTE: Using memory pool with 188175360 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 3707216 bytes of work memory.
NOTE: The subtree sequence contains 32 subtrees. The largest has 63 nodes and 32 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Created macro variable NLEAVES equal to 14.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS5.TREE_EMTREE has 1654 observations and 4 variables.
NOTE: The data set EMWS5.TREE_OUTNODES has 27 observations and 24 variables.
NOTE: The data set EMWS5.TREE_OUTPATH has 90 observations and 7 variables.
NOTE: The data set EMWS5.TREE_OUTRULES has 370 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: The data set EMWS5.TREE_OUTSTATS has 189 observations and 5 variables.
NOTE: The data set EMWS5.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTTOPOLOGY has 27 observations and 5 variables.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.45 seconds
      cpu time            0.43 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.46 seconds
      cpu time            0.45 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS5.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 27 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13Apr2022:18:21:26,
      Create Time=13Apr2022:18:21:26
 
NOTE: 165 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17006
17007  *------------------------------------------------------------*;
17008  * End TRAIN: Tree;
17009  *------------------------------------------------------------*;
 
17010  *------------------------------------------------------------*;
17011  * Close any missing semi colons;
17012  *------------------------------------------------------------*;
17013  ;
17014  ;
17015  ;
17016  ;
17017  quit;
17018  *------------------------------------------------------------*;
17019  * Close any unbalanced quotes;
17020  *------------------------------------------------------------*;
17021  /*; *"; *'; */
17022  ;
17023  run;
17024  quit;
17025  /* Reset EM Options */
17026  options formchar="|----|+|---+=|-/\<>*";
17027  options nocenter ls=256 ps=10000;
17028  goptions reset=all device=GIF NODISPLAY;
 
17029  proc sort data=WORK.EM_USER_REPORT;
17030  by ID VIEW;
17031  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 13, 2022
Time:                18:21:26
*------------------------------------------------------------*
17133  %let EMEXCEPTIONSTRING=;
17134  *------------------------------------------------------------*;
17135  * SCORE: Tree;
17136  *------------------------------------------------------------*;
17137  %let EM_ACTION = SCORE;
17138  %let syscc = 0;
17139  %macro main;
17140
17141    %if %upcase(&EM_ACTION) = CREATE %then %do;
17142      filename temp catalog 'sashelp.emmodl.tree_create.source';
17143      %include temp;
17144      filename temp;
17145
17146      %em_tree_create;
17147    %end;
17148
17149     %else
17150     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17151
17152         filename temp catalog 'sashelp.emmodl.tree_train.source';
17153         %include temp;
17154         filename temp;
17155         %em_tree_train;
17156     %end;
17157
17158    %else
17159    %if %upcase(&EM_ACTION) = SCORE %then %do;
17160      filename temp catalog 'sashelp.emmodl.tree_score.source';
17161      %include temp;
17162      filename temp;
17163
17164      %em_tree_score;
17165
17166    %end;
17167
17168    %else
17169    %if %upcase(&EM_ACTION) = REPORT %then %do;
17170
17171         filename temp catalog 'sashelp.emmodl.tree_report.source';
17172         %include temp;
17173         filename temp;
17174
17175         %em_tree_report;
17176     %end;
17177
17178    %else
17179    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17180
17181         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17182         %include temp;
17183         filename temp;
17184         %EM_TREE_OPENTREEVIEWER;
17185
17186     %end;
17187
17188    %else
17189    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17190
17191         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17192         %include temp;
17193         filename temp;
17194         %EM_TREE_CLOSETREEVIEWER;
17195
17196     %end;
17197
17198
17199     %doendm:
17200  %mend main;
17201
17202  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17204 +%macro em_tree_score;
17206 +   /* determine if multiple targets will be processed */
17207 +   %let em_tree_multipleTargets=N;
17208 +   %let em_tree_numTarget=1;
17209 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17210 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17211 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17212 +         %let em_tree_multipleTargets=N;
17213 +      %end;
17214 +      %else %do;
17215 +         /* create macro array of targets  */
17216 +         data _null_;
17217 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17218 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17219 +           if eof then
17220 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17221 +        run;
17223 +        %if &em_tree_numTarget gt 1 %then %do;
17224 +           %let em_tree_multipleTargets=Y;
17225 +        %end;
17226 +      %end;
17227 +   %end;
17229 +   /* build flow and publish scoring code */
17230 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17231 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17233 +   filename treeflow "&EM_USER_TREEFLOW";
17234 +   filename treepub "&EM_USER_TREEPUBLISH";
17236 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17237 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17239 +   %em_copyfile(infref=treeflow, outfref=flowref);
17240 +   %em_copyfile(infref=treepub, outfref=pubref);
17242 +   filename treeflow;
17243 +   filename treepub;
17245 +   /* if priors are used, add code to generate unadjusted residuals in export */
17246 +   %let useAdjPriors = N;
17247 +   data _null_;
17248 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17249 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17250 +   run;
17251 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17252 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17253 +      %include temp;
17254 +      filename temp;
17256 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17257 +      filename adjref "&EM_USER_adjResidualCode";
17258 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17260 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17262 +      filename adjref;
17263 +   %end;
17265 +   /* LEAF */
17266 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17267 +      data _null_;
17268 +        file flowref mod;
17269 +        put 'drop _LEAF_;';
17270 +      run;
17272 +      data _null_;
17273 +        file pubref mod;
17274 +        put 'drop _LEAF_;';
17275 +      run;
17277 +   %end;
17279 +   filename flowref;
17280 +   filename pubref;
17282 +   /* em_metachange code */
17283 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17284 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17285 +   %end;
17287 +   /* variable selection based on importance stat    */
17288 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17289 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17290 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17291 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17292 +     %let obs = %sysfunc(fetch(&dsid));
17293 +     %do %while(&obs=0);
17294 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17295 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17296 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17297 +       %let obs = %sysfunc(fetch(&dsid));
17298 +     %end;
17299 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17300 +   %end;
17302 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17303 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17304 +    %let tree_pred_vars = ;
17305 +    %let tree_pred_lvl =;
17306 +    %let numpred= 0;
17308 +    data _null_;
17309 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17310 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17311 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17312 +     if eof then
17313 +       call symput('numpred', strip(put(_N_, BEST.)));
17314 +    run;
17315 +   %end;
17317 +   %if &numpred ne 0 %then %do;
17318 +    %do i=1 %to &numpred;
17319 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17320 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17321 +    %end;
17322 +   %end;
17324 +   /* determine if multiple targets will be processed */
17325 +   %let em_tree_multipleTargets=N;
17326 +   %let em_tree_numTarget=1;
17327 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17328 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17329 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17330 +         %let em_tree_multipleTargets=N;
17331 +      %end;
17332 +      %else %do;
17333 +        data _null_;
17334 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17335 +          if eof then
17336 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17337 +        run;
17339 +        %if &em_tree_numTarget gt 1 %then %do;
17340 +           %let em_tree_multipleTargets=Y;
17341 +        %end;
17342 +     %end;
17343 +   %end;
17345 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17346 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17348 +      /* variable importance */
17349 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17350 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17352 +         %let validexist=0;
17353 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17354 +           %let validexist=1;
17355 +         %end;
17357 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17358 +         /* and the columns may not be generated                                                                                 */
17359 +         %let em_tree_cvexists=;
17360 +         %let em_tree_surrexists=.;
17361 +         data _null_;
17362 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17363 +            if eof then do ;
17364 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17365 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17366 +            end;
17367 +         run;
17369 +         data &EM_USER_OUTIMPORT;
17370 +            set &EM_USER_OUTIMPORT;
17372 +            /* format columns based on Precison value specified */
17373 +            format importance 15.&EM_PROPERTY_PRECISION
17374 +                 %if &validexist %then %do;
17375 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17376 +                 %end;
17377 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17378 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17379 +                 %end;
17380 +            ;
17381 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17382 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17383 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17384 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17385 +                 %if "&em_tree_surrexists" ne "" %then %do;
17386 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17387 +                 %end;
17388 +                 %if &validexist %then %do;
17389 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17390 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17391 +                 %end;
17392 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17393 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17394 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17395 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17396 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17397 +                 %end;
17398 +            ;
17399 +         run;
17401 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17402 +      %end;
17403 +   %end;
17405 +   %doendm:
17406 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:21:26,
      Create Time=13Apr2022:18:20:13
 
NOTE: 266 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13Apr2022:18:21:26,
      Create Time=13Apr2022:18:20:13
 
NOTE: 244 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10088,
      Last Modified=13Apr2022:18:21:26,
      Create Time=13Apr2022:18:20:13
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9415,
      Last Modified=13Apr2022:18:21:26,
      Create Time=13Apr2022:18:20:13
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17407
17408  *------------------------------------------------------------*;
17409  * End SCORE: Tree;
17410  *------------------------------------------------------------*;
 
17411  proc sort data=WORK.EM_METACHANGE;
17412  by key uname;
17413  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17414  filename x "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
17415  data _null_;
17416  file x;
17417  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
17418  put 'ROLE = "REJECTED";';
17419  put 'end;';
17420  put 'else ';
17421  put 'if upcase(NAME) = "DEMREG" then do;';
17422  put 'ROLE = "REJECTED";';
17423  put 'end;';
17424  put 'else ';
17425  put 'if upcase(NAME) = "DEMTVREG" then do;';
17426  put 'ROLE = "REJECTED";';
17427  put 'end;';
17428  put 'else ';
17429  put 'if upcase(NAME) = "PROMCLASS" then do;';
17430  put 'ROLE = "REJECTED";';
17431  put 'end;';
17432  put 'else ';
17433  put 'if upcase(NAME) = "PROMSPEND" then do;';
17434  put 'ROLE = "REJECTED";';
17435  put 'end;';
17436  put 'else ';
17437  put 'if upcase(NAME) = "PROMTIME" then do;';
17438  put 'ROLE = "REJECTED";';
17439  put 'end;';
17440  put 'else ';
17441  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17442  put 'ROLE = "ASSESS";';
17443  put 'end;';
17444  put 'else ';
17445  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17446  put 'ROLE = "ASSESS";';
17447  put 'end;';
17448  put 'else ';
17449  put 'if upcase(NAME) = "_NODE_" then do;';
17450  put 'ROLE = "SEGMENT";';
17451  put 'LEVEL = "NOMINAL";';
17452  put 'end;';
17453  run;
 
NOTE: The file X is:
      Filename=C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13Apr2022:18:21:26,
      Create Time=13Apr2022:18:20:13
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17454  filename x;
NOTE: Fileref X has been deassigned.
 
17455  filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17456  *------------------------------------------------------------*;
17457  * Tree: Scoring DATA data;
17458  *------------------------------------------------------------*;
17459  data EMWS5.Tree_TRAIN
17460  / view=EMWS5.Tree_TRAIN
17461  ;
17462  set EMWS5.Part_TRAIN
17463  ;
17464  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17465 +****************************************************************;
17466 +******             DECISION TREE SCORING CODE             ******;
17467 +****************************************************************;
17468 +
17469 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17470 +LENGTH F_TargetBuy  $   12;
17471 +LENGTH I_TargetBuy  $   12;
17472 +LENGTH _WARN_  $    4;
17473 +
17474 +******              LABELS FOR NEW VARIABLES              ******;
17475 +label _NODE_ = 'Node' ;
17476 +label _LEAF_ = 'Leaf' ;
17477 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17478 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17479 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17480 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17481 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17482 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17483 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17484 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17485 +label F_TargetBuy = 'From: TargetBuy' ;
17486 +label I_TargetBuy = 'Into: TargetBuy' ;
17487 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17488 +label _WARN_ = 'Warnings' ;
17489 +
17490 +
17491 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17492 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17493 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17494 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17495 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17496 +
17497 +
17498 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17499 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17500 +
17501 +******             ASSIGN OBSERVATION TO NODE             ******;
17502 +IF  NOT MISSING(DemAge ) AND
17503 +  DemAge  <                 44.5 THEN DO;
17504 +  IF  NOT MISSING(DemAffl ) AND
17505 +    DemAffl  <                  9.5 THEN DO;
17506 +    _ARBFMT_1 = PUT( DemGender , $1.);
17507 +     %DMNORMIP( _ARBFMT_1);
17508 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17509 +      IF  NOT MISSING(DemAffl ) AND
17510 +        DemAffl  <                  6.5 THEN DO;
17511 +        _NODE_  =                   18;
17512 +        _LEAF_  =                    2;
17513 +        P_TargetBuy0  =      0.6383495145631;
17514 +        P_TargetBuy1  =     0.36165048543689;
17515 +        Q_TargetBuy0  =      0.6383495145631;
17516 +        Q_TargetBuy1  =     0.36165048543689;
17517 +        V_TargetBuy0  =     0.60089686098654;
17518 +        V_TargetBuy1  =     0.39910313901345;
17519 +        I_TargetBuy  = '0' ;
17520 +        U_TargetBuy  =                    0;
17521 +        END;
17522 +      ELSE DO;
17523 +        IF  NOT MISSING(DemAge ) AND
17524 +                          39.5 <= DemAge  THEN DO;
17525 +          _NODE_  =                   35;
17526 +          _LEAF_  =                    4;
17527 +          P_TargetBuy0  =     0.56326530612244;
17528 +          P_TargetBuy1  =     0.43673469387755;
17529 +          Q_TargetBuy0  =     0.56326530612244;
17530 +          Q_TargetBuy1  =     0.43673469387755;
17531 +          V_TargetBuy0  =     0.58273381294964;
17532 +          V_TargetBuy1  =     0.41726618705035;
17533 +          I_TargetBuy  = '0' ;
17534 +          U_TargetBuy  =                    0;
17535 +          END;
17536 +        ELSE DO;
17537 +          _NODE_  =                   34;
17538 +          _LEAF_  =                    3;
17539 +          P_TargetBuy0  =     0.39285714285714;
17540 +          P_TargetBuy1  =     0.60714285714285;
17541 +          Q_TargetBuy0  =     0.39285714285714;
17542 +          Q_TargetBuy1  =     0.60714285714285;
17543 +          V_TargetBuy0  =     0.36507936507936;
17544 +          V_TargetBuy1  =     0.63492063492063;
17545 +          I_TargetBuy  = '1' ;
17546 +          U_TargetBuy  =                    1;
17547 +          END;
17548 +        END;
17549 +      END;
17550 +    ELSE DO;
17551 +      _NODE_  =                    8;
17552 +      _LEAF_  =                    1;
17553 +      P_TargetBuy0  =     0.77363515312916;
17554 +      P_TargetBuy1  =     0.22636484687083;
17555 +      Q_TargetBuy0  =     0.77363515312916;
17556 +      Q_TargetBuy1  =     0.22636484687083;
17557 +      V_TargetBuy0  =     0.79864253393665;
17558 +      V_TargetBuy1  =     0.20135746606334;
17559 +      I_TargetBuy  = '0' ;
17560 +      U_TargetBuy  =                    0;
17561 +      END;
17562 +    END;
17563 +  ELSE DO;
17564 +    _ARBFMT_1 = PUT( DemGender , $1.);
17565 +     %DMNORMIP( _ARBFMT_1);
17566 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17567 +      _NODE_  =                   11;
17568 +      _LEAF_  =                    9;
17569 +      P_TargetBuy0  =     0.21991341991341;
17570 +      P_TargetBuy1  =     0.78008658008658;
17571 +      Q_TargetBuy0  =     0.21991341991341;
17572 +      Q_TargetBuy1  =     0.78008658008658;
17573 +      V_TargetBuy0  =     0.20677966101694;
17574 +      V_TargetBuy1  =     0.79322033898305;
17575 +      I_TargetBuy  = '1' ;
17576 +      U_TargetBuy  =                    1;
17577 +      END;
17578 +    ELSE DO;
17579 +      IF  NOT MISSING(DemAffl ) AND
17580 +                        14.5 <= DemAffl  THEN DO;
17581 +        _NODE_  =                   21;
17582 +        _LEAF_  =                    8;
17583 +        P_TargetBuy0  =     0.14666666666666;
17584 +        P_TargetBuy1  =     0.85333333333333;
17585 +        Q_TargetBuy0  =     0.14666666666666;
17586 +        Q_TargetBuy1  =     0.85333333333333;
17587 +        V_TargetBuy0  =     0.15094339622641;
17588 +        V_TargetBuy1  =     0.84905660377358;
17589 +        I_TargetBuy  = '1' ;
17590 +        U_TargetBuy  =                    1;
17591 +        END;
17592 +      ELSE DO;
17593 +        IF  NOT MISSING(DemAffl ) AND
17594 +                          11.5 <= DemAffl  THEN DO;
17595 +          _ARBFMT_1 = PUT( DemGender , $1.);
17596 +           %DMNORMIP( _ARBFMT_1);
17597 +          IF _ARBFMT_1 IN ('M' ) THEN DO;
17598 +            _NODE_  =                   51;
17599 +            _LEAF_  =                    7;
17600 +            P_TargetBuy0  =     0.36521739130434;
17601 +            P_TargetBuy1  =     0.63478260869565;
17602 +            Q_TargetBuy0  =     0.36521739130434;
17603 +            Q_TargetBuy1  =     0.63478260869565;
17604 +            V_TargetBuy0  =                 0.45;
17605 +            V_TargetBuy1  =                 0.55;
17606 +            I_TargetBuy  = '1' ;
17607 +            U_TargetBuy  =                    1;
17608 +            END;
17609 +          ELSE DO;
17610 +            _NODE_  =                   50;
17611 +            _LEAF_  =                    6;
17612 +            P_TargetBuy0  =      0.6590909090909;
17613 +            P_TargetBuy1  =     0.34090909090909;
17614 +            Q_TargetBuy0  =      0.6590909090909;
17615 +            Q_TargetBuy1  =     0.34090909090909;
17616 +            V_TargetBuy0  =     0.72222222222222;
17617 +            V_TargetBuy1  =     0.27777777777777;
17618 +            I_TargetBuy  = '0' ;
17619 +            U_TargetBuy  =                    0;
17620 +            END;
17621 +          END;
17622 +        ELSE DO;
17623 +          _NODE_  =                   36;
17624 +          _LEAF_  =                    5;
17625 +          P_TargetBuy0  =      0.6156462585034;
17626 +          P_TargetBuy1  =     0.38435374149659;
17627 +          Q_TargetBuy0  =      0.6156462585034;
17628 +          Q_TargetBuy1  =     0.38435374149659;
17629 +          V_TargetBuy0  =      0.6936416184971;
17630 +          V_TargetBuy1  =     0.30635838150289;
17631 +          I_TargetBuy  = '0' ;
17632 +          U_TargetBuy  =                    0;
17633 +          END;
17634 +        END;
17635 +      END;
17636 +    END;
17637 +  END;
17638 +ELSE DO;
17639 +  IF  NOT MISSING(DemAffl ) AND
17640 +                    12.5 <= DemAffl  THEN DO;
17641 +    IF  NOT MISSING(DemAffl ) AND
17642 +                      15.5 <= DemAffl  THEN DO;
17643 +      IF  NOT MISSING(DemAffl ) AND
17644 +                        18.5 <= DemAffl  THEN DO;
17645 +        _NODE_  =                   31;
17646 +        _LEAF_  =                   14;
17647 +        P_TargetBuy0  =     0.06779661016949;
17648 +        P_TargetBuy1  =      0.9322033898305;
17649 +        Q_TargetBuy0  =     0.06779661016949;
17650 +        Q_TargetBuy1  =      0.9322033898305;
17651 +        V_TargetBuy0  =     0.15151515151515;
17652 +        V_TargetBuy1  =     0.84848484848484;
17653 +        I_TargetBuy  = '1' ;
17654 +        U_TargetBuy  =                    1;
17655 +        END;
17656 +      ELSE DO;
17657 +        _ARBFMT_1 = PUT( DemGender , $1.);
17658 +         %DMNORMIP( _ARBFMT_1);
17659 +        IF _ARBFMT_1 IN ('F' ) THEN DO;
17660 +          _NODE_  =                   48;
17661 +          _LEAF_  =                   12;
17662 +          P_TargetBuy0  =     0.28971962616822;
17663 +          P_TargetBuy1  =     0.71028037383177;
17664 +          Q_TargetBuy0  =     0.28971962616822;
17665 +          Q_TargetBuy1  =     0.71028037383177;
17666 +          V_TargetBuy0  =     0.29411764705882;
17667 +          V_TargetBuy1  =     0.70588235294117;
17668 +          I_TargetBuy  = '1' ;
17669 +          U_TargetBuy  =                    1;
17670 +          END;
17671 +        ELSE DO;
17672 +          _NODE_  =                   49;
17673 +          _LEAF_  =                   13;
17674 +          P_TargetBuy0  =     0.54054054054054;
17675 +          P_TargetBuy1  =     0.45945945945945;
17676 +          Q_TargetBuy0  =     0.54054054054054;
17677 +          Q_TargetBuy1  =     0.45945945945945;
17678 +          V_TargetBuy0  =     0.77142857142857;
17679 +          V_TargetBuy1  =     0.22857142857142;
17680 +          I_TargetBuy  = '0' ;
17681 +          U_TargetBuy  =                    0;
17682 +          END;
17683 +        END;
17684 +      END;
17685 +    ELSE DO;
17686 +      _NODE_  =                   14;
17687 +      _LEAF_  =                   11;
17688 +      P_TargetBuy0  =     0.63975155279503;
17689 +      P_TargetBuy1  =     0.36024844720496;
17690 +      Q_TargetBuy0  =     0.63975155279503;
17691 +      Q_TargetBuy1  =     0.36024844720496;
17692 +      V_TargetBuy0  =     0.58256880733944;
17693 +      V_TargetBuy1  =     0.41743119266055;
17694 +      I_TargetBuy  = '0' ;
17695 +      U_TargetBuy  =                    0;
17696 +      END;
17697 +    END;
17698 +  ELSE DO;
17699 +    _NODE_  =                    6;
17700 +    _LEAF_  =                   10;
17701 +    P_TargetBuy0  =     0.87232532197545;
17702 +    P_TargetBuy1  =     0.12767467802454;
17703 +    Q_TargetBuy0  =     0.87232532197545;
17704 +    Q_TargetBuy1  =     0.12767467802454;
17705 +    V_TargetBuy0  =       0.872368670586;
17706 +    V_TargetBuy1  =     0.12763132941399;
17707 +    I_TargetBuy  = '0' ;
17708 +    U_TargetBuy  =                    0;
17709 +    END;
17710 +  END;
17711 +
17712 +*****  RESIDUALS R_ *************;
17713 +IF  F_TargetBuy  NE '0'
17714 +AND F_TargetBuy  NE '1'  THEN DO;
17715 +        R_TargetBuy0  = .;
17716 +        R_TargetBuy1  = .;
17717 + END;
17718 + ELSE DO;
17719 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17720 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17721 +       SELECT( F_TargetBuy  );
17722 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17723 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17724 +       END;
17725 + END;
17726 +
17727 +****************************************************************;
17728 +******          END OF DECISION TREE SCORING CODE         ******;
17729 +****************************************************************;
17730 +
17731 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17732  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17733  quit;
17734  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17735  filename emflow "C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17736  *------------------------------------------------------------*;
17737  * Tree: Scoring VALIDATE data;
17738  *------------------------------------------------------------*;
17739  data EMWS5.Tree_VALIDATE
17740  / view=EMWS5.Tree_VALIDATE
17741  ;
17742  set EMWS5.Part_VALIDATE
17743  ;
17744  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Kyle McLester\Desktop\dsba-6201\final-project\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17745 +****************************************************************;
17746 +******             DECISION TREE SCORING CODE             ******;
17747 +****************************************************************;
17748 +
17749 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17750 +LENGTH F_TargetBuy  $   12;
17751 +LENGTH I_TargetBuy  $   12;
17752 +LENGTH _WARN_  $    4;
17753 +
17754 +******              LABELS FOR NEW VARIABLES              ******;
17755 +label _NODE_ = 'Node' ;
17756 +label _LEAF_ = 'Leaf' ;
17757 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17758 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17759 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17760 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17761 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17762 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17763 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17764 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17765 +label F_TargetBuy = 'From: TargetBuy' ;
17766 +label I_TargetBuy = 'Into: TargetBuy' ;
17767 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17768 +label _WARN_ = 'Warnings' ;
17769 +
17770 +
17771 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17772 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17773 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17774 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17775 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17776 +
17777 +
17778 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17779 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17780 +
17781 +******             ASSIGN OBSERVATION TO NODE             ******;
17782 +IF  NOT MISSING(DemAge ) AND
17783 +  DemAge  <                 44.5 THEN DO;
17784 +  IF  NOT MISSING(DemAffl ) AND
17785 +    DemAffl  <                  9.5 THEN DO;
17786 +    _ARBFMT_1 = PUT( DemGender , $1.);
17787 +     %DMNORMIP( _ARBFMT_1);
17788 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17789 +      IF  NOT MISSING(DemAffl ) AND
17790 +        DemAffl  <                  6.5 THEN DO;
17791 +        _NODE_  =                   18;
17792 +        _LEAF_  =                    2;
17793 +        P_TargetBuy0  =      0.6383495145631;
17794 +        P_TargetBuy1  =     0.36165048543689;
17795 +        Q_TargetBuy0  =      0.6383495145631;
17796 +        Q_TargetBuy1  =     0.36165048543689;
17797 +        V_TargetBuy0  =     0.60089686098654;
17798 +        V_TargetBuy1  =     0.39910313901345;
17799 +        I_TargetBuy  = '0' ;
17800 +        U_TargetBuy  =                    0;
17801 +        END;
17802 +      ELSE DO;
17803 +        IF  NOT MISSING(DemAge ) AND
17804 +                          39.5 <= DemAge  THEN DO;
17805 +          _NODE_  =                   35;
17806 +          _LEAF_  =                    4;
17807 +          P_TargetBuy0  =     0.56326530612244;
17808 +          P_TargetBuy1  =     0.43673469387755;
17809 +          Q_TargetBuy0  =     0.56326530612244;
17810 +          Q_TargetBuy1  =     0.43673469387755;
17811 +          V_TargetBuy0  =     0.58273381294964;
17812 +          V_TargetBuy1  =     0.41726618705035;
17813 +          I_TargetBuy  = '0' ;
17814 +          U_TargetBuy  =                    0;
17815 +          END;
17816 +        ELSE DO;
17817 +          _NODE_  =                   34;
17818 +          _LEAF_  =                    3;
17819 +          P_TargetBuy0  =     0.39285714285714;
17820 +          P_TargetBuy1  =     0.60714285714285;
17821 +          Q_TargetBuy0  =     0.39285714285714;
17822 +          Q_TargetBuy1  =     0.60714285714285;
17823 +          V_TargetBuy0  =     0.36507936507936;
17824 +          V_TargetBuy1  =     0.63492063492063;
17825 +          I_TargetBuy  = '1' ;
17826 +          U_TargetBuy  =                    1;
17827 +          END;
17828 +        END;
17829 +      END;
17830 +    ELSE DO;
17831 +      _NODE_  =                    8;
17832 +      _LEAF_  =                    1;
17833 +      P_TargetBuy0  =     0.77363515312916;
17834 +      P_TargetBuy1  =     0.22636484687083;
17835 +      Q_TargetBuy0  =     0.77363515312916;
17836 +      Q_TargetBuy1  =     0.22636484687083;
17837 +      V_TargetBuy0  =     0.79864253393665;
17838 +      V_TargetBuy1  =     0.20135746606334;
17839 +      I_TargetBuy  = '0' ;
17840 +      U_TargetBuy  =                    0;
17841 +      END;
17842 +    END;
17843 +  ELSE DO;
17844 +    _ARBFMT_1 = PUT( DemGender , $1.);
17845 +     %DMNORMIP( _ARBFMT_1);
17846 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17847 +      _NODE_  =                   11;
17848 +      _LEAF_  =                    9;
17849 +      P_TargetBuy0  =     0.21991341991341;
17850 +      P_TargetBuy1  =     0.78008658008658;
17851 +      Q_TargetBuy0  =     0.21991341991341;
17852 +      Q_TargetBuy1  =     0.78008658008658;
17853 +      V_TargetBuy0  =     0.20677966101694;
17854 +      V_TargetBuy1  =     0.79322033898305;
17855 +      I_TargetBuy  = '1' ;
17856 +      U_TargetBuy  =                    1;
17857 +      END;
17858 +    ELSE DO;
17859 +      IF  NOT MISSING(DemAffl ) AND
17860 +                        14.5 <= DemAffl  THEN DO;
17861 +        _NODE_  =                   21;
17862 +        _LEAF_  =                    8;
17863 +        P_TargetBuy0  =     0.14666666666666;
17864 +        P_TargetBuy1  =     0.85333333333333;
17865 +        Q_TargetBuy0  =     0.14666666666666;
17866 +        Q_TargetBuy1  =     0.85333333333333;
17867 +        V_TargetBuy0  =     0.15094339622641;
17868 +        V_TargetBuy1  =     0.84905660377358;
17869 +        I_TargetBuy  = '1' ;
17870 +        U_TargetBuy  =                    1;
17871 +        END;
17872 +      ELSE DO;
17873 +        IF  NOT MISSING(DemAffl ) AND
17874 +                          11.5 <= DemAffl  THEN DO;
17875 +          _ARBFMT_1 = PUT( DemGender , $1.);
17876 +           %DMNORMIP( _ARBFMT_1);
17877 +          IF _ARBFMT_1 IN ('M' ) THEN DO;
17878 +            _NODE_  =                   51;
17879 +            _LEAF_  =                    7;
17880 +            P_TargetBuy0  =     0.36521739130434;
17881 +            P_TargetBuy1  =     0.63478260869565;
17882 +            Q_TargetBuy0  =     0.36521739130434;
17883 +            Q_TargetBuy1  =     0.63478260869565;
17884 +            V_TargetBuy0  =                 0.45;
17885 +            V_TargetBuy1  =                 0.55;
17886 +            I_TargetBuy  = '1' ;
17887 +            U_TargetBuy  =                    1;
17888 +            END;
17889 +          ELSE DO;
17890 +            _NODE_  =                   50;
17891 +            _LEAF_  =                    6;
17892 +            P_TargetBuy0  =      0.6590909090909;
17893 +            P_TargetBuy1  =     0.34090909090909;
17894 +            Q_TargetBuy0  =      0.6590909090909;
17895 +            Q_TargetBuy1  =     0.34090909090909;
17896 +            V_TargetBuy0  =     0.72222222222222;
17897 +            V_TargetBuy1  =     0.27777777777777;
17898 +            I_TargetBuy  = '0' ;
17899 +            U_TargetBuy  =                    0;
17900 +            END;
17901 +          END;
17902 +        ELSE DO;
17903 +          _NODE_  =                   36;
17904 +          _LEAF_  =                    5;
17905 +          P_TargetBuy0  =      0.6156462585034;
17906 +          P_TargetBuy1  =     0.38435374149659;
17907 +          Q_TargetBuy0  =      0.6156462585034;
17908 +          Q_TargetBuy1  =     0.38435374149659;
17909 +          V_TargetBuy0  =      0.6936416184971;
17910 +          V_TargetBuy1  =     0.30635838150289;
17911 +          I_TargetBuy  = '0' ;
17912 +          U_TargetBuy  =                    0;
17913 +          END;
17914 +        END;
17915 +      END;
17916 +    END;
17917 +  END;
17918 +ELSE DO;
17919 +  IF  NOT MISSING(DemAffl ) AND
17920 +                    12.5 <= DemAffl  THEN DO;
17921 +    IF  NOT MISSING(DemAffl ) AND
17922 +                      15.5 <= DemAffl  THEN DO;
17923 +      IF  NOT MISSING(DemAffl ) AND
17924 +                        18.5 <= DemAffl  THEN DO;
17925 +        _NODE_  =                   31;
17926 +        _LEAF_  =                   14;
17927 +        P_TargetBuy0  =     0.06779661016949;
17928 +        P_TargetBuy1  =      0.9322033898305;
17929 +        Q_TargetBuy0  =     0.06779661016949;
17930 +        Q_TargetBuy1  =      0.9322033898305;
17931 +        V_TargetBuy0  =     0.15151515151515;
17932 +        V_TargetBuy1  =     0.84848484848484;
17933 +        I_TargetBuy  = '1' ;
17934 +        U_TargetBuy  =                    1;
17935 +        END;
17936 +      ELSE DO;
17937 +        _ARBFMT_1 = PUT( DemGender , $1.);
17938 +         %DMNORMIP( _ARBFMT_1);
17939 +        IF _ARBFMT_1 IN ('F' ) THEN DO;
17940 +          _NODE_  =                   48;
17941 +          _LEAF_  =                   12;
17942 +          P_TargetBuy0  =     0.28971962616822;
17943 +          P_TargetBuy1  =     0.71028037383177;
17944 +          Q_TargetBuy0  =     0.28971962616822;
17945 +          Q_TargetBuy1  =     0.71028037383177;
17946 +          V_TargetBuy0  =     0.29411764705882;
17947 +          V_TargetBuy1  =     0.70588235294117;
17948 +          I_TargetBuy  = '1' ;
17949 +          U_TargetBuy  =                    1;
17950 +          END;
17951 +        ELSE DO;
17952 +          _NODE_  =                   49;
17953 +          _LEAF_  =                   13;
17954 +          P_TargetBuy0  =     0.54054054054054;
17955 +          P_TargetBuy1  =     0.45945945945945;
17956 +          Q_TargetBuy0  =     0.54054054054054;
17957 +          Q_TargetBuy1  =     0.45945945945945;
17958 +          V_TargetBuy0  =     0.77142857142857;
17959 +          V_TargetBuy1  =     0.22857142857142;
17960 +          I_TargetBuy  = '0' ;
17961 +          U_TargetBuy  =                    0;
17962 +          END;
17963 +        END;
17964 +      END;
17965 +    ELSE DO;
17966 +      _NODE_  =                   14;
17967 +      _LEAF_  =                   11;
17968 +      P_TargetBuy0  =     0.63975155279503;
17969 +      P_TargetBuy1  =     0.36024844720496;
17970 +      Q_TargetBuy0  =     0.63975155279503;
17971 +      Q_TargetBuy1  =     0.36024844720496;
17972 +      V_TargetBuy0  =     0.58256880733944;
17973 +      V_TargetBuy1  =     0.41743119266055;
17974 +      I_TargetBuy  = '0' ;
17975 +      U_TargetBuy  =                    0;
17976 +      END;
17977 +    END;
17978 +  ELSE DO;
17979 +    _NODE_  =                    6;
17980 +    _LEAF_  =                   10;
17981 +    P_TargetBuy0  =     0.87232532197545;
17982 +    P_TargetBuy1  =     0.12767467802454;
17983 +    Q_TargetBuy0  =     0.87232532197545;
17984 +    Q_TargetBuy1  =     0.12767467802454;
17985 +    V_TargetBuy0  =       0.872368670586;
17986 +    V_TargetBuy1  =     0.12763132941399;
17987 +    I_TargetBuy  = '0' ;
17988 +    U_TargetBuy  =                    0;
17989 +    END;
17990 +  END;
17991 +
17992 +*****  RESIDUALS R_ *************;
17993 +IF  F_TargetBuy  NE '0'
17994 +AND F_TargetBuy  NE '1'  THEN DO;
17995 +        R_TargetBuy0  = .;
17996 +        R_TargetBuy1  = .;
17997 + END;
17998 + ELSE DO;
17999 +       R_TargetBuy0  =  -P_TargetBuy0 ;
18000 +       R_TargetBuy1  =  -P_TargetBuy1 ;
18001 +       SELECT( F_TargetBuy  );
18002 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
18003 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
18004 +       END;
18005 + END;
18006 +
18007 +****************************************************************;
18008 +******          END OF DECISION TREE SCORING CODE         ******;
18009 +****************************************************************;
18010 +
18011 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18012  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18013  quit;
18014  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
18016  proc sort data=WORK.EM_USER_REPORT;
18017  by ID VIEW;
18018  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18019  *------------------------------------------------------------*;
18020  * Tree: Computing metadata for TRAIN data;
18021  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18402  data EMWS5.Tree_EMINFO;
18403  length TARGET KEY $32 DATA $43;
18404  input TARGET KEY DATA $;
18405  cards;
 
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18409  run;
18410  proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
18411  by TARGET KEY;
18412  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18413  proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18414  by TARGET KEY;
18415  run;
 
NOTE: There were 3 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18416  proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18417  by TARGET KEY;
18418  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18419  data EMWS5.Tree_EMINFO;
18420  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18421  by TARGET KEY;
18422  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18423  proc datasets lib=work nolist;
18424  delete TEMP_INFO SORTEDEMINFO;
18425  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18426  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 13, 2022
Time:                18:21:27
*------------------------------------------------------------*
18450  data EMWS5.Tree_EMOUTFIT;
18451  set EMWS5.Tree_EMOUTFIT;
18452  length TargetLabel $200;
18453  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18454  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18455  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18456  proc sort data=EMWS5.Tree_EMREPORTFIT nothreads;
18457  by TARGET;
18458  run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The data set EMWS5.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18459  %let _EMwarndup = 0;
18460  %let _EMtargetdup =;
18461  %let _EMASEtargetdup =;
18462  data _null_;
18463  set EMWS5.Tree_EMOUTFIT;
18464  if .<_ASE_<0.000001 then do;
18465  call symput('_EMwarndup', '1');
18466  call symput('_EMtargetdup', target);
18467  call symput('_EMASEtargetdup', put(_ASE_, best.));
18468  end;
18469  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18470  %let EMEXCEPTIONSTRING=;
18471  *------------------------------------------------------------*;
18472  * REPORT: Tree;
18473  *------------------------------------------------------------*;
18474  %let EM_ACTION = REPORT;
18475  %let syscc = 0;
18476  %macro main;
18477
18478    %if %upcase(&EM_ACTION) = CREATE %then %do;
18479      filename temp catalog 'sashelp.emmodl.tree_create.source';
18480      %include temp;
18481      filename temp;
18482
18483      %em_tree_create;
18484    %end;
18485
18486     %else
18487     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18488
18489         filename temp catalog 'sashelp.emmodl.tree_train.source';
18490         %include temp;
18491         filename temp;
18492         %em_tree_train;
18493     %end;
18494
18495    %else
18496    %if %upcase(&EM_ACTION) = SCORE %then %do;
18497      filename temp catalog 'sashelp.emmodl.tree_score.source';
18498      %include temp;
18499      filename temp;
18500
18501      %em_tree_score;
18502
18503    %end;
18504
18505    %else
18506    %if %upcase(&EM_ACTION) = REPORT %then %do;
18507
18508         filename temp catalog 'sashelp.emmodl.tree_report.source';
18509         %include temp;
18510         filename temp;
18511
18512         %em_tree_report;
18513     %end;
18514
18515    %else
18516    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18517
18518         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18519         %include temp;
18520         filename temp;
18521         %EM_TREE_OPENTREEVIEWER;
18522
18523     %end;
18524
18525    %else
18526    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18527
18528         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18529         %include temp;
18530         filename temp;
18531         %EM_TREE_CLOSETREEVIEWER;
18532
18533     %end;
18534
18535
18536     %doendm:
18537  %mend main;
18538
18539  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18541 +%macro em_tree_makePlotDs( multipleTar= );
18543 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18544 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18545 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18546 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18548 +  /* determine if validation statistics will be displayed */
18549 +  %let validflag=N;
18550 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18551 +    /* determine if validation data exists */
18552 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18553 +      %let validflag=Y;
18554 +    %end;
18555 +  %end;
18557 +   /* retrieve name of decmeta even in presence of multiple targets */
18558 +   %let decmeta = ;
18559 +   %if &EM_DEC_DECMETA eq %then %do;
18560 +     data _Target;
18561 +       set &em_data_variableset;
18562 +       where ROLE='TARGET' and USE in('D', 'Y');
18563 +       keep NAME;
18564 +     run;
18565 +     proc sort data=_Target;
18566 +       by NAME;
18567 +     run;
18568 +     proc sort data=EM_TARGETDECINFO;
18569 +       by TARGET;
18570 +     run;
18571 +     data _Target;
18572 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18573 +       by NAME;
18574 +       if _a then do;
18575 +         call symput('decmeta', trim(DECMETA));
18576 +       end;
18577 +     run;
18578 +     proc delete data=_Target;run;
18579 +   %end;
18580 +   %else %let decmeta = &EM_DEC_DECMETA;
18583 +  /* retrieve targetEvent from decmeta */
18584 +  %let targetEvent=;
18585 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18586 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18587 +      data _null_;
18588 +       set &DECMETA(where=(_TYPE_="TARGET"));
18589 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18590 +      run;
18591 +    %end;
18592 +  %end;
18594 +  /* retrieve predicted var for targetEvent from decmeta */
18595 +  %let predTarget=;
18596 +  %let predLvl=;
18597 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18598 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18599 +      data _null_;
18600 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18601 +       call symput('predTarget', strip(VARIABLE));
18602 +       call symput('predLvl', strip(LEVEL));
18603 +      run;
18604 +    %end;
18605 +  %end;
18606 +  %else %do;
18607 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18608 +      data _null_;
18609 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18610 +       call symput('predTarget', strip(VARIABLE));
18611 +      run;
18612 +    %end;
18613 +  %end;
18615 +  /* create BelowText value */
18616 +  data belowtext;
18617 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18618 +    keep node belowtext;
18619 +  run;
18621 +  /* replace belowtext with variable label if it exists */
18622 +  data belowtext2;
18623 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18624 +    keep node belowtextlbl;
18625 +  run;
18627 +  proc sort data=belowtext; by node; run;
18628 +  proc sort data=belowtext2; by node; run;
18630 +  data belowtext;
18631 +    merge belowtext belowtext2(in=_a);
18632 +    by node;
18633 +    if _a then belowtext=belowtextlbl;
18634 +    keep node belowtext;
18635 +  run;
18637 +  /* create AboveText value */
18638 +  data abovetext;
18639 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18640 +  run;
18641 +  proc sort data=abovetext; by node numeric_value; run;
18643 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18644 +  data abovetext;
18645 +    set abovetext(rename=(node=parent));
18646 +    by parent numeric_value;
18647 +    retain abovetext tempstring flag branch origval origchar ;
18648 +    length abovetext $256;
18649 +    length tempstring origchar $64;
18651 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18652 +      if first.parent then do;
18653 +        if missing(character_value) then do;
18654 +          numeric_value = round(numeric_value, &sp_precision);
18655 +          abovetext = "< "||strip(NUMERIC_VALUE);
18656 +          branch = 1;
18657 +          origval = numeric_value;
18658 +          output;
18659 +        end;
18660 +        else do;
18661 +          abovetext = "< "||strip(CHARACTER_VALUE);
18662 +          branch = 1;
18663 +          origchar = character_value;
18664 +          output;
18665 +        end;
18667 +        if first.parent AND last.parent then do;
18668 +          if missing(character_value) then do;
18669 +            numeric_value = round(numeric_value, &sp_precision);
18670 +            branch = branch + 1;
18671 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18672 +            output;
18673 +          end;
18674 +          else do;
18675 +            branch = branch + 1;
18676 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18677 +            output;
18678 +          end;
18679 +        end;
18680 +      end;
18681 +      else if last.parent then do;
18682 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18683 +          if missing(character_value) then do;
18684 +            numeric_value = round(numeric_value, &sp_precision);
18685 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18686 +          end;
18687 +          else do;
18688 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18689 +          end;
18690 +          branch = branch + 1;
18691 +          output;
18693 +          if missing(character_value) then do;
18694 +            numeric_value = round(numeric_value, &sp_precision);
18695 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18696 +          end;
18697 +          else do;
18698 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18699 +          end;
18700 +          branch = branch + 1;
18701 +          output;
18702 +        end;
18703 +        else do;
18704 +          if missing(character_value) then do;
18705 +            numeric_value = round(numeric_value, &sp_precision);
18706 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18707 +          end;
18708 +          else do;
18709 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18710 +          end;
18711 +          branch = branch + 1;
18712 +          output;
18713 +        end;
18714 +      end;
18715 +      else do;
18716 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18717 +          if missing(character_value) then do;
18718 +            numeric_value = round(numeric_value,&sp_precision);
18719 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18720 +            origval = numeric_value;
18721 +          end;
18722 +          else do;
18723 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18724 +            origchar = character_value;
18725 +          end;
18726 +          branch = branch + 1;
18727 +          output;
18729 +        end;
18730 +        else do;
18731 +          if missing(character_value) then do;
18732 +            numeric_value = round(numeric_value, &sp_precision);
18733 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18734 +            origval = numeric_value;
18735 +          end;
18736 +          else do;
18737 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18738 +            origval = character_value;
18739 +          end;
18740 +          branch = branch + 1;
18741 +          output;
18742 +        end;
18743 +      end;
18744 +    end;
18745 +    else do;
18746 +       if first.numeric_value then do;
18747 +         flag = 0;
18748 +         abovetext = strip(CHARACTER_VALUE);
18749 +         branch = numeric_value;
18750 +         if first.numeric_value AND last.numeric_value then do;
18751 +           output;
18752 +         end;
18753 +       end;
18754 +       else if last.numeric_value then do;
18755 +         if flag=0 then do;
18756 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18757 +           length = length(strip(tempstring));
18758 +           if length < 32 then do;
18759 +             abovetext = strip(tempstring);
18760 +           end;
18761 +           else do;
18762 +             abovetext = strip(abovetext)||", ...";
18763 +             flag = 1;
18764 +           end;
18765 +         end;
18766 +         branch = numeric_value;
18767 +         output;
18768 +       end;
18769 +       else do;
18770 +         if flag=0 then do;
18771 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18772 +           length = length(strip(tempstring));
18773 +           if length < 32 then do;
18774 +             abovetext = strip(tempstring);
18775 +           end;
18776 +           else do;
18777 +             abovetext = strip(abovetext)||", ...";
18778 +             flag=1;
18779 +           end;
18780 +         end;
18781 +         branch = numeric_value;
18782 +       end;
18783 +    end;
18784 +    keep parent branch abovetext;
18785 +  run;
18787 +  /* Missing value to abovetext */
18788 +  data tempmissing;
18789 +    set &EM_USER_OUTRULES;
18790 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18791 +    rename node=parent numeric_value=branch character_value=misschar;
18792 +  run;
18795 +  proc sort data=abovetext; by parent branch; run;
18796 +  proc sort data=tempmissing; by parent branch; run;
18797 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18799 +  data tempoutnodes;
18800 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18801 +    by parent branch;
18802 +    length traintotal validtotal 8;
18803 +    retain traintotal validtotal;
18805 +    if _a then do;
18806 +      if ^MISSING(abovetext) then do;
18807 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18808 +      end;
18809 +      else do;
18810 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18811 +      end;
18812 +    end;
18813 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18815 +    if node=1 then do;
18816 +      traintotal = N;
18817 +      validtotal=VN;
18818 +    end;
18820 +    drop role rank stat misschar belowtext;
18821 +  run;
18822 +  proc sort data=tempoutnodes; by node; run;
18823 +  proc sort data=belowtext; by node; run;
18825 +  data tempoutnodes;
18826 +    merge tempoutnodes belowtext;
18827 +    by node;
18829 +  run;
18831 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18832 +  %let adjusted = N;
18833 +  %let npriors = 0;
18834 +  data _null_ ;
18835 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18836 +    if eof then do ;
18837 +      call symput("npriors" , strip(put(_N_,best.))) ;
18838 +    end;
18839 +  run;
18840 +  %if &npriors gt 0 %then %let adjusted=Y;
18843 +  /* create a table with targetUsed and targetLevel columns for each node */
18844 +  data temptarmeta;
18845 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18846 +    %if &multipleTar eq N %then %do;
18847 +      AND USE in ('D', 'Y')
18848 +    %end;
18849 +    ));
18850 +    length TARGET $32;
18851 +    Target=name;
18852 +    keep target level;
18853 +  run;
18855 +  %if &multipleTar eq Y %then %do;
18856 +    data temptargetused;
18857 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18858 +      keep node target;
18859 +    run;
18860 +    proc sort data=temptargetused; by target; run;
18861 +    proc sort data=temptarmeta; by target; run;
18862 +    data temptargetused;
18863 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18864 +      by target;
18865 +      if _a and _b;
18866 +    run;
18867 +  %end;
18868 +  %else %do;
18869 +    data temptargetused;
18870 +      set &EM_USER_OUTSTATS;
18871 +      length target $32 tarlevel $10;
18872 +      target="%EM_TARGET";
18873 +      tarlevel="%EM_TARGET_LEVEL";
18874 +      keep node target tarlevel;
18875 +    run;
18876 +    proc sort data=temptargetused nodupkey; by node; run;
18877 +  %end;
18879 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18880 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18881 +  proc sort data=temptargetused; by node; run;
18884 +  /* create tables for all interval targets as well as all class targets */
18885 +  data tempinterval tempclass;
18886 +    merge tempoutstats temptargetused( rename=(target=targetused));
18887 +    by node;
18888 +    %if "&multipleTar" eq "Y" %then %do;
18889 +      if ((missing(Target)) OR (target=targetused ));
18890 +    %end;
18892 +    if tarlevel="INTERVAL" then output tempinterval;
18893 +    else output tempclass;
18894 +  run;
18896 +  /* initialize intTarget and classTarget flags */
18897 +  %let em_intNobs =0;
18898 +  %let em_classNobs = 0;
18899 +  %let em_intTarget= N;
18900 +  %let em_classTarget= N;
18902 +  proc sql;
18903 +    reset noprint;
18904 +    select count(*) into :em_intNobs from tempinterval;
18905 +  quit;
18906 +  proc sql;
18907 +    reset noprint;
18908 +    select count(*) into :em_classNobs from tempclass;
18909 +  quit;
18911 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18912 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18914 +  /* retrieve all information for interval targets */
18915 +  %if &em_intTarget eq Y %then %do;
18917 +    /* determine if leaf variable exists */
18918 +    %let dsid=%sysfunc(open(tempinterval,i));
18919 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18920 +    %let rc=%sysfunc(close(&dsid));
18922 +    proc transpose data=tempinterval
18923 +      %if &leafexists %then %do;
18924 +        (drop=leaf)
18925 +      %end;
18926 +      %if &validexist %then %do;
18927 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18928 +      %end;
18929 +      %else %do;
18930 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18931 +      %end;
18932 +      by node;
18933 +      id statname;
18934 +    run;
18935 +    data tempinterval;
18936 +      set tempinterval;
18937 +      if missing(N) then delete;
18938 +    run;
18939 +  %end;
18941 +  /* retrieve all information for class targets */
18942 +  %if &em_classTarget eq Y %then %do;
18943 +    proc sort data=tempclass; by node category; run;
18944 +    %if &validflag eq N %then %do;
18945 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18946 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18947 +    %end;
18948 +    %else %do;
18949 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18950 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18951 +    %end;
18952 +      set tempclass;
18954 +      %if &validflag eq N %then %do;
18955 +        %if "&adjusted" eq "N" %then %do;
18956 +          if statname="N" then output tempn;
18957 +        %end;
18958 +        %else %do;
18959 +          if statname="NPRIORS" then output tempn;
18960 +        %end;
18961 +        else if statname="PREDICTION" then output temppredict;
18962 +        else if statname="PROBABILITY" then output tempprob;
18963 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18964 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18965 +      %end;
18966 +      %else %do;
18967 +        %if "&adjusted" eq "N" %then %do;
18968 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18969 +        %end;
18970 +        %else %do;
18971 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18972 +        %end;
18973 +        else if statname="PREDICTION" then output temppredict;
18974 +        else if statname="PROBABILITY" then output tempprob;
18975 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18976 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18977 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18978 +      %end;
18979 +    run;
18982 +    /* determine if profit/loss exists in tempprofit */
18983 +    %let em_profitflag=0;
18984 +    %let em_lossflag=0;
18985 +    proc sql;
18986 +      reset noprint;
18987 +      select count(*) into :em_profitflag from tempprofit;
18988 +    quit;
18989 +    proc sql;
18990 +      reset noprint;
18991 +      select count(*) into :em_lossflag from temploss;
18992 +    quit;
18994 +    %if &validFlag eq Y %then %do;
18995 +      proc transpose data=tempn
18996 +        %if "&adjusted" eq "N" %then %do;
18997 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18998 +        %end;
18999 +        %else %do;
19000 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19001 +        %end;
19002 +        by node;
19003 +        id statname;
19004 +      run;
19005 +      %if &em_profitflag ne 0 %then %do;
19006 +        proc transpose data=tempprofit out=tempprofit;
19007 +          by node category;
19008 +          id statname ;
19009 +        run;
19010 +      %end;
19011 +      %if &em_lossflag ne 0 %then %do;
19012 +        proc transpose data=temploss out=temploss;
19013 +          by node category;
19014 +          id statname ;
19015 +        run;
19016 +      %end;
19017 +      data tempprob;
19018 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19019 +        by node
19020 +        %if &multipleTar eq Y %then %do;
19021 +          target
19022 +        %end;
19023 +        category;
19024 +      run;
19025 +    %end;
19027 +    /* store percentcorrect value */
19028 +    data temppredict;
19029 +      merge tempprob temppredict(in=_a);
19030 +      by node category;
19031 +      if _a then do;
19032 +        percentCorrect = statvalue;
19033 +        %if &validFlag eq Y %then %do;
19034 +          vpercentCorrect= vstatvalue;
19035 +        %end;
19036 +      end;
19037 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19038 +      %if &validFlag eq Y %then %do;
19039 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19040 +      %end;
19041 +      ;
19042 +      if missing(percentCorrect) then delete;
19043 +      drop target;
19044 +    run;
19046 +    /* build profittext */
19047 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19048 +      data tempprofittext(keep= node profittext profitloss);
19049 +        length profittext $800 profitloss 8.;
19050 +        retain profittext profitloss;
19052 +        merge tempprob
19053 +        %if &em_profitflag ne 0 %then %do;
19054 +          tempprofit
19055 +        %end;
19056 +        %else %if &em_lossflag ne 0 %then %do;
19057 +          temploss
19058 +        %end;
19059 +        ;
19060 +        by node category;
19062 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19063 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19064 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19065 +          %let profittype = ALL;
19066 +        %end;
19068 +        /* create the profitloss variable for nodecolor if selected */
19069 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19071 +        %if "&profittype" eq "ALL" %then %do;
19072 +          if strip(CATEGORY)="&targetEvent" then do;
19073 +            profitloss=statvalue;
19074 +          end;
19075 +          if first.node then do;
19076 +            %if &validFlag eq N %then %do;
19077 +             %if &em_profitflag ne 0 %then %do;
19078 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19079 +             %end;
19080 +             %if &em_lossflag ne 0 %then %do;
19081 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19082 +             %end;
19083 +            %end;
19084 +            %else %do;
19085 +             %if &em_profitflag ne 0 %then %do;
19086 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19086!+;
19087 +             %end;
19088 +             %if &em_lossflag ne 0 %then %do;
19089 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19090 +             %end;
19091 +            %end;
19092 +          end;
19093 +          else if last.node then do;
19094 +            %if &validFlag eq N %then %do;
19095 +             %if &em_profitflag ne 0 %then %do;
19096 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19097 +             %end;
19098 +             %if &em_lossflag ne 0 %then %do;
19099 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19100 +             %end;
19101 +             /*if CATEGORY="&targetEvent" then do;
19102 +               profitloss=statvalue;
19103 +             end;*/
19104 +            %end;
19105 +            %else %do;
19106 +             %if &em_profitflag ne 0 %then %do;
19107 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19107!+14.&EM_PROPERTY_SPLITPRECISION);
19108 +                if CATEGORY="&targetEvent" then do;
19109 +                 profitloss=ALTERNATIVE_PROFIT;
19110 +                end;
19111 +             %end;
19112 +             %if &em_lossflag ne 0 %then %do;
19113 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19113!+14.&EM_PROPERTY_SPLITPRECISION);
19114 +                if CATEGORY="&targetEvent" then do;
19115 +                  profitloss=ALTERNATIVE_LOSS;
19116 +                end;
19117 +             %end;
19118 +            %end;
19119 +            output;
19120 +          end;
19121 +          else do;
19122 +            %if &validFlag eq N %then %do;
19123 +             %if &em_profitflag ne 0 %then %do;
19124 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19125 +             %end;
19126 +             %if &em_lossflag ne 0 %then %do;
19127 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19128 +             %end;
19129 +            %end;
19130 +            %else %do;
19131 +             %if &em_profitflag ne 0 %then %do;
19132 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19132!+14.&EM_PROPERTY_SPLITPRECISION);
19133 +             %end;
19134 +             %if &em_lossflag ne 0 %then %do;
19135 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19135!+14.&EM_PROPERTY_SPLITPRECISION);
19136 +             %end;
19137 +            %end;
19138 +          end;
19139 +        %end;
19140 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19141 +          if strip(CATEGORY) = "&targetevent" then do;
19142 +            %if &validFlag eq N %then %do;
19143 +             %if &em_profitflag ne 0 %then %do;
19144 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19145 +             %end;
19146 +             %if &em_lossflag ne 0 %then %do;
19147 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19148 +             %end;
19149 +             profitloss=statvalue;
19150 +            %end;
19151 +            %else %do;
19152 +             %if &em_profitflag ne 0 %then %do;
19153 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19153!+;
19154 +                profitloss=ALTERNATIVE_PROFIT;
19155 +             %end;
19156 +             %if &em_lossflag ne 0 %then %do;
19157 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19158 +                profitloss=ALTERNATIVE_LOSS;
19159 +             %end;
19160 +            %end;
19161 +            output;
19162 +          end;
19163 +        %end;
19164 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19165 +          if strip(CATEGORY) = "&targetevent" then do;
19166 +            %if &validFlag eq N %then %do;
19167 +             profitloss=statvalue;
19168 +            %end;
19169 +            %else %do;
19170 +             %if &em_profitflag ne 0 %then %do;
19171 +                profitloss=ALTERNATIVE_PROFIT;
19172 +             %end;
19173 +             %if &em_lossflag ne 0 %then %do;
19174 +                profitloss=ALTERNATIVE_LOSS;
19175 +             %end;
19176 +            %end;
19177 +            output;
19178 +          end;
19179 +        %end;
19180 +      run;
19181 +    %end;
19183 +    data tempprob(keep= node probtext);
19184 +      length probtext $800;
19185 +      retain probtext;
19186 +      set tempprob ;
19187 +      by node;
19189 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19190 +      %let probtype = &EM_PROPERTY_TARGET;
19191 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19192 +        %let probtype = ALL;
19193 +      %end;
19195 +      %if "&probtype" eq "ALL" %then %do;
19196 +        if first.node then do;
19197 +          %if &validFlag eq N %then %do;
19198 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19199 +          %end;
19200 +          %else %do;
19201 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19202 +          %end;
19203 +        end;
19204 +        else if last.node then do;
19205 +          %if &validFlag eq N %then %do;
19206 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19207 +          %end;
19208 +          %else %do;
19209 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19210 +          %end;
19211 +          output;
19212 +        end;
19213 +        else do;
19214 +          %if &validFlag eq N %then %do;
19215 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19216 +          %end;
19217 +          %else %do;
19218 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19219 +          %end;
19220 +        end;
19221 +      %end;
19222 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19223 +        if strip(CATEGORY) = "&targetevent" then do;
19224 +          %if &validFlag eq N %then %do;
19225 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19226 +          %end;
19227 +          %else %do;
19228 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19229 +          %end;
19230 +          output;
19231 +        end;
19232 +      %end;
19233 +      %else %if "&probtype" eq "NONE" %then %do;
19234 +        if last.node then do;
19235 +          output;
19236 +        end;
19237 +      %end;
19238 +    run;
19239 +  %end;
19241 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19243 +  %let oldexists=0;
19244 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19245 +     data old_tree_plot;
19246 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19247 +        rename nodecolor=oldnodecolor;
19248 +     run;
19250 +     proc sort data=old_tree_plot;
19251 +        by node;
19252 +     run;
19254 +     %let oldexists=1;
19255 +  %end;
19257 +  data &EM_USER_TREE_PLOT;
19258 +    length textall $800;
19259 +    merge tempoutnodes temptargetused
19261 +    %if &em_intTarget eq Y %then %do;
19262 +      tempinterval
19263 +    %end;
19265 +    %if &em_classTarget eq Y %then %do;
19267 +      %if &validFlag eq N %then %do;
19268 +        tempn(rename=(statvalue=N))
19269 +      %end;
19270 +      %else %do;
19271 +        tempn
19272 +      %end;
19274 +      temppredict tempprob
19276 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19277 +        tempprofittext
19278 +      %end;
19279 +    %end;
19280 +    ;
19281 +    by node;
19283 +    /* build nodetext based on user selection */
19284 +    textall="";
19286 +    %if &em_intTarget eq Y %then %do;
19287 +    if tarlevel="INTERVAL" then do;
19288 +      /* Nodeid */
19289 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19290 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19291 +      %end;
19293 +      /* Target identifier if multiple targets are used */
19294 +      %if "&multipleTar" eq "Y" %then %do;
19295 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19296 +      %end;
19298 +      %if &validFlag eq Y %then %do;
19299 +         /* Column labels displayed in validflag eq Y only */
19300 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19301 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19301!+noquote ))";
19302 +         %end;
19304 +         /* Average values */
19305 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19306 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19307 +         %end;
19309 +         /* RASE */
19310 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19311 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19312 +         %end;
19314 +         /* Count */
19315 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19316 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19317 +         %end;
19318 +      %end;
19319 +      %else %do;
19320 +         /* Average values */
19321 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19322 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19323 +         %end;
19325 +         /* RASE */
19326 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19327 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19328 +         %end;
19330 +         /* Count */
19331 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19332 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19333 +         %end;
19334 +      %end;
19336 +      /* nodecolor */
19337 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19338 +        nodecolor=PREDICTION;
19339 +      %end;
19340 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19341 +        nodecolor=RASE;
19342 +      %end;
19343 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19344 +        nodecolor=1;
19345 +      %end;
19347 +    end;
19348 +    %end;
19349 +    %if &em_classTarget eq Y %then %do;
19350 +    if tarlevel^="INTERVAL" then  do;
19352 +      /* Nodeid */
19353 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19354 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19355 +      %end;
19356 +      /* Target identifier if multiple targets are used */
19357 +      %if "&multipleTar" eq "Y" %then %do;
19358 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19359 +      %end;
19361 +      /* Predicted values */
19362 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19363 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19364 +      %end;
19366 +      /* Column labels displayed in validflag eq Y only */
19367 +      %if "&ValidFlag" eq "Y" %then %do;
19368 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19369 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19369!+noquote ))";
19370 +        %end;
19371 +      %end;
19373 +      /* Target Values */
19374 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19375 +        textall=strip(textall)||"0A"x||strip(probtext);
19376 +      %end;
19378 +      /* include profit or loss for all target levels */
19379 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19380 +        textall=strip(textall)||"0A"x||strip(profittext);
19381 +      %end;
19383 +      %if &validFlag eq N %then %do;
19384 +        /* Percent Correct */
19385 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19386 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19387 +        %end;
19389 +         /* Count */
19390 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19391 +          %if "&adjusted" eq "N" %then %do;
19392 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19393 +          %end;
19394 +          %else %do;
19395 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19396 +          %end;
19397 +         %end;
19398 +      %end;
19399 +      %else %do;
19400 +        /* Percent Correct */
19401 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19402 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19403 +        %end;
19405 +         /* Count */
19406 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19407 +          %if "&adjusted" eq "N" %then %do;
19408 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19409 +          %end;
19410 +          %else %do;
19411 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19412 +          %end;
19413 +         %end;
19414 +      %end;
19416 +      /* nodecolor */
19417 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19418 +       %if &multipleTar ne Y %then %do;
19419 +        nodecolor=&predTarget;
19420 +       %end;
19421 +       %else %do;
19422 +         nodecolor=percentcorrect;
19423 +       %end;
19424 +      %end;
19425 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19426 +        nodecolor=percentcorrect;
19427 +      %end;
19428 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19429 +        nodecolor=1;
19430 +      %end;
19431 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19432 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19433 +          nodecolor=percentcorrect;
19434 +        %end;
19435 +        %else %do;
19436 +          nodecolor=profitloss;
19437 +        %end;
19438 +      %end;
19440 +    end;
19441 +    %end;
19442 +    %if &em_intTarget eq Y %then %do;
19443 +     drop  PREDICTION  TARGET TARLEVEL
19444 +     %if &ValidFlag eq Y %then %do;
19445 +         VPREDICTION
19446 +     %end;
19447 +     ;
19448 +    %end;
19449 +    %if &em_classTarget eq Y %then %do;
19450 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19451 +     %if &ValidFlag eq Y %then %do;
19452 +         VSTATVALUE
19453 +     %end;
19454 +     ;
19455 +    %end;
19457 +  run;
19459 +  /* add leaf index information to plotds - based on primary target only*/
19460 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19461 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19462 +      set &EM_USER_OUTSTATS;
19463 +      if ((statname="PROBABILITY"
19464 +      %if &validexist %then %do;
19465 +       or statname="VALID: PROBABILITY"
19466 +      %end;
19467 +      ) AND (CATEGORY="&TARGETEVENT")
19468 +      %if "&multipleTar" eq "Y" %then %do;
19469 +        AND (Target="%EM_TARGET")
19470 +      %end;
19471 +      );
19472 +    run;
19474 +    %if &validexist %then %do;
19475 +      proc sort data=tempprob; by node; run;
19476 +      %let vpredTarget = V%substr(&predTarget, 2);
19477 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19478 +         by node;
19479 +         id statname;
19480 +      run;
19481 +    %end;
19482 +  %end;
19483 +  %else %do;
19484 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19485 +      set &EM_USER_OUTSTATS;
19486 +      if ((statname="PREDICTION"
19487 +      %if &validexist %then %do;
19488 +       or statname="VALID: PREDICTION"
19489 +      %end;
19490 +      )
19491 +      %if "&multipleTar" eq "Y" %then %do;
19492 +        AND (Target="%EM_TARGET")
19493 +      %end;
19494 +      );
19495 +    run;
19496 +    %if &validexist %then %do;
19497 +      proc sort data=tempprob; by node; run;
19498 +      %let vpredTarget = V%substr(&predTarget, 2);
19499 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19500 +         by node;
19501 +         id statname;
19502 +      run;
19503 +    %end;
19504 +  %end;
19506 +  proc sort data=tempprob; by node; run;
19507 +  data tempoutnodes;
19508 +    merge tempoutnodes tempprob;
19509 +    by node;
19510 +  run;
19512 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19513 +  data tempnodes;
19514 +    retain traintotal validtotal;
19515 +    set tempnodes(where=(leaf ne . ));
19516 +    tprob=round(&predTarget, .01);
19517 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19518 +      percevent_train=round(tprob*100, .01);
19519 +    %end;
19520 +    %else %do;
19521 +      percevent_train=tprob;
19522 +    %end;
19524 +    perc_train=round((n/traintotal)*100, 0.01);
19525 +    /* leafwidth already has a *10 multiplier */
19526 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19528 +    %if &validexist %then %do;
19529 +      %let vpredTarget = V%substr(&predTarget,2);
19530 +      vprob=round(&vpredTarget, .01);
19531 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19532 +        percevent_valid=round(vprob*100, .01);
19533 +      %end;
19534 +      %else %do;
19535 +        percevent_valid=vprob;
19536 +      %end;
19537 +      perc_valid=round((vn/validtotal)*100, .01);
19538 +    %end;
19540 +    index=_N_;
19541 +    keep node index tprob perc_train percevent_train
19542 +    %if &validexist %then %do;
19543 +        vprob percevent_valid perc_valid
19544 +    %end;
19545 +    ;
19546 +  run;
19547 +  proc sort data=tempnodes; by node; run;
19548 +  data &EM_USER_TREE_PLOT;
19549 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19550 +    by node;
19551 +    if missing(node) then delete;
19552 +    %if &oldexists %then %do;
19553 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19554 +      drop oldnodecolor;
19555 +    %end;
19556 +    abovetext = compbl(abovetext);
19558 +    /* add variable labels */
19559 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19560 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19561 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19562 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19563 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19564 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19566 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19567 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19568 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19569 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19570 +          %end;
19571 +          %else %do;
19572 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19573 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19574 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19575 +          %end;
19576 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19578 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19579 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19580 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19581 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19582 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19583 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19584 +          %end;
19585 +          %else %do;
19586 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19587 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19588 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19589 +          %end;
19590 +    ;
19591 +  run;
19593 +  /* delete temporary tables */
19594 +  proc datasets lib=work nolist;
19595 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19596 +  run;
19598 +%mend em_tree_makePlotDs;
19602 +%macro em_tree_report;
19604 +   /* report properties */
19605 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19606 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19607 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19608 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19609 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19610 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19611 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19612 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19613 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19614 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19615 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19616 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19617 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19619 +   %let validexist=0;
19620 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19621 +     %let validexist=1;
19622 +   %end;
19624 +   /* determine if multiple targets will be processed */
19625 +   %let em_tree_multipleTargets=N;
19626 +   %let em_tree_numTarget=1;
19627 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19628 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19629 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19630 +         %let em_tree_multipleTargets=N;
19631 +      %end;
19632 +      %else %do;
19633 +        data _null_;
19634 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19635 +          if eof then
19636 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19637 +        run;
19639 +        %if &em_tree_numTarget gt 1 %then %do;
19640 +           %let em_tree_multipleTargets=Y;
19641 +        %end;
19642 +     %end;
19643 +   %end;
19645 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19647 +   /* variable importance */
19648 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19649 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19651 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19652 +     /* and the columns may not be generated                                                                                 */
19653 +     %let em_tree_cvexists=;
19654 +     %let em_tree_surrexists=.;
19655 +     data _null_;
19656 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19657 +       if eof then do ;
19658 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19659 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19660 +       end;
19661 +     run;
19663 +     data &EM_USER_OUTIMPORT;
19664 +         set &EM_USER_OUTIMPORT;
19665 +         /* format columns based on Precison value specified */
19666 +         format importance 15.&EM_PROPERTY_PRECISION
19667 +              %if &validexist %then %do;
19668 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19669 +              %end;
19670 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19671 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19672 +              %end;
19673 +         ;
19674 +     run;
19676 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19677 +     proc print data=&EM_USER_OUTIMPORT
19678 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19679 +          (where=((nrules>0) OR (nsurrogates>0)))
19680 +        %end;
19681 +        %else %do;
19682 +           (where=(nrules>0))
19683 +        %end;
19684 +        label noobs
19685 +        ;
19686 +     run;
19687 +     title10;
19689 +   %end;
19691 +   /* Sequence */
19692 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19693 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19694 +   data _null_ ;
19695 +      set &EM_USER_outseq (obs=2) end=eof ;
19696 +      if eof then do ;
19697 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19698 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19699 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19700 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19701 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19702 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19703 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19704 +      end;
19705 +    run;
19707 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19708 +      data &EM_USER_OUTSEQ;
19709 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19710 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19711 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19712 +           _XMISC_=_VMISC_
19713 +        %end;
19714 +        %if "&em_tree_aprof" ne "."  %then %do;
19715 +           _XAPROF_=_VAPROF_
19716 +           _XPROF_ = _VPROF_
19717 +        %end;
19718 +        %if "&em_tree_aloss" ne "."  %then %do;
19719 +           _XALOSS_=_VALOSS_
19720 +        %end;
19721 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19722 +           _XPASE_ = _VPASE_
19723 +           _XPMISC_ = _VPMISC_
19724 +        %end;
19726 +        ));
19727 +     %end;
19728 +     %else %do;
19729 +        set &EM_USER_OUTSEQ;
19730 +     %end;
19732 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19733 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19734 +            _MISC_   15.&EM_PROPERTY_PRECISION
19735 +         %end;
19736 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19737 +            _PASE_  15.&EM_PROPERTY_PRECISION
19738 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19739 +         %end;
19740 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19741 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19742 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19743 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19744 +            %end;
19745 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19746 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19747 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19748 +            %end;
19749 +         %end;
19750 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19751 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19752 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19753 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19754 +            %end;
19755 +         %end;
19756 +         %if "&em_tree_seq" ne "." %then %do;
19757 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19758 +         %end;
19759 +         %if "&em_tree_vseq" ne "." %then %do;
19760 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19761 +         %end;
19762 +         %if "&em_tree_aprof" ne "." %then %do;
19763 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19764 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19765 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19766 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19767 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19768 +           %end;
19769 +         %end;
19770 +         %else %if "&em_tree_aloss" ne "." %then %do;
19771 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19772 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19773 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19774 +           %end;
19775 +         %end;
19776 +      ;
19777 +    run;
19778 +   %end;
19780 +   /* Observation Based Importance */
19781 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19783 +      /* need to check for 0 obs */
19784 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19785 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19786 +      %let rc=%sysfunc(close(&dsid));
19788 +      %if &onobs %then %do;
19789 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19790 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19792 +         data &EM_USER_OUTOBSIMP;
19793 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19794 +           if _a;
19795 +           by _INPUT1_;
19796 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19797 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19798 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19799 +                   %end;
19800 +                   ;
19801 +         run;
19802 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19803 +      %end;
19804 +   %end;
19806 +  %end;
19808 +  /* create dataset to support tree diagram and icicle plot */
19809 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19810 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19812 +  /* display tree diagram */
19813 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19814 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19816 +  /* display icicle diagram */
19817 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19818 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19820 +  /* Leaf Statistics Plot */
19821 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19823 +  /* print leaf information to output window */
19824 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19826 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19827 +       by descending N;
19828 +     run;
19830 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19831 +     %local vn;
19832 +     data _null_;
19833 +       set t (obs=2) end=eof;
19834 +       if eof then do;
19835 +         call symput("vn", strip(put(vn, best.)));
19836 +       end;
19837 +     run;
19839 +     data t;
19840 +       set t;
19841 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19842 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19843 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19844 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19845 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19846 +       %end;
19847 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19848 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19849 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19850 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19851 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19852 +          %end;
19853 +       %end;
19854 +       ;
19855 +     run;
19857 +     /* determine if rase is found in t */
19858 +    %let dsid=%sysfunc(open(t,i));
19859 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19860 +    %let rc=%sysfunc(close(&dsid));
19862 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19863 +     proc print data=t noobs label;
19864 +       where tprob ne .;
19865 +       var node depth N tprob
19866 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19867 +         %if "&vn" ne "." %then %do;
19868 +           VN
19869 +         %end;
19870 +         vprob
19871 +       %end;
19872 +       %if &raseexists %then %do;
19873 +            RASE
19874 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19875 +              VRASE
19876 +            %end;
19877 +       %end;
19878 +       ;
19879 +     run;
19880 +     title10;
19881 +  %end;
19883 +  /* create plots that are done during training of node */
19884 +  /* display iterative plot, including reference line */
19885 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19886 +   /* %if &nleaves eq  %then %do; */
19887 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19888 +      data _null_;
19889 +        set &EM_USER_OUTTOPOLOGY end=eof;
19890 +        if eof then do;
19891 +          call symput('nleaves', LEAF);
19892 +        end;
19893 +      run;
19894 +   /* %end; */
19896 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19897 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19898 +  %end;
19900 +  /* display leaf statistics */
19901 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19903 +  /* stats by node if multiple targets = Y */
19904 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19905 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19906 +    data &EM_USER_OUTSTATS;
19907 +      set &EM_USER_OUTSTATS;
19909 +     * if STATNAME="TARGET" then delete;
19910 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19911 +      drop leaf;
19912 +    run;
19913 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19915 +  %end;
19916 +  %else %do;
19917 +    /* add outstats and outdescribe to spk but not results */
19918 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19919 +  %end;
19921 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: The data set EMWS5.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 370 observations read from the data set EMWS5.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 189 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 162 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 189 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 54 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 27 observations read from the data set WORK.TEMPN.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 27 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
19922
19923  *------------------------------------------------------------*;
19924  * End REPORT: Tree;
19925  *------------------------------------------------------------*;
 
19926  /* Reset EM Options */
19927  options formchar="|----|+|---+=|-/\<>*";
19928  options nocenter ls=256 ps=10000;
19929  goptions reset=all device=GIF NODISPLAY;
 
19930  proc sort data=WORK.EM_USER_REPORT;
19931  by ID VIEW;
19932  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19933  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19934  by NAME;
19935  run;
 
NOTE: There were 14 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19936  proc sort data=EMWS5.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19937  by NAME;
19938  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19939  data WORK.ASSESS_META;
19940  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19941  by NAME;
19942  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19943  data EM_temp_assessMeta;
19944  set EMWS5.Tree_CMeta_TRAIN;
19945  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19946  run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19947  data EM_temp_assessdata;
19948  set EMWS5.Tree_TRAIN(keep=
19949  F_TargetBuy
19950  I_TargetBuy
19951  P_TargetBuy0
19952  P_TargetBuy1
19953  Q_TargetBuy0
19954  Q_TargetBuy1
19955  R_TargetBuy0
19956  R_TargetBuy1
19957  U_TargetBuy
19958  V_TargetBuy0
19959  V_TargetBuy1
19960  _WARN_
19961  TargetBuy
19962  );
19963  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24245   data EM_temp_assessMeta;
24246   set EMWS5.Tree_CMeta_TRAIN;
24247   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24248   run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24249   data EM_temp_assessdata;
24250   set EMWS5.Tree_VALIDATE(keep=
24251   F_TargetBuy
24252   I_TargetBuy
24253   P_TargetBuy0
24254   P_TargetBuy1
24255   Q_TargetBuy0
24256   Q_TargetBuy1
24257   R_TargetBuy0
24258   R_TargetBuy1
24259   U_TargetBuy
24260   V_TargetBuy0
24261   V_TargetBuy1
24262   _WARN_
24263   TargetBuy
24264   );
24265   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 7778 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS5.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28556   %let _cn = %sysfunc(getoption(CENTER));
28557   options nocenter;
28558   proc print data=EMWS5.Tree_EMREPORTFIT noobs label;
28559   var STAT LABEL TRAIN
28560   VALIDATE
28561   ;
28562   by TARGET TARGETLABEL;
28563   title9 ' ';
28564   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28565   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28566   title10;
28567   options &_cn;
 
28568   proc sort data=EMWS5.Tree_EMCLASSIFICATION nothreads;
28569   by DATAROLE TARGET TARGETLABEL;
28570   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28571   %let _cn = %sysfunc(getoption(CENTER));
28572   options nocenter;
28573   proc print data=EMWS5.Tree_EMCLASSIFICATION noobs label;
28574   var from into pct_row pct_col count percent
28575   ;
28576   by DATAROLE TARGET TARGETLABEL;
28577   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28578   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28579   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28580   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28581   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28582   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28583   where _TYPE_='PREDICTION';
28584   title9 ' ';
28585   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28586   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28587   title9;
28588   title10;
28589   options &_cn;
 
28590   %let _cn = %sysfunc(getoption(CENTER));
28591   options nocenter;
28592   data EMWS5.Tree_EMEVENTREPORT;
28593   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28594   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28594 ! FALSEEVENT
28595   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28596      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28597   FALSEEVENT=0;
28598   FALSENEVENT=0;
28599   TRUEEVENT=0;
28600   TRUENEVENT=0;
28601   set EMWS5.Tree_EMEVENTREPORT;
28602   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28603   proc print data=EMWS5.Tree_EMEVENTREPORT noobs label;
28604   title9 ' ';
28605   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28606   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28607   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28608   title10;
28609   options &_cn;
 
28610   proc datasets library=EMWS5 nolist;
28611   modify Tree_EMRANK;
28612   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28613   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28614   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMRANK.DATA.
28615   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28616   %let _cn = %sysfunc(getoption(CENTER));
28617   options nocenter;
28618   proc print data=EMWS5.Tree_EMRANK label noobs;
28619   var
28620   decile gain lift liftc resp respc N _meanP_;
28621   by
28622   notsorted DATAROLE
28623   notsorted TARGET
28624   notsorted TARGETLABEL
28625   ;
28626   title9 ' ';
28627   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28628   run;
 
NOTE: There were 40 observations read from the data set EMWS5.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28629   title10;
28630   options &_cn;
 
28631   proc datasets library=EMWS5 nolist;
28632   modify Tree_EMSCOREDIST;
28633   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28634   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28635   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMSCOREDIST.DATA.
28636   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
